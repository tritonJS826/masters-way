// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ways_way_tags.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWaysWayTag = `-- name: CreateWaysWayTag :one
INSERT INTO ways_way_tags(
    way_uuid,
    way_tag_uuid
) VALUES (
    $1,
    $2
) RETURNING way_uuid, way_tag_uuid
`

type CreateWaysWayTagParams struct {
	WayUuid    pgtype.UUID `json:"way_uuid"`
	WayTagUuid pgtype.UUID `json:"way_tag_uuid"`
}

func (q *Queries) CreateWaysWayTag(ctx context.Context, arg CreateWaysWayTagParams) (WaysWayTag, error) {
	row := q.db.QueryRow(ctx, createWaysWayTag, arg.WayUuid, arg.WayTagUuid)
	var i WaysWayTag
	err := row.Scan(&i.WayUuid, &i.WayTagUuid)
	return i, err
}

const deleteWayTagFromWay = `-- name: DeleteWayTagFromWay :exec
DELETE FROM ways_way_tags
WHERE ways_way_tags.way_uuid = $1 AND ways_way_tags.way_tag_uuid = $2
`

type DeleteWayTagFromWayParams struct {
	WayUuid    pgtype.UUID `json:"way_uuid"`
	WayTagUuid pgtype.UUID `json:"way_tag_uuid"`
}

func (q *Queries) DeleteWayTagFromWay(ctx context.Context, arg DeleteWayTagFromWayParams) error {
	_, err := q.db.Exec(ctx, deleteWayTagFromWay, arg.WayUuid, arg.WayTagUuid)
	return err
}
