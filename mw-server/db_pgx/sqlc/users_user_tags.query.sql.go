// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users_user_tags.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUsersUserTag = `-- name: CreateUsersUserTag :one
INSERT INTO users_user_tags(
    user_uuid,
    user_tag_uuid
) VALUES (
    $1, $2
) RETURNING user_uuid, user_tag_uuid
`

type CreateUsersUserTagParams struct {
	UserUuid    pgtype.UUID `json:"user_uuid"`
	UserTagUuid pgtype.UUID `json:"user_tag_uuid"`
}

func (q *Queries) CreateUsersUserTag(ctx context.Context, arg CreateUsersUserTagParams) (UsersUserTag, error) {
	row := q.db.QueryRow(ctx, createUsersUserTag, arg.UserUuid, arg.UserTagUuid)
	var i UsersUserTag
	err := row.Scan(&i.UserUuid, &i.UserTagUuid)
	return i, err
}

const deleteUserTagFromUser = `-- name: DeleteUserTagFromUser :exec
DELETE FROM users_user_tags
WHERE users_user_tags.user_uuid = $1 AND users_user_tags.user_tag_uuid = $2
`

type DeleteUserTagFromUserParams struct {
	UserUuid    pgtype.UUID `json:"user_uuid"`
	UserTagUuid pgtype.UUID `json:"user_tag_uuid"`
}

func (q *Queries) DeleteUserTagFromUser(ctx context.Context, arg DeleteUserTagFromUserParams) error {
	_, err := q.db.Exec(ctx, deleteUserTagFromUser, arg.UserUuid, arg.UserTagUuid)
	return err
}

const getTagsCountByUserId = `-- name: GetTagsCountByUserId :one
SELECT COUNT(*) AS tags_count
FROM users_user_tags
WHERE user_uuid = $1
`

func (q *Queries) GetTagsCountByUserId(ctx context.Context, userUuid pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getTagsCountByUserId, userUuid)
	var tags_count int64
	err := row.Scan(&tags_count)
	return tags_count, err
}
