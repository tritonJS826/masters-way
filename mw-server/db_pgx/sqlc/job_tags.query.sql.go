// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_tags.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getJobTagByUuid = `-- name: GetJobTagByUuid :one
SELECT uuid, name, description, color, way_uuid FROM job_tags
WHERE job_tags.uuid = $1
`

func (q *Queries) GetJobTagByUuid(ctx context.Context, jobTagsUuid pgtype.UUID) (JobTag, error) {
	row := q.db.QueryRow(ctx, getJobTagByUuid, jobTagsUuid)
	var i JobTag
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.WayUuid,
	)
	return i, err
}

const getListJobTagsByWayUuid = `-- name: GetListJobTagsByWayUuid :many
SELECT uuid, name, description, color, way_uuid FROM job_tags
WHERE way_uuid = $1
ORDER BY uuid
`

func (q *Queries) GetListJobTagsByWayUuid(ctx context.Context, wayUuid pgtype.UUID) ([]JobTag, error) {
	rows, err := q.db.Query(ctx, getListJobTagsByWayUuid, wayUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobTag{}
	for rows.Next() {
		var i JobTag
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.Color,
			&i.WayUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
