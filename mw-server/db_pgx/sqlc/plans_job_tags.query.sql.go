// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: plans_job_tags.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlansJobTag = `-- name: CreatePlansJobTag :one
INSERT INTO plans_job_tags(
    plan_uuid,
    job_tag_uuid
) VALUES (
    $1, $2
) RETURNING plan_uuid, job_tag_uuid
`

type CreatePlansJobTagParams struct {
	PlanUuid   pgtype.UUID `json:"plan_uuid"`
	JobTagUuid pgtype.UUID `json:"job_tag_uuid"`
}

func (q *Queries) CreatePlansJobTag(ctx context.Context, arg CreatePlansJobTagParams) (PlansJobTag, error) {
	row := q.db.QueryRow(ctx, createPlansJobTag, arg.PlanUuid, arg.JobTagUuid)
	var i PlansJobTag
	err := row.Scan(&i.PlanUuid, &i.JobTagUuid)
	return i, err
}

const deletePlansJobTagByIds = `-- name: DeletePlansJobTagByIds :exec
DELETE FROM plans_job_tags
WHERE plan_uuid = $1 AND job_tag_uuid = $2
`

type DeletePlansJobTagByIdsParams struct {
	PlanUuid   pgtype.UUID `json:"plan_uuid"`
	JobTagUuid pgtype.UUID `json:"job_tag_uuid"`
}

func (q *Queries) DeletePlansJobTagByIds(ctx context.Context, arg DeletePlansJobTagByIdsParams) error {
	_, err := q.db.Exec(ctx, deletePlansJobTagByIds, arg.PlanUuid, arg.JobTagUuid)
	return err
}

const getPlansByDayReportUuids = `-- name: GetPlansByDayReportUuids :many
SELECT
    uuid, created_at, updated_at, description, time, owner_uuid, is_done, day_report_uuid,
    COALESCE(
        ARRAY(
            SELECT plans_job_tags.job_tag_uuid
            FROM plans_job_tags
            WHERE plans.uuid = plans_job_tags.plan_uuid
    ),
    '{}'
    )::VARCHAR[] AS tag_uuids
FROM plans WHERE plans.day_report_uuid = ANY($1::UUID[])
`

type GetPlansByDayReportUuidsRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	IsDone        bool             `json:"is_done"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) GetPlansByDayReportUuids(ctx context.Context, dayReportUuids []pgtype.UUID) ([]GetPlansByDayReportUuidsRow, error) {
	rows, err := q.db.Query(ctx, getPlansByDayReportUuids, dayReportUuids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPlansByDayReportUuidsRow{}
	for rows.Next() {
		var i GetPlansByDayReportUuidsRow
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Time,
			&i.OwnerUuid,
			&i.IsDone,
			&i.DayReportUuid,
			&i.TagUuids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
