// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: plans.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlan = `-- name: CreatePlan :one
INSERT INTO plans(
    created_at,
    updated_at,
    description,
    time,
    owner_uuid,
    is_done,
    day_report_uuid
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING uuid, created_at, updated_at, description, time, owner_uuid, is_done, day_report_uuid,
    (SELECT name FROM users WHERE uuid = $5) AS owner_name,
    -- get tag uuids
    COALESCE(
        ARRAY(
            SELECT plans_job_tags.job_tag_uuid
            FROM plans_job_tags
            WHERE plans.uuid = plans_job_tags.plan_uuid
        ),
        '{}'
    )::VARCHAR[] AS tag_uuids
`

type CreatePlanParams struct {
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	IsDone        bool             `json:"is_done"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
}

type CreatePlanRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	IsDone        bool             `json:"is_done"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	OwnerName     string           `json:"owner_name"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (CreatePlanRow, error) {
	row := q.db.QueryRow(ctx, createPlan,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Description,
		arg.Time,
		arg.OwnerUuid,
		arg.IsDone,
		arg.DayReportUuid,
	)
	var i CreatePlanRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Time,
		&i.OwnerUuid,
		&i.IsDone,
		&i.DayReportUuid,
		&i.OwnerName,
		&i.TagUuids,
	)
	return i, err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM plans
WHERE uuid = $1
`

func (q *Queries) DeletePlan(ctx context.Context, planUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePlan, planUuid)
	return err
}

const getListPlansByDayReportId = `-- name: GetListPlansByDayReportId :many
SELECT uuid, created_at, updated_at, description, time, owner_uuid, is_done, day_report_uuid FROM plans
WHERE plans.day_report_uuid = $1
ORDER BY created_at
`

func (q *Queries) GetListPlansByDayReportId(ctx context.Context, dayReportUuid pgtype.UUID) ([]Plan, error) {
	rows, err := q.db.Query(ctx, getListPlansByDayReportId, dayReportUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Plan{}
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Time,
			&i.OwnerUuid,
			&i.IsDone,
			&i.DayReportUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlan = `-- name: UpdatePlan :one
UPDATE plans
SET
updated_at = coalesce($1, updated_at),
description = coalesce($2, description),
time = coalesce($3, time),
is_done = coalesce($4, is_done)
WHERE plans.uuid = $5
RETURNING uuid, created_at, updated_at, description, time, owner_uuid, is_done, day_report_uuid,
    (SELECT name FROM users WHERE plans.owner_uuid = users.uuid) AS owner_name,
    -- get tag uuids
    COALESCE(
        ARRAY(
            SELECT plans_job_tags.job_tag_uuid
            FROM plans_job_tags
            WHERE plans.uuid = plans_job_tags.plan_uuid
        ),
        '{}'
    )::VARCHAR[] AS tag_uuids
`

type UpdatePlanParams struct {
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	Description pgtype.Text      `json:"description"`
	Time        pgtype.Int4      `json:"time"`
	IsDone      pgtype.Bool      `json:"is_done"`
	Uuid        pgtype.UUID      `json:"uuid"`
}

type UpdatePlanRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	IsDone        bool             `json:"is_done"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	OwnerName     string           `json:"owner_name"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) (UpdatePlanRow, error) {
	row := q.db.QueryRow(ctx, updatePlan,
		arg.UpdatedAt,
		arg.Description,
		arg.Time,
		arg.IsDone,
		arg.Uuid,
	)
	var i UpdatePlanRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Time,
		&i.OwnerUuid,
		&i.IsDone,
		&i.DayReportUuid,
		&i.OwnerName,
		&i.TagUuids,
	)
	return i, err
}
