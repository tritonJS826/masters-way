// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_dones.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobDone = `-- name: CreateJobDone :one
INSERT INTO job_dones(
    created_at,
    updated_at,
    description,
    time,
    owner_uuid,
    day_report_uuid
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING uuid, created_at, updated_at, description, time, owner_uuid, day_report_uuid,
    (SELECT name FROM users WHERE uuid = $5) AS owner_name,
    -- get tag uuids
    COALESCE(
        ARRAY(
            SELECT job_dones_job_tags.job_tag_uuid
            FROM job_dones_job_tags
            WHERE job_dones.uuid = job_dones_job_tags.job_done_uuid
        ),
    '{}'
    )::VARCHAR[] AS tag_uuids
`

type CreateJobDoneParams struct {
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
}

type CreateJobDoneRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	OwnerName     string           `json:"owner_name"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) CreateJobDone(ctx context.Context, arg CreateJobDoneParams) (CreateJobDoneRow, error) {
	row := q.db.QueryRow(ctx, createJobDone,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Description,
		arg.Time,
		arg.OwnerUuid,
		arg.DayReportUuid,
	)
	var i CreateJobDoneRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Time,
		&i.OwnerUuid,
		&i.DayReportUuid,
		&i.OwnerName,
		&i.TagUuids,
	)
	return i, err
}
