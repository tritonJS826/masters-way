// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: profile_settings.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getPricingPlanByUserId = `-- name: GetPricingPlanByUserId :one
SELECT pricing_plan
FROM profile_settings
WHERE owner_uuid = $1
`

func (q *Queries) GetPricingPlanByUserId(ctx context.Context, userUuid pgtype.UUID) (PricingPlanType, error) {
	row := q.db.QueryRow(ctx, getPricingPlanByUserId, userUuid)
	var pricing_plan PricingPlanType
	err := row.Scan(&pricing_plan)
	return pricing_plan, err
}

const updatePricingPlanByUserId = `-- name: UpdatePricingPlanByUserId :one
UPDATE
    profile_settings
SET
    pricing_plan = $1,
    expiration_date = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE
    owner_uuid = $3
RETURNING uuid, pricing_plan, expiration_date, created_at, updated_at, owner_uuid
`

type UpdatePricingPlanByUserIdParams struct {
	PricingPlan    PricingPlanType  `json:"pricing_plan"`
	ExpirationDate pgtype.Timestamp `json:"expiration_date"`
	UsersUuid      pgtype.UUID      `json:"users_uuid"`
}

func (q *Queries) UpdatePricingPlanByUserId(ctx context.Context, arg UpdatePricingPlanByUserIdParams) (ProfileSetting, error) {
	row := q.db.QueryRow(ctx, updatePricingPlanByUserId, arg.PricingPlan, arg.ExpirationDate, arg.UsersUuid)
	var i ProfileSetting
	err := row.Scan(
		&i.Uuid,
		&i.PricingPlan,
		&i.ExpirationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerUuid,
	)
	return i, err
}
