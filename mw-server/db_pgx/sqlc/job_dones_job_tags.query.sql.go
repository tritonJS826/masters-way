// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_dones_job_tags.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobDonesJobTag = `-- name: CreateJobDonesJobTag :one
INSERT INTO job_dones_job_tags(
    job_done_uuid,
    job_tag_uuid
) VALUES (
    $1, $2
) RETURNING job_done_uuid, job_tag_uuid
`

type CreateJobDonesJobTagParams struct {
	JobDoneUuid pgtype.UUID `json:"job_done_uuid"`
	JobTagUuid  pgtype.UUID `json:"job_tag_uuid"`
}

func (q *Queries) CreateJobDonesJobTag(ctx context.Context, arg CreateJobDonesJobTagParams) (JobDonesJobTag, error) {
	row := q.db.QueryRow(ctx, createJobDonesJobTag, arg.JobDoneUuid, arg.JobTagUuid)
	var i JobDonesJobTag
	err := row.Scan(&i.JobDoneUuid, &i.JobTagUuid)
	return i, err
}

const deleteJobDonesJobTagByJobDoneId = `-- name: DeleteJobDonesJobTagByJobDoneId :exec
DELETE FROM job_dones_job_tags
WHERE job_done_uuid = $1
AND job_tag_uuid = $2
`

type DeleteJobDonesJobTagByJobDoneIdParams struct {
	JobDoneUuid pgtype.UUID `json:"job_done_uuid"`
	JobTagUuid  pgtype.UUID `json:"job_tag_uuid"`
}

func (q *Queries) DeleteJobDonesJobTagByJobDoneId(ctx context.Context, arg DeleteJobDonesJobTagByJobDoneIdParams) error {
	_, err := q.db.Exec(ctx, deleteJobDonesJobTagByJobDoneId, arg.JobDoneUuid, arg.JobTagUuid)
	return err
}

const getJobDonesByDayReportUuids = `-- name: GetJobDonesByDayReportUuids :many
SELECT
    job_dones.uuid, job_dones.created_at, job_dones.updated_at, job_dones.description, job_dones.time, job_dones.owner_uuid, job_dones.day_report_uuid,
    COALESCE(
    ARRAY(
        SELECT job_dones_job_tags.job_tag_uuid
        FROM job_dones_job_tags
        WHERE job_dones.uuid = job_dones_job_tags.job_done_uuid
    ),
    '{}'
)::VARCHAR[] AS tag_uuids
FROM job_dones WHERE job_dones.day_report_uuid = ANY($1::UUID[])
`

type GetJobDonesByDayReportUuidsRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) GetJobDonesByDayReportUuids(ctx context.Context, dayReportUuids []pgtype.UUID) ([]GetJobDonesByDayReportUuidsRow, error) {
	rows, err := q.db.Query(ctx, getJobDonesByDayReportUuids, dayReportUuids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetJobDonesByDayReportUuidsRow{}
	for rows.Next() {
		var i GetJobDonesByDayReportUuidsRow
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Time,
			&i.OwnerUuid,
			&i.DayReportUuid,
			&i.TagUuids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
