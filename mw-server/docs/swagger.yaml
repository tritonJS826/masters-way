basePath: /api
definitions:
  schemas.AddWayToCompositeWayPayload:
    properties:
      childWayUuid:
        type: string
      parentWayUuid:
        type: string
    required:
    - childWayUuid
    - parentWayUuid
    type: object
  schemas.CommentPopulatedResponse:
    properties:
      createdAt:
        type: string
      dayReportUuid:
        type: string
      description:
        type: string
      ownerName:
        type: string
      ownerUuid:
        type: string
      updatedAt:
        type: string
      uuid:
        type: string
    required:
    - createdAt
    - dayReportUuid
    - description
    - ownerName
    - ownerUuid
    - updatedAt
    - uuid
    type: object
  schemas.CompositeWayRelation:
    properties:
      childWayUuid:
        type: string
      parentWayUuid:
        type: string
    required:
    - childWayUuid
    - parentWayUuid
    type: object
  schemas.CreateCommentPayload:
    properties:
      dayReportUuid:
        type: string
      description:
        type: string
      ownerUuid:
        type: string
    required:
    - dayReportUuid
    - description
    - ownerUuid
    type: object
  schemas.CreateDayReportPayload:
    properties:
      isDayOff:
        type: boolean
      wayUuid:
        type: string
    required:
    - isDayOff
    - wayUuid
    type: object
  schemas.CreateFavoriteUserPayload:
    properties:
      acceptorUserUuid:
        type: string
      donorUserUuid:
        type: string
    required:
    - acceptorUserUuid
    - donorUserUuid
    type: object
  schemas.CreateFavoriteUserWayPayload:
    properties:
      userUuid:
        type: string
      wayUuid:
        type: string
    required:
    - userUuid
    - wayUuid
    type: object
  schemas.CreateFromUserMentoringRequestPayload:
    properties:
      userUuid:
        type: string
      wayUuid:
        type: string
    required:
    - userUuid
    - wayUuid
    type: object
  schemas.CreateJobDoneJobTagPayload:
    properties:
      jobDoneUuid:
        type: string
      jobTagUuid:
        type: string
    required:
    - jobDoneUuid
    - jobTagUuid
    type: object
  schemas.CreateJobDonePayload:
    properties:
      dayReportUuid:
        type: string
      description:
        type: string
      jobTagUuids:
        items:
          type: string
        type: array
      ownerUuid:
        type: string
      time:
        type: integer
    required:
    - dayReportUuid
    - description
    - jobTagUuids
    - ownerUuid
    - time
    type: object
  schemas.CreateJobTagPayload:
    properties:
      color:
        type: string
      description:
        type: string
      name:
        type: string
      wayUuid:
        type: string
    required:
    - color
    - description
    - name
    - wayUuid
    type: object
  schemas.CreateMentorUserWayPayload:
    properties:
      userUuid:
        type: string
      wayUuid:
        type: string
    required:
    - userUuid
    - wayUuid
    type: object
  schemas.CreateMetricPayload:
    properties:
      description:
        type: string
      doneDate:
        type: string
      estimationTime:
        type: integer
      isDone:
        type: boolean
      wayUuid:
        type: string
    required:
    - description
    - doneDate
    - estimationTime
    - isDone
    - wayUuid
    type: object
  schemas.CreatePlanJobTagPayload:
    properties:
      jobTagUuid:
        type: string
      planUuid:
        type: string
    required:
    - jobTagUuid
    - planUuid
    type: object
  schemas.CreatePlanPayload:
    properties:
      dayReportUuid:
        type: string
      description:
        type: string
      isDone:
        type: boolean
      ownerUuid:
        type: string
      time:
        type: integer
    required:
    - dayReportUuid
    - description
    - isDone
    - ownerUuid
    - time
    type: object
  schemas.CreateProblemJobTagPayload:
    properties:
      jobTagUuid:
        type: string
      problemUuid:
        type: string
    required:
    - jobTagUuid
    - problemUuid
    type: object
  schemas.CreateProblemPayload:
    properties:
      dayReportUuid:
        type: string
      description:
        type: string
      isDone:
        type: boolean
      ownerUuid:
        type: string
    required:
    - dayReportUuid
    - description
    - isDone
    - ownerUuid
    type: object
  schemas.CreateUserMentoringRequestPayload:
    properties:
      userUuid:
        type: string
      wayUuid:
        type: string
    required:
    - userUuid
    - wayUuid
    type: object
  schemas.CreateUserTagPayload:
    properties:
      name:
        type: string
      ownerUuid:
        type: string
    required:
    - name
    - ownerUuid
    type: object
  schemas.CreateWayCollectionPayload:
    properties:
      name:
        type: string
      ownerUuid:
        type: string
    required:
    - name
    - ownerUuid
    type: object
  schemas.CreateWayCollectionWay:
    properties:
      wayCollectionUuid:
        type: string
      wayUuid:
        type: string
    required:
    - wayCollectionUuid
    - wayUuid
    type: object
  schemas.CreateWayPayload:
    properties:
      copiedFromWayUuid:
        type: string
        x-nullable: true
      estimationTime:
        type: integer
      goalDescription:
        type: string
      isCompleted:
        type: boolean
      isPrivate:
        type: boolean
      name:
        type: string
      ownerUuid:
        type: string
    required:
    - copiedFromWayUuid
    - estimationTime
    - goalDescription
    - isCompleted
    - isPrivate
    - name
    - ownerUuid
    type: object
  schemas.CreateWayTagPayload:
    properties:
      name:
        type: string
      wayUuid:
        type: string
    required:
    - name
    - wayUuid
    type: object
  schemas.DayReportPopulatedResponse:
    properties:
      comments:
        items:
          $ref: '#/definitions/schemas.CommentPopulatedResponse'
        type: array
      createdAt:
        type: string
      isDayOff:
        type: boolean
      jobsDone:
        items:
          $ref: '#/definitions/schemas.JobDonePopulatedResponse'
        type: array
      plans:
        items:
          $ref: '#/definitions/schemas.PlanPopulatedResponse'
        type: array
      problems:
        items:
          $ref: '#/definitions/schemas.ProblemPopulatedResponse'
        type: array
      updatedAt:
        type: string
      uuid:
        type: string
    required:
    - comments
    - createdAt
    - isDayOff
    - jobsDone
    - plans
    - problems
    - updatedAt
    - uuid
    type: object
  schemas.DefaultWayCollections:
    properties:
      favorite:
        $ref: '#/definitions/schemas.WayCollectionPopulatedResponse'
      mentoring:
        $ref: '#/definitions/schemas.WayCollectionPopulatedResponse'
      own:
        $ref: '#/definitions/schemas.WayCollectionPopulatedResponse'
    required:
    - favorite
    - mentoring
    - own
    type: object
  schemas.DeleteMentorUserWayPayload:
    properties:
      userUuid:
        type: string
      wayUuid:
        type: string
    required:
    - userUuid
    - wayUuid
    type: object
  schemas.GenerateMetricsPayload:
    properties:
      goalDescription:
        type: string
      metrics:
        items:
          type: string
        type: array
      wayName:
        type: string
    required:
    - goalDescription
    - metrics
    - wayName
    type: object
  schemas.GetAllUsersResponse:
    properties:
      size:
        type: integer
      users:
        items:
          $ref: '#/definitions/schemas.UserPlainResponseWithInfo'
        type: array
    required:
    - size
    - users
    type: object
  schemas.GetAllWaysResponse:
    properties:
      size:
        type: integer
      ways:
        items:
          $ref: '#/definitions/schemas.WayPlainResponse'
        type: array
    required:
    - size
    - ways
    type: object
  schemas.JobDonePopulatedResponse:
    properties:
      createdAt:
        type: string
      dayReportUuid:
        type: string
      description:
        type: string
      ownerName:
        type: string
      ownerUuid:
        type: string
      tags:
        items:
          $ref: '#/definitions/schemas.JobTagResponse'
        type: array
      time:
        type: integer
      updatedAt:
        type: string
      uuid:
        type: string
    required:
    - createdAt
    - dayReportUuid
    - description
    - ownerName
    - ownerUuid
    - tags
    - time
    - updatedAt
    - uuid
    type: object
  schemas.JobTagResponse:
    properties:
      color:
        type: string
      description:
        type: string
      name:
        type: string
      uuid:
        type: string
    required:
    - color
    - description
    - name
    - uuid
    type: object
  schemas.MetricResponse:
    properties:
      description:
        type: string
      doneDate:
        type: string
        x-nullable: true
      estimationTime:
        type: integer
      isDone:
        type: boolean
      uuid:
        type: string
    required:
    - description
    - doneDate
    - estimationTime
    - isDone
    - uuid
    type: object
  schemas.PlanPopulatedResponse:
    properties:
      createdAt:
        type: string
      dayReportUuid:
        type: string
      description:
        type: string
      isDone:
        type: boolean
      ownerName:
        type: string
      ownerUuid:
        type: string
      tags:
        items:
          $ref: '#/definitions/schemas.JobTagResponse'
        type: array
      time:
        type: integer
      updatedAt:
        type: string
      uuid:
        type: string
    required:
    - createdAt
    - dayReportUuid
    - description
    - isDone
    - ownerName
    - ownerUuid
    - tags
    - time
    - updatedAt
    - uuid
    type: object
  schemas.ProblemPopulatedResponse:
    properties:
      createdAt:
        type: string
      dayReportUuid:
        type: string
      description:
        type: string
      isDone:
        type: boolean
      ownerName:
        type: string
      ownerUuid:
        type: string
      tags:
        items:
          $ref: '#/definitions/schemas.JobTagResponse'
        type: array
      updatedAt:
        type: string
      uuid:
        type: string
    required:
    - createdAt
    - dayReportUuid
    - description
    - isDone
    - ownerName
    - ownerUuid
    - tags
    - updatedAt
    - uuid
    type: object
  schemas.UpdateCommentPayload:
    properties:
      description:
        type: string
    type: object
  schemas.UpdateDayReportPayload:
    properties:
      isDayOff:
        type: boolean
    type: object
  schemas.UpdateJobDone:
    properties:
      description:
        type: string
      time:
        type: integer
    type: object
  schemas.UpdateJobTagPayload:
    properties:
      color:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  schemas.UpdateMetricPayload:
    properties:
      description:
        type: string
      estimationTime:
        type: integer
      isDone:
        type: boolean
    type: object
  schemas.UpdatePlanPayload:
    properties:
      description:
        type: string
      isDone:
        type: boolean
      time:
        type: integer
    type: object
  schemas.UpdateProblemPayload:
    properties:
      description:
        type: string
      isDone:
        type: boolean
    type: object
  schemas.UpdateUserPayload:
    properties:
      description:
        type: string
      imageUrl:
        type: string
      isMentor:
        type: boolean
      name:
        type: string
    type: object
  schemas.UpdateWayCollectionPayload:
    properties:
      name:
        type: string
    type: object
  schemas.UpdateWayPayload:
    properties:
      estimationTime:
        type: integer
      goalDescription:
        type: string
      isCompleted:
        type: boolean
      isPrivate:
        type: boolean
      name:
        type: string
    type: object
  schemas.UserPlainResponse:
    properties:
      createdAt:
        type: string
      description:
        type: string
      email:
        type: string
      imageUrl:
        type: string
      isMentor:
        type: boolean
      name:
        type: string
      uuid:
        type: string
    required:
    - createdAt
    - description
    - email
    - imageUrl
    - isMentor
    - name
    - uuid
    type: object
  schemas.UserPlainResponseWithInfo:
    properties:
      createdAt:
        type: string
      description:
        type: string
      email:
        type: string
      favoriteForUsers:
        type: integer
      favoriteWays:
        type: integer
      imageUrl:
        type: string
      isMentor:
        type: boolean
      mentoringWays:
        type: integer
      name:
        type: string
      ownWays:
        type: integer
      tags:
        items:
          $ref: '#/definitions/schemas.UserTagResponse'
        type: array
      uuid:
        type: string
    required:
    - createdAt
    - description
    - email
    - favoriteForUsers
    - favoriteWays
    - imageUrl
    - isMentor
    - mentoringWays
    - name
    - ownWays
    - tags
    - uuid
    type: object
  schemas.UserPopulatedResponse:
    properties:
      createdAt:
        type: string
      customWayCollections:
        items:
          $ref: '#/definitions/schemas.WayCollectionPopulatedResponse'
        type: array
      defaultWayCollections:
        $ref: '#/definitions/schemas.DefaultWayCollections'
      description:
        type: string
      email:
        type: string
      favoriteForUsers:
        items:
          type: string
        type: array
      favoriteUsers:
        items:
          $ref: '#/definitions/schemas.UserPlainResponse'
        type: array
      imageUrl:
        type: string
      isMentor:
        type: boolean
      name:
        type: string
      tags:
        items:
          $ref: '#/definitions/schemas.UserTagResponse'
        type: array
      uuid:
        type: string
      wayRequests:
        items:
          $ref: '#/definitions/schemas.WayPlainResponse'
        type: array
    required:
    - createdAt
    - customWayCollections
    - defaultWayCollections
    - description
    - email
    - favoriteForUsers
    - favoriteUsers
    - imageUrl
    - isMentor
    - name
    - tags
    - uuid
    - wayRequests
    type: object
  schemas.UserTagResponse:
    properties:
      name:
        type: string
      uuid:
        type: string
    required:
    - name
    - uuid
    type: object
  schemas.WayCollectionPlainResponse:
    properties:
      name:
        type: string
      uuid:
        type: string
    required:
    - name
    - uuid
    type: object
  schemas.WayCollectionPopulatedResponse:
    properties:
      createdAt:
        type: string
      name:
        type: string
      ownerUuid:
        type: string
      type:
        description: should be removed after separation custom collections and default
          pseudocollections
        type: string
      updatedAt:
        type: string
      uuid:
        type: string
      ways:
        items:
          $ref: '#/definitions/schemas.WayPlainResponse'
        type: array
    required:
    - createdAt
    - name
    - ownerUuid
    - type
    - updatedAt
    - uuid
    - ways
    type: object
  schemas.WayPlainResponse:
    properties:
      childrenUuids:
        items:
          type: string
        type: array
      copiedFromWayUuid:
        type: string
        x-nullable: true
      createdAt:
        type: string
      dayReportsAmount:
        type: integer
      estimationTime:
        type: integer
      favoriteForUsers:
        type: integer
      goalDescription:
        type: string
      isCompleted:
        type: boolean
      isPrivate:
        type: boolean
      mentors:
        items:
          $ref: '#/definitions/schemas.UserPlainResponse'
        type: array
      metricsDone:
        type: integer
      metricsTotal:
        type: integer
      name:
        type: string
      owner:
        $ref: '#/definitions/schemas.UserPlainResponse'
      updatedAt:
        type: string
      uuid:
        type: string
      wayTags:
        items:
          $ref: '#/definitions/schemas.WayTagResponse'
        type: array
    required:
    - childrenUuids
    - copiedFromWayUuid
    - createdAt
    - dayReportsAmount
    - estimationTime
    - favoriteForUsers
    - goalDescription
    - isCompleted
    - isPrivate
    - mentors
    - metricsDone
    - metricsTotal
    - name
    - owner
    - updatedAt
    - uuid
    - wayTags
    type: object
  schemas.WayPopulatedResponse:
    properties:
      children:
        items:
          $ref: '#/definitions/schemas.WayPopulatedResponse'
        type: array
      copiedFromWayUuid:
        type: string
        x-nullable: true
      createdAt:
        type: string
      dayReports:
        items:
          $ref: '#/definitions/schemas.DayReportPopulatedResponse'
        type: array
      estimationTime:
        type: integer
      favoriteForUsersAmount:
        type: integer
      formerMentors:
        items:
          $ref: '#/definitions/schemas.UserPlainResponse'
        type: array
      goalDescription:
        type: string
      isCompleted:
        type: boolean
      isPrivate:
        type: boolean
      jobTags:
        items:
          $ref: '#/definitions/schemas.JobTagResponse'
        type: array
      mentorRequests:
        items:
          $ref: '#/definitions/schemas.UserPlainResponse'
        type: array
      mentors:
        items:
          $ref: '#/definitions/schemas.UserPlainResponse'
        type: array
      metrics:
        items:
          $ref: '#/definitions/schemas.MetricResponse'
        type: array
      name:
        type: string
      owner:
        $ref: '#/definitions/schemas.UserPlainResponse'
      updatedAt:
        type: string
      uuid:
        type: string
      wayTags:
        items:
          $ref: '#/definitions/schemas.WayTagResponse'
        type: array
    required:
    - children
    - copiedFromWayUuid
    - createdAt
    - dayReports
    - estimationTime
    - favoriteForUsersAmount
    - formerMentors
    - goalDescription
    - isCompleted
    - isPrivate
    - jobTags
    - mentorRequests
    - mentors
    - metrics
    - name
    - owner
    - updatedAt
    - uuid
    - wayTags
    type: object
  schemas.WayTagResponse:
    properties:
      name:
        type: string
      uuid:
        type: string
    required:
    - name
    - uuid
    type: object
  util.ResponseStatusString:
    properties:
      status:
        type: string
    required:
    - status
    type: object
info:
  contact: {}
  title: Masters way API
  version: "1.0"
paths:
  /auth/{provider}:
    get:
      consumes:
      - application/json
      operationId: begin-auth
      parameters:
      - description: google
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
      summary: Begin oauth
      tags:
      - auth
  /auth/{provider}/callback:
    post:
      consumes:
      - application/json
      operationId: google auth log in callback function
      parameters:
      - description: state parameter
        in: query
        name: state
        required: true
        type: string
      - description: google
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Log in with google oAuth
      tags:
      - auth
  /auth/current:
    get:
      consumes:
      - application/json
      operationId: get-current-authorized-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserPopulatedResponse'
      summary: Get current authorized user
      tags:
      - auth
  /auth/login/local/{userEmail}:
    get:
      consumes:
      - application/json
      description: Login locally by providing an email address.
      operationId: get token locally
      parameters:
      - description: email
        in: path
        name: userEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "304":
          description: redirect
      summary: login locally by email (with no oauth)
      tags:
      - auth
  /auth/logout/{provider}:
    get:
      consumes:
      - application/json
      operationId: logout-current-authorized-user
      parameters:
      - description: google
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseStatusString'
      summary: Logout current authorized user
      tags:
      - auth
  /comments:
    post:
      consumes:
      - application/json
      operationId: create-comment
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateCommentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CommentPopulatedResponse'
      summary: Create a new comment
      tags:
      - comment
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      operationId: delete-comment
      parameters:
      - description: comment ID
        in: path
        name: commentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete comment by UUID
      tags:
      - comment
    patch:
      consumes:
      - application/json
      operationId: update-comment
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateCommentPayload'
      - description: comment ID
        in: path
        name: commentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CommentPopulatedResponse'
      summary: Update comment by UUID
      tags:
      - comment
  /compositeWay:
    post:
      consumes:
      - application/json
      operationId: create-compositeWay
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.AddWayToCompositeWayPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CompositeWayRelation'
      summary: Add a way to composite way
      tags:
      - compositeWay
  /compositeWay/{parentWayId}/{childWayId}:
    delete:
      consumes:
      - application/json
      operationId: delete-compositeWay relation
      parameters:
      - description: parentWay ID
        in: path
        name: parentWayId
        required: true
        type: string
      - description: childWay ID
        in: path
        name: childWayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete composite way relation
      tags:
      - compositeWay
  /dayReports:
    post:
      consumes:
      - application/json
      operationId: create-dayReport
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateDayReportPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.DayReportPopulatedResponse'
      summary: Create a new dayReport
      tags:
      - dayReport
  /dayReports/{dayReportId}:
    patch:
      consumes:
      - application/json
      operationId: update-dayReport
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateDayReportPayload'
      - description: dayReport ID
        in: path
        name: dayReportId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.DayReportPopulatedResponse'
      summary: Update dayReport by UUID
      tags:
      - dayReport
  /dayReports/{wayId}:
    get:
      consumes:
      - application/json
      operationId: get-dayReports-by-Way-uuid
      parameters:
      - description: way ID
        in: path
        name: wayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.DayReportPopulatedResponse'
            type: array
      summary: Get all dayReports by Way UUID
      tags:
      - dayReport
  /favoriteUserWays:
    post:
      consumes:
      - application/json
      operationId: create-favoriteUserWay
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateFavoriteUserWayPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new favoriteUserWay
      tags:
      - favoriteUserWay
  /favoriteUserWays/{userUuid}/{wayUuid}:
    delete:
      consumes:
      - application/json
      operationId: delete-favoriteUserWay
      parameters:
      - description: user UUID
        in: path
        name: userUuid
        required: true
        type: string
      - description: way ID
        in: path
        name: wayUuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete favoriteUserWay by UUID
      tags:
      - favoriteUserWay
  /favoriteUsers:
    post:
      consumes:
      - application/json
      operationId: create-favoriteUser
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateFavoriteUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new favorite user
      tags:
      - favoriteUser
  /favoriteUsers/{donorUserUuid}/{acceptorUserUuid}:
    delete:
      consumes:
      - application/json
      operationId: delete-favoriteUser
      parameters:
      - description: donorUser UUID
        in: path
        name: donorUserUuid
        required: true
        type: string
      - description: acceptorUser UUID
        in: path
        name: acceptorUserUuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete favoriteUser by UUID
      tags:
      - favoriteUser
  /fromUserMentoringRequests:
    post:
      consumes:
      - application/json
      operationId: create-fromUserMentoringRequest
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateFromUserMentoringRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new fromUserMentoringRequest
      tags:
      - fromUserMentoringRequest
  /fromUserMentoringRequests/{userUuid}/{wayUuid}:
    delete:
      consumes:
      - application/json
      operationId: delete-fromUserMentoringRequest
      parameters:
      - description: user UUID
        in: path
        name: userUuid
        required: true
        type: string
      - description: way UUID
        in: path
        name: wayUuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete fromUserMentoringRequest by UUID
      tags:
      - fromUserMentoringRequest
  /gemini/metrics:
    post:
      consumes:
      - application/json
      description: This endpoint uses Gemini to generate metrics by analyzing the
        provided goals.
      operationId: generate-metrics
      parameters:
      - description: Request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.GenerateMetricsPayload'
      produces:
      - application/json
      responses:
        "200":
          description: List of generated metrics
          schema:
            items:
              type: string
            type: array
      summary: Generate metrics using Gemini
      tags:
      - gemini
  /jobDoneJobTags:
    post:
      consumes:
      - application/json
      operationId: create-jobDoneJobTag
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateJobDoneJobTagPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new jobDoneJobTag
      tags:
      - jobDoneJobTag
  /jobDoneJobTags/{jobTagId}/{jobDoneId}:
    delete:
      consumes:
      - application/json
      operationId: delete-jobDoneJobTag
      parameters:
      - description: jobDone ID
        in: path
        name: jobDoneId
        required: true
        type: string
      - description: jobTag UUID
        in: path
        name: jobTagId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete jobDoneJobTag by UUID
      tags:
      - jobDoneJobTag
  /jobDones:
    post:
      consumes:
      - application/json
      operationId: create-jobDone
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateJobDonePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JobDonePopulatedResponse'
      summary: Create a new jobDone
      tags:
      - jobDone
  /jobDones/{jobDoneId}:
    delete:
      consumes:
      - application/json
      operationId: delete-jobDone
      parameters:
      - description: jobDone ID
        in: path
        name: jobDoneId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete jobDone by UUID
      tags:
      - jobDone
    patch:
      consumes:
      - application/json
      operationId: update-jobDone
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateJobDone'
      - description: jobDone UUID
        in: path
        name: jobDoneId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JobDonePopulatedResponse'
      summary: Update jobDone by UUID
      tags:
      - jobDone
  /jobTags:
    post:
      consumes:
      - application/json
      operationId: create-jobTag
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateJobTagPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JobTagResponse'
      summary: Create a new jobTag
      tags:
      - jobTag
  /jobTags/{jobTagId}:
    delete:
      consumes:
      - application/json
      operationId: delete-jobTag
      parameters:
      - description: jobTag ID
        in: path
        name: jobTagId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete jobTag by UUID
      tags:
      - jobTag
    patch:
      consumes:
      - application/json
      operationId: update-jobTag
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateJobTagPayload'
      - description: jobTag UUID
        in: path
        name: jobTagId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JobTagResponse'
      summary: Update jobTag by UUID
      tags:
      - jobTag
  /mentorUserWays:
    delete:
      consumes:
      - application/json
      operationId: delete-mentorUserWay
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.DeleteMentorUserWayPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete mentorUserWay by UUID
      tags:
      - mentorUserWay
    post:
      consumes:
      - application/json
      description: Make user mentor and also added to appropriate mentoring collection
      operationId: create-mentorUserWay
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateMentorUserWayPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new mentorUserWay
      tags:
      - mentorUserWay
  /metrics:
    post:
      consumes:
      - application/json
      operationId: create-metric
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateMetricPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.MetricResponse'
      summary: Create a new metric
      tags:
      - metric
  /metrics/{metricId}:
    delete:
      consumes:
      - application/json
      operationId: delete-metric
      parameters:
      - description: metric ID
        in: path
        name: metricId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete metric by UUID
      tags:
      - metric
    patch:
      consumes:
      - application/json
      operationId: update-metric
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateMetricPayload'
      - description: metric UUID
        in: path
        name: metricId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.MetricResponse'
      summary: Update metric by UUID
      tags:
      - metric
  /planJobTags:
    post:
      consumes:
      - application/json
      operationId: create-planJobTag
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreatePlanJobTagPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new planJobTag
      tags:
      - planJobTag
  /planJobTags/{jobTagId}/{planId}:
    delete:
      consumes:
      - application/json
      operationId: delete-planJobTag
      parameters:
      - description: jobTag ID
        in: path
        name: jobTagId
        required: true
        type: string
      - description: plan ID
        in: path
        name: planId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete planJobTag by UUID
      tags:
      - planJobTag
  /plans:
    post:
      consumes:
      - application/json
      operationId: create-plan
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreatePlanPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PlanPopulatedResponse'
      summary: Create a new plan
      tags:
      - plan
  /plans/{planId}:
    delete:
      consumes:
      - application/json
      operationId: delete-plan
      parameters:
      - description: plan ID
        in: path
        name: planId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete plan by UUID
      tags:
      - plan
    patch:
      consumes:
      - application/json
      operationId: update-plan
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdatePlanPayload'
      - description: plan UUID
        in: path
        name: planId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PlanPopulatedResponse'
      summary: Update plan by UUID
      tags:
      - plan
  /problemJobTags:
    post:
      consumes:
      - application/json
      operationId: create-problemJobTag
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateProblemJobTagPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new problemJobTag
      tags:
      - problemJobTag
  /problemJobTags/{jobTagId}/{problemId}:
    delete:
      consumes:
      - application/json
      operationId: delete-problemJobTag
      parameters:
      - description: problem ID
        in: path
        name: problemId
        required: true
        type: string
      - description: jobTag ID
        in: path
        name: jobTagId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete problemJobTag by UUID
      tags:
      - problemJobTag
  /problems:
    post:
      consumes:
      - application/json
      operationId: create-problem
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateProblemPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ProblemPopulatedResponse'
      summary: Create a new problem
      tags:
      - problem
  /problems/{problemId}:
    delete:
      consumes:
      - application/json
      operationId: delete-problem
      parameters:
      - description: problem ID
        in: path
        name: problemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete problem by UUID
      tags:
      - problem
    patch:
      consumes:
      - application/json
      operationId: update-problem
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateProblemPayload'
      - description: problem ID
        in: path
        name: problemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ProblemPopulatedResponse'
      summary: Update problem by UUID
      tags:
      - problem
  /reset-db:
    post:
      description: resets db
      responses:
        "200":
          description: OK
      summary: resets db
      tags:
      - dev
  /toUserMentoringRequests:
    post:
      consumes:
      - application/json
      operationId: create-userMentoringRequest
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateUserMentoringRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new userMentoringRequest
      tags:
      - toUserMentoringRequest
  /toUserMentoringRequests/{userUuid}/{wayUuid}:
    delete:
      consumes:
      - application/json
      operationId: delete-toUserMentoringRequest
      parameters:
      - description: user UUID
        in: path
        name: userUuid
        required: true
        type: string
      - description: way UUID
        in: path
        name: wayUuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete toUserMentoringReques by UUID
      tags:
      - toUserMentoringRequest
  /userTags:
    post:
      consumes:
      - application/json
      operationId: create-userTag
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateUserTagPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserTagResponse'
      summary: Create a new userTag
      tags:
      - userTag
  /userTags/{userTagId}/{userId}:
    delete:
      consumes:
      - application/json
      operationId: delete-userTag
      parameters:
      - description: userTag ID
        in: path
        name: userTagId
        required: true
        type: string
      - description: user ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete userTag by UUID
      tags:
      - userTag
  /users:
    get:
      consumes:
      - application/json
      description: Get users with pagination
      operationId: get-all-users
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Part of user email for filters
        in: query
        name: email
        type: string
      - description: Part of user name for filters
        in: query
        name: name
        type: string
      - description: '''mentor'' | ''all'' status for filter'
        in: query
        name: mentorStatus
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GetAllUsersResponse'
      summary: Get all users
      tags:
      - user
  /users/{userId}:
    get:
      consumes:
      - application/json
      operationId: get-user-by-uuid
      parameters:
      - description: user ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserPopulatedResponse'
      summary: Get user by UUID
      tags:
      - user
    patch:
      consumes:
      - application/json
      operationId: update-user
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateUserPayload'
      - description: user ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserPlainResponse'
      summary: Update user by UUID
      tags:
      - user
  /wayCollectionWays:
    post:
      consumes:
      - application/json
      operationId: create-wayCollectionWay
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateWayCollectionWay'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new wayCollectionWay
      tags:
      - wayCollectionWay
  /wayCollectionWays/{wayId}/{wayCollectionId}:
    delete:
      consumes:
      - application/json
      operationId: delete-wayCollectionWay
      parameters:
      - description: wayCollection ID
        in: path
        name: wayCollectionId
        required: true
        type: string
      - description: way ID
        in: path
        name: wayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete wayCollectionWay by UUID
      tags:
      - wayCollectionWay
  /wayCollections:
    post:
      consumes:
      - application/json
      operationId: create-wayCollection
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateWayCollectionPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.WayCollectionPopulatedResponse'
      summary: Create a new wayCollection
      tags:
      - wayCollection
  /wayCollections/{wayCollectionId}:
    delete:
      consumes:
      - application/json
      operationId: delete-wayCollection
      parameters:
      - description: wayCollection ID
        in: path
        name: wayCollectionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete wayCollection by UUID
      tags:
      - wayCollection
    patch:
      consumes:
      - application/json
      operationId: update-wayCollection
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateWayCollectionPayload'
      - description: wayCollection ID
        in: path
        name: wayCollectionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.WayCollectionPlainResponse'
      summary: Update wayCollection by UUID
      tags:
      - wayCollection
  /wayTags:
    post:
      consumes:
      - application/json
      operationId: create-wayTag
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateWayTagPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.WayTagResponse'
      summary: Create a new wayTag
      tags:
      - wayTag
  /wayTags/{wayTagId}/{wayId}:
    delete:
      consumes:
      - application/json
      operationId: delete-wayTag
      parameters:
      - description: wayTag ID
        in: path
        name: wayTagId
        required: true
        type: string
      - description: way ID
        in: path
        name: wayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete wayTag by UUID
      tags:
      - wayTag
  /ways:
    get:
      consumes:
      - application/json
      description: Get ways with pagination
      operationId: get-all-ways
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: 'Ways type: all | completed | inProgress | abandoned'
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GetAllWaysResponse'
      summary: Get all ways
      tags:
      - way
    post:
      consumes:
      - application/json
      operationId: create-way
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateWayPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.WayPlainResponse'
      summary: Create a new way
      tags:
      - way
  /ways/{wayId}:
    delete:
      consumes:
      - application/json
      operationId: delete-way
      parameters:
      - description: way ID
        in: path
        name: wayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete way by UUID
      tags:
      - way
    get:
      consumes:
      - application/json
      operationId: get-way-by-uuid
      parameters:
      - description: way ID
        in: path
        name: wayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.WayPopulatedResponse'
      summary: Get way by UUID
      tags:
      - way
    patch:
      consumes:
      - application/json
      operationId: update-way
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateWayPayload'
      - description: way ID
        in: path
        name: wayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.WayPlainResponse'
      summary: Update way by UUID
      tags:
      - way
swagger: "2.0"
