// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: plans.query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPlan = `-- name: CreatePlan :one
INSERT INTO plans(
    created_at,
    updated_at,
    description,
    time,
    owner_uuid,
    is_done,
    day_report_uuid
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING uuid, created_at, updated_at, description, time, owner_uuid, is_done, day_report_uuid,
    (SELECT name FROM users WHERE uuid = $5) AS owner_name,
    -- get tag uuids
    ARRAY(
        SELECT plans_job_tags.job_tag_uuid 
        FROM plans_job_tags 
        WHERE plans.uuid = plans_job_tags.plan_uuid
    )::VARCHAR[] AS tag_uuids
`

type CreatePlanParams struct {
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	Description   string    `json:"description"`
	Time          int32     `json:"time"`
	OwnerUuid     uuid.UUID `json:"owner_uuid"`
	IsDone        bool      `json:"is_done"`
	DayReportUuid uuid.UUID `json:"day_report_uuid"`
}

type CreatePlanRow struct {
	Uuid          uuid.UUID `json:"uuid"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	Description   string    `json:"description"`
	Time          int32     `json:"time"`
	OwnerUuid     uuid.UUID `json:"owner_uuid"`
	IsDone        bool      `json:"is_done"`
	DayReportUuid uuid.UUID `json:"day_report_uuid"`
	OwnerName     string    `json:"owner_name"`
	TagUuids      []string  `json:"tag_uuids"`
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (CreatePlanRow, error) {
	row := q.queryRow(ctx, q.createPlanStmt, createPlan,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Description,
		arg.Time,
		arg.OwnerUuid,
		arg.IsDone,
		arg.DayReportUuid,
	)
	var i CreatePlanRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Time,
		&i.OwnerUuid,
		&i.IsDone,
		&i.DayReportUuid,
		&i.OwnerName,
		pq.Array(&i.TagUuids),
	)
	return i, err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM plans
WHERE uuid = $1
`

func (q *Queries) DeletePlan(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deletePlanStmt, deletePlan, argUuid)
	return err
}

const getListPlansByDayReportId = `-- name: GetListPlansByDayReportId :many
SELECT uuid, created_at, updated_at, description, time, owner_uuid, is_done, day_report_uuid FROM plans
WHERE plans.day_report_uuid = $1
ORDER BY created_at
`

func (q *Queries) GetListPlansByDayReportId(ctx context.Context, dayReportUuid uuid.UUID) ([]Plan, error) {
	rows, err := q.query(ctx, q.getListPlansByDayReportIdStmt, getListPlansByDayReportId, dayReportUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Plan{}
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Time,
			&i.OwnerUuid,
			&i.IsDone,
			&i.DayReportUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlan = `-- name: UpdatePlan :one
UPDATE plans
SET
updated_at = coalesce($1, updated_at),
description = coalesce($2, description),
time = coalesce($3, time),
is_done = coalesce($4, is_done)
WHERE uuid = $5
RETURNING uuid, created_at, updated_at, description, time, owner_uuid, is_done, day_report_uuid
`

type UpdatePlanParams struct {
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	Description sql.NullString `json:"description"`
	Time        sql.NullInt32  `json:"time"`
	IsDone      sql.NullBool   `json:"is_done"`
	Uuid        uuid.UUID      `json:"uuid"`
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) (Plan, error) {
	row := q.queryRow(ctx, q.updatePlanStmt, updatePlan,
		arg.UpdatedAt,
		arg.Description,
		arg.Time,
		arg.IsDone,
		arg.Uuid,
	)
	var i Plan
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Time,
		&i.OwnerUuid,
		&i.IsDone,
		&i.DayReportUuid,
	)
	return i, err
}
