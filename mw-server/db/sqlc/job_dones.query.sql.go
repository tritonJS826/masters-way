// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_dones.query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createJobDone = `-- name: CreateJobDone :one



SELECT uuid, created_at, updated_at, description, time, owner_uuid, day_report_uuid FROM job_dones
WHERE job_dones.day_report_uuid = $1
ORDER BY created_at
`

// INSERT INTO job_dones(
//
//	created_at,
func (q *Queries) CreateJobDone(ctx context.Context, dayReportUuid uuid.UUID) (JobDone, error) {
	row := q.queryRow(ctx, q.createJobDoneStmt, createJobDone, dayReportUuid)
	var i JobDone
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Time,
		&i.OwnerUuid,
		&i.DayReportUuid,
	)
	return i, err
}

const deleteJobDone = `-- name: DeleteJobDone :exec
DELETE FROM job_dones
WHERE uuid = $1
`

func (q *Queries) DeleteJobDone(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteJobDoneStmt, deleteJobDone, argUuid)
	return err
}

const updateJobDone = `-- name: UpdateJobDone :one
UPDATE job_dones
SET
updated_at = coalesce($1, updated_at),
description = coalesce($2, description),
time = coalesce($3, time)
WHERE job_dones.uuid = $4
RETURNING uuid, created_at, updated_at, description, time, owner_uuid, day_report_uuid,
    (SELECT name FROM users WHERE job_dones.owner_uuid = users.uuid) AS owner_name,
    -- get tag uuids
    COALESCE(
        ARRAY(
            SELECT job_dones_job_tags.job_tag_uuid
            FROM job_dones_job_tags
            WHERE job_dones.uuid = job_dones_job_tags.job_done_uuid
        ),
    '{}'
    )::VARCHAR[] AS tag_uuids
`

type UpdateJobDoneParams struct {
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	Description sql.NullString `json:"description"`
	Time        sql.NullInt32  `json:"time"`
	Uuid        uuid.UUID      `json:"uuid"`
}

type UpdateJobDoneRow struct {
	Uuid          uuid.UUID `json:"uuid"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	Description   string    `json:"description"`
	Time          int32     `json:"time"`
	OwnerUuid     uuid.UUID `json:"owner_uuid"`
	DayReportUuid uuid.UUID `json:"day_report_uuid"`
	OwnerName     string    `json:"owner_name"`
	TagUuids      []string  `json:"tag_uuids"`
}

func (q *Queries) UpdateJobDone(ctx context.Context, arg UpdateJobDoneParams) (UpdateJobDoneRow, error) {
	row := q.queryRow(ctx, q.updateJobDoneStmt, updateJobDone,
		arg.UpdatedAt,
		arg.Description,
		arg.Time,
		arg.Uuid,
	)
	var i UpdateJobDoneRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Time,
		&i.OwnerUuid,
		&i.DayReportUuid,
		&i.OwnerName,
		pq.Array(&i.TagUuids),
	)
	return i, err
}
