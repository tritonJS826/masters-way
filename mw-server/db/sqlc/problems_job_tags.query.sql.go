// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: problems_job_tags.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProblemsJobTag = `-- name: CreateProblemsJobTag :one
INSERT INTO problems_job_tags(
    problem_uuid,
    job_tag_uuid
) VALUES (
    $1,
    $2
) RETURNING problem_uuid, job_tag_uuid
`

type CreateProblemsJobTagParams struct {
	ProblemUuid pgtype.UUID `json:"problem_uuid"`
	JobTagUuid  pgtype.UUID `json:"job_tag_uuid"`
}

func (q *Queries) CreateProblemsJobTag(ctx context.Context, arg CreateProblemsJobTagParams) (ProblemsJobTag, error) {
	row := q.db.QueryRow(ctx, createProblemsJobTag, arg.ProblemUuid, arg.JobTagUuid)
	var i ProblemsJobTag
	err := row.Scan(&i.ProblemUuid, &i.JobTagUuid)
	return i, err
}

const deleteProblemsJobTagByIds = `-- name: DeleteProblemsJobTagByIds :exec
DELETE FROM problems_job_tags
WHERE problem_uuid = $1  AND job_tag_uuid = $2
`

type DeleteProblemsJobTagByIdsParams struct {
	ProblemUuid pgtype.UUID `json:"problem_uuid"`
	JobTagUuid  pgtype.UUID `json:"job_tag_uuid"`
}

func (q *Queries) DeleteProblemsJobTagByIds(ctx context.Context, arg DeleteProblemsJobTagByIdsParams) error {
	_, err := q.db.Exec(ctx, deleteProblemsJobTagByIds, arg.ProblemUuid, arg.JobTagUuid)
	return err
}

const getProblemsByDayReportUuids = `-- name: GetProblemsByDayReportUuids :many
SELECT
    uuid, created_at, updated_at, description, is_done, owner_uuid, day_report_uuid,
    COALESCE(
    ARRAY(
            SELECT problems_job_tags.job_tag_uuid
            FROM problems_job_tags
            WHERE problems.uuid = problems_job_tags.job_tag_uuid
        ),
        '{}'
    )::VARCHAR[] AS tag_uuids
FROM problems
WHERE problems.day_report_uuid = ANY($1::UUID[])
`

type GetProblemsByDayReportUuidsRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	IsDone        bool             `json:"is_done"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) GetProblemsByDayReportUuids(ctx context.Context, dayReportUuids []pgtype.UUID) ([]GetProblemsByDayReportUuidsRow, error) {
	rows, err := q.db.Query(ctx, getProblemsByDayReportUuids, dayReportUuids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProblemsByDayReportUuidsRow{}
	for rows.Next() {
		var i GetProblemsByDayReportUuidsRow
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.IsDone,
			&i.OwnerUuid,
			&i.DayReportUuid,
			&i.TagUuids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
