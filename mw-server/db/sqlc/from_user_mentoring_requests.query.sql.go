// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: from_user_mentoring_requests.query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFromUserMentoringRequest = `-- name: CreateFromUserMentoringRequest :one
INSERT INTO from_user_mentoring_requests(
    user_uuid,
    way_uuid
) VALUES (
    $1, $2
) RETURNING user_uuid, way_uuid
`

type CreateFromUserMentoringRequestParams struct {
	UserUuid uuid.UUID `json:"user_uuid"`
	WayUuid  uuid.UUID `json:"way_uuid"`
}

func (q *Queries) CreateFromUserMentoringRequest(ctx context.Context, arg CreateFromUserMentoringRequestParams) (FromUserMentoringRequest, error) {
	row := q.queryRow(ctx, q.createFromUserMentoringRequestStmt, createFromUserMentoringRequest, arg.UserUuid, arg.WayUuid)
	var i FromUserMentoringRequest
	err := row.Scan(&i.UserUuid, &i.WayUuid)
	return i, err
}

const deleteFromUserMentoringRequestByIds = `-- name: DeleteFromUserMentoringRequestByIds :exec
DELETE FROM from_user_mentoring_requests
WHERE user_uuid = $1 AND way_uuid = $2
`

type DeleteFromUserMentoringRequestByIdsParams struct {
	UserUuid uuid.UUID `json:"user_uuid"`
	WayUuid  uuid.UUID `json:"way_uuid"`
}

func (q *Queries) DeleteFromUserMentoringRequestByIds(ctx context.Context, arg DeleteFromUserMentoringRequestByIdsParams) error {
	_, err := q.exec(ctx, q.deleteFromUserMentoringRequestByIdsStmt, deleteFromUserMentoringRequestByIds, arg.UserUuid, arg.WayUuid)
	return err
}

const getFromUserMentoringRequestWaysByUserId = `-- name: GetFromUserMentoringRequestWaysByUserId :many
SELECT 
    ways.uuid,
    ways.name,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.owner_uuid,
    ways.copied_from_way_uuid,
    ways.status,
    ways.is_private
FROM from_user_mentoring_requests
JOIN ways 
    ON $1 = from_user_mentoring_requests.user_uuid 
    AND from_user_mentoring_requests.way_uuid = ways.uuid
`

func (q *Queries) GetFromUserMentoringRequestWaysByUserId(ctx context.Context, userUuid uuid.UUID) ([]Way, error) {
	rows, err := q.query(ctx, q.getFromUserMentoringRequestWaysByUserIdStmt, getFromUserMentoringRequestWaysByUserId, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Way{}
	for rows.Next() {
		var i Way
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.OwnerUuid,
			&i.CopiedFromWayUuid,
			&i.Status,
			&i.IsPrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
