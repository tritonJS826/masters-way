// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ways.query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createWay = `-- name: CreateWay :one
INSERT INTO ways(
    name,
    goal_description,
    updated_at,
    created_at,
    estimation_time,
    copied_from_way_uuid,
    is_private,
    status,
    owner_uuid
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING uuid, name, goal_description, updated_at, created_at, estimation_time, owner_uuid, copied_from_way_uuid, status, is_private
`

type CreateWayParams struct {
	Name              string        `json:"name"`
	GoalDescription   string        `json:"goal_description"`
	UpdatedAt         time.Time     `json:"updated_at"`
	CreatedAt         time.Time     `json:"created_at"`
	EstimationTime    int32         `json:"estimation_time"`
	CopiedFromWayUuid uuid.NullUUID `json:"copied_from_way_uuid"`
	IsPrivate         bool          `json:"is_private"`
	Status            string        `json:"status"`
	OwnerUuid         uuid.UUID     `json:"owner_uuid"`
}

func (q *Queries) CreateWay(ctx context.Context, arg CreateWayParams) (Way, error) {
	row := q.queryRow(ctx, q.createWayStmt, createWay,
		arg.Name,
		arg.GoalDescription,
		arg.UpdatedAt,
		arg.CreatedAt,
		arg.EstimationTime,
		arg.CopiedFromWayUuid,
		arg.IsPrivate,
		arg.Status,
		arg.OwnerUuid,
	)
	var i Way
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.OwnerUuid,
		&i.CopiedFromWayUuid,
		&i.Status,
		&i.IsPrivate,
	)
	return i, err
}

const deleteWay = `-- name: DeleteWay :exec
DELETE FROM ways
WHERE uuid = $1
`

func (q *Queries) DeleteWay(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteWayStmt, deleteWay, argUuid)
	return err
}

const getWayById = `-- name: GetWayById :one
SELECT 
    ways.uuid,
    ways.name,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.status,
    ways.is_private,
    users.uuid AS owner_uuid,
    users.name AS owner_name,
    users.email AS owner_email,
    users.description AS owner_description,
    users.created_at AS owner_created_at,
    users.image_url AS owner_image_url,
    users.is_mentor AS owner_is_mentor
FROM ways
JOIN users ON users.uuid = ways.owner_uuid
WHERE ways.uuid = $1
LIMIT 1
`

type GetWayByIdRow struct {
	Uuid              uuid.UUID      `json:"uuid"`
	Name              string         `json:"name"`
	GoalDescription   string         `json:"goal_description"`
	UpdatedAt         time.Time      `json:"updated_at"`
	CreatedAt         time.Time      `json:"created_at"`
	EstimationTime    int32          `json:"estimation_time"`
	CopiedFromWayUuid uuid.NullUUID  `json:"copied_from_way_uuid"`
	Status            string         `json:"status"`
	IsPrivate         bool           `json:"is_private"`
	OwnerUuid         uuid.UUID      `json:"owner_uuid"`
	OwnerName         string         `json:"owner_name"`
	OwnerEmail        string         `json:"owner_email"`
	OwnerDescription  string         `json:"owner_description"`
	OwnerCreatedAt    time.Time      `json:"owner_created_at"`
	OwnerImageUrl     sql.NullString `json:"owner_image_url"`
	OwnerIsMentor     bool           `json:"owner_is_mentor"`
}

func (q *Queries) GetWayById(ctx context.Context, argUuid uuid.UUID) (GetWayByIdRow, error) {
	row := q.queryRow(ctx, q.getWayByIdStmt, getWayById, argUuid)
	var i GetWayByIdRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.CopiedFromWayUuid,
		&i.Status,
		&i.IsPrivate,
		&i.OwnerUuid,
		&i.OwnerName,
		&i.OwnerEmail,
		&i.OwnerDescription,
		&i.OwnerCreatedAt,
		&i.OwnerImageUrl,
		&i.OwnerIsMentor,
	)
	return i, err
}

const listWays = `-- name: ListWays :many
SELECT uuid, name, goal_description, updated_at, created_at, estimation_time, owner_uuid, copied_from_way_uuid, status, is_private FROM ways
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListWaysParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// TODO: add filter and sorters
func (q *Queries) ListWays(ctx context.Context, arg ListWaysParams) ([]Way, error) {
	rows, err := q.query(ctx, q.listWaysStmt, listWays, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Way{}
	for rows.Next() {
		var i Way
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.OwnerUuid,
			&i.CopiedFromWayUuid,
			&i.Status,
			&i.IsPrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWay = `-- name: UpdateWay :one
UPDATE ways
SET
name = coalesce($1, name),
goal_description = coalesce($2, goal_description),
updated_at = coalesce($3, updated_at),
estimation_time = coalesce($4, estimation_time),
is_private = coalesce($5, is_private),
status = coalesce($6, status)

WHERE uuid = $7
RETURNING uuid, name, goal_description, updated_at, created_at, estimation_time, owner_uuid, copied_from_way_uuid, status, is_private
`

type UpdateWayParams struct {
	Name            sql.NullString `json:"name"`
	GoalDescription sql.NullString `json:"goal_description"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	EstimationTime  sql.NullInt32  `json:"estimation_time"`
	IsPrivate       sql.NullBool   `json:"is_private"`
	Status          sql.NullString `json:"status"`
	Uuid            uuid.UUID      `json:"uuid"`
}

func (q *Queries) UpdateWay(ctx context.Context, arg UpdateWayParams) (Way, error) {
	row := q.queryRow(ctx, q.updateWayStmt, updateWay,
		arg.Name,
		arg.GoalDescription,
		arg.UpdatedAt,
		arg.EstimationTime,
		arg.IsPrivate,
		arg.Status,
		arg.Uuid,
	)
	var i Way
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.OwnerUuid,
		&i.CopiedFromWayUuid,
		&i.Status,
		&i.IsPrivate,
	)
	return i, err
}
