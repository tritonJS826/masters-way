// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ways.query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const countWaysByType = `-- name: CountWaysByType :one
SELECT COUNT(*) FROM ways
WHERE ways.is_private = false AND (
    ($2 = 'inProgress'
        AND ways.is_completed = false
        AND ways.updated_at > ($1::timestamp - interval '14 days'))
    OR ($2 = 'completed' AND ways.is_completed = true)
    OR ($2 = 'abandoned'
        AND (ways.is_completed = false)
        AND (ways.updated_at < ($1::timestamp - interval '14 days'))
    )
    OR ($2 = 'all')
)
`

type CountWaysByTypeParams struct {
	Column1   time.Time   `json:"column_1"`
	WayStatus interface{} `json:"way_status"`
}

func (q *Queries) CountWaysByType(ctx context.Context, arg CountWaysByTypeParams) (int64, error) {
	row := q.queryRow(ctx, q.countWaysByTypeStmt, countWaysByType, arg.Column1, arg.WayStatus)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWay = `-- name: CreateWay :one
INSERT INTO ways(
    name,
    goal_description,
    updated_at,
    created_at,
    estimation_time,
    copied_from_way_uuid,
    is_private,
    is_completed,
    owner_uuid
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING
    uuid, name, goal_description, updated_at, created_at, estimation_time, owner_uuid, copied_from_way_uuid, is_completed, is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $10) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $10 AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = $10) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = $10) AS way_day_reports_amount,
    (ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::VARCHAR[]) AS children_uuids
`

type CreateWayParams struct {
	Name              string        `json:"name"`
	GoalDescription   string        `json:"goal_description"`
	UpdatedAt         time.Time     `json:"updated_at"`
	CreatedAt         time.Time     `json:"created_at"`
	EstimationTime    int32         `json:"estimation_time"`
	CopiedFromWayUuid uuid.NullUUID `json:"copied_from_way_uuid"`
	IsPrivate         bool          `json:"is_private"`
	IsCompleted       bool          `json:"is_completed"`
	OwnerUuid         uuid.UUID     `json:"owner_uuid"`
	WayUuid           uuid.UUID     `json:"way_uuid"`
}

type CreateWayRow struct {
	Uuid                uuid.UUID     `json:"uuid"`
	Name                string        `json:"name"`
	GoalDescription     string        `json:"goal_description"`
	UpdatedAt           time.Time     `json:"updated_at"`
	CreatedAt           time.Time     `json:"created_at"`
	EstimationTime      int32         `json:"estimation_time"`
	OwnerUuid           uuid.UUID     `json:"owner_uuid"`
	CopiedFromWayUuid   uuid.NullUUID `json:"copied_from_way_uuid"`
	IsCompleted         bool          `json:"is_completed"`
	IsPrivate           bool          `json:"is_private"`
	WayMetricsTotal     int64         `json:"way_metrics_total"`
	WayMetricsDone      int64         `json:"way_metrics_done"`
	WayFavoriteForUsers int64         `json:"way_favorite_for_users"`
	WayDayReportsAmount int64         `json:"way_day_reports_amount"`
	ChildrenUuids       []string      `json:"children_uuids"`
}

func (q *Queries) CreateWay(ctx context.Context, arg CreateWayParams) (CreateWayRow, error) {
	row := q.queryRow(ctx, q.createWayStmt, createWay,
		arg.Name,
		arg.GoalDescription,
		arg.UpdatedAt,
		arg.CreatedAt,
		arg.EstimationTime,
		arg.CopiedFromWayUuid,
		arg.IsPrivate,
		arg.IsCompleted,
		arg.OwnerUuid,
		arg.WayUuid,
	)
	var i CreateWayRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.OwnerUuid,
		&i.CopiedFromWayUuid,
		&i.IsCompleted,
		&i.IsPrivate,
		&i.WayMetricsTotal,
		&i.WayMetricsDone,
		&i.WayFavoriteForUsers,
		&i.WayDayReportsAmount,
		pq.Array(&i.ChildrenUuids),
	)
	return i, err
}

const deleteWay = `-- name: DeleteWay :exec
DELETE FROM ways
WHERE uuid = $1
`

func (q *Queries) DeleteWay(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteWayStmt, deleteWay, argUuid)
	return err
}

const getBasePopulatedWayByID = `-- name: GetBasePopulatedWayByID :one
WITH favorite_count AS (
    SELECT way_uuid, COUNT(*) AS favorite_for_users_amount
    FROM favorite_users_ways
    WHERE way_uuid = $1
    GROUP BY way_uuid
),
mentors_data AS (
    SELECT users.uuid, users.name, users.email, users.description, users.created_at, users.image_url, users.is_mentor
    FROM mentor_users_ways
    JOIN users ON mentor_users_ways.user_uuid = users.uuid
    WHERE mentor_users_ways.way_uuid = $1
),
way_tags_data AS (
    SELECT way_tags.uuid, way_tags.name
    FROM ways_way_tags
    JOIN way_tags ON ways_way_tags.way_tag_uuid = way_tags.uuid
    WHERE ways_way_tags.way_uuid = $1
),
job_tags_data AS (
    SELECT job_tags.uuid, job_tags.name, job_tags.description, job_tags.color
    FROM job_tags
    WHERE job_tags.way_uuid = $1
),
former_mentors_data AS (
    SELECT users.uuid, users.name, users.email, users.description, users.created_at, users.image_url, users.is_mentor
    FROM former_mentors_ways
    JOIN users ON former_mentors_ways.former_mentor_uuid = users.uuid
    WHERE former_mentors_ways.way_uuid = $1
),
from_user_requests_data AS (
    SELECT users.uuid, users.name, users.email, users.description, users.created_at, users.image_url, users.is_mentor
    FROM from_user_mentoring_requests
    JOIN users ON from_user_mentoring_requests.user_uuid = users.uuid
    WHERE from_user_mentoring_requests.way_uuid = $1
),
metrics_data AS (
    SELECT uuid, description, is_done, done_date, metric_estimation
    FROM metrics
    WHERE way_uuid = $1
    ORDER BY created_at
),
day_reports_data AS (
    SELECT uuid, created_at, updated_at, is_day_off
    FROM day_reports
    WHERE way_uuid = $1
    ORDER BY created_at DESC
    -- LIMIT 7
)
SELECT
    ways.uuid,
    ways.name,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.is_completed,
    ways.is_private,
    ways.copied_from_way_uuid,
    u.uuid AS owner_uuid,
    u.name AS owner_name,
    u.email AS owner_email,
    u.description AS owner_description,
    u.created_at AS owner_created_at,
    u.image_url AS owner_image_url,
    u.is_mentor AS owner_is_mentor,
    COALESCE(fc.favorite_for_users_amount, 0) AS favorite_for_users_amount,
    ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::UUID[] AS children_uuids,
    COALESCE(
        (SELECT JSON_AGG(json_build_object(
            'uuid', md.uuid,
            'name', md.name,
            'email', md.email,
            'description', md.description,
            'created_at', md.created_at,
            'image_url', md.image_url,
            'is_mentor', md.is_mentor
        ) ORDER BY md.uuid)
        FROM mentors_data md), '[]'::json) AS mentors,
    COALESCE(
        (SELECT JSON_AGG(json_build_object(
            'uuid', wt.uuid,
            'name', wt.name
        ) ORDER BY wt.name)
        FROM way_tags_data wt), '[]'::json) AS way_tags,
    COALESCE(
        (SELECT JSON_AGG(json_build_object(
            'uuid', jt.uuid,
            'name', jt.name,
            'description', jt.description,
            'color', jt.color
        ) ORDER BY jt.uuid)
        FROM job_tags_data jt), '[]'::json) AS job_tags,
    COALESCE(
        (SELECT JSON_AGG(json_build_object(
            'uuid', fm.uuid,
            'name', fm.name,
            'email', fm.email,
            'description', fm.description,
            'created_at', fm.created_at,
            'image_url', fm.image_url,
            'is_mentor', fm.is_mentor
        ) ORDER BY fm.uuid)
        FROM former_mentors_data fm), '[]'::json) AS former_mentors,
    COALESCE(
        (SELECT JSON_AGG(json_build_object(
            'uuid', fur.uuid,
            'name', fur.name,
            'email', fur.email,
            'description', fur.description,
            'created_at', fur.created_at,
            'image_url', fur.image_url,
            'is_mentor', fur.is_mentor
        ) ORDER BY fur.uuid)
        FROM from_user_requests_data fur), '[]'::json) AS from_user_mentoring_requests,
    COALESCE(
        (SELECT JSON_AGG(json_build_object(
            'uuid', md.uuid,
            'description', md.description,
            'is_done', md.is_done,
            'done_date', md.done_date,
            'metric_estimation', md.metric_estimation
        ))
        FROM metrics_data md), '[]'::json) AS metrics,
    COALESCE(
        (SELECT JSON_AGG(json_build_object(
            'uuid', dr.uuid,
            'created_at', dr.created_at,
            'updated_at', dr.updated_at,
            'is_day_off', dr.is_day_off
        ))
        FROM day_reports_data dr), '[]'::json) AS day_reports
FROM ways
JOIN users u ON u.uuid = ways.owner_uuid
LEFT JOIN favorite_count fc ON fc.way_uuid = ways.uuid
WHERE ways.uuid = $1
LIMIT 1
`

type GetBasePopulatedWayByIDRow struct {
	Uuid                      uuid.UUID     `json:"uuid"`
	Name                      string        `json:"name"`
	GoalDescription           string        `json:"goal_description"`
	UpdatedAt                 time.Time     `json:"updated_at"`
	CreatedAt                 time.Time     `json:"created_at"`
	EstimationTime            int32         `json:"estimation_time"`
	IsCompleted               bool          `json:"is_completed"`
	IsPrivate                 bool          `json:"is_private"`
	CopiedFromWayUuid         uuid.NullUUID `json:"copied_from_way_uuid"`
	OwnerUuid                 uuid.UUID     `json:"owner_uuid"`
	OwnerName                 string        `json:"owner_name"`
	OwnerEmail                string        `json:"owner_email"`
	OwnerDescription          string        `json:"owner_description"`
	OwnerCreatedAt            time.Time     `json:"owner_created_at"`
	OwnerImageUrl             string        `json:"owner_image_url"`
	OwnerIsMentor             bool          `json:"owner_is_mentor"`
	FavoriteForUsersAmount    int64         `json:"favorite_for_users_amount"`
	ChildrenUuids             []uuid.UUID   `json:"children_uuids"`
	Mentors                   interface{}   `json:"mentors"`
	WayTags                   interface{}   `json:"way_tags"`
	JobTags                   interface{}   `json:"job_tags"`
	FormerMentors             interface{}   `json:"former_mentors"`
	FromUserMentoringRequests interface{}   `json:"from_user_mentoring_requests"`
	Metrics                   interface{}   `json:"metrics"`
	DayReports                interface{}   `json:"day_reports"`
}

func (q *Queries) GetBasePopulatedWayByID(ctx context.Context, argUuid uuid.UUID) (GetBasePopulatedWayByIDRow, error) {
	row := q.queryRow(ctx, q.getBasePopulatedWayByIDStmt, getBasePopulatedWayByID, argUuid)
	var i GetBasePopulatedWayByIDRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.IsCompleted,
		&i.IsPrivate,
		&i.CopiedFromWayUuid,
		&i.OwnerUuid,
		&i.OwnerName,
		&i.OwnerEmail,
		&i.OwnerDescription,
		&i.OwnerCreatedAt,
		&i.OwnerImageUrl,
		&i.OwnerIsMentor,
		&i.FavoriteForUsersAmount,
		pq.Array(&i.ChildrenUuids),
		&i.Mentors,
		&i.WayTags,
		&i.JobTags,
		&i.FormerMentors,
		&i.FromUserMentoringRequests,
		&i.Metrics,
		&i.DayReports,
	)
	return i, err
}

const getFavoriteWaysByUserId = `-- name: GetFavoriteWaysByUserId :many
SELECT
    ways.uuid,
    ways.name,
    ways.owner_uuid,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    (ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::VARCHAR[]) AS children_uuids
FROM ways
JOIN favorite_users_ways ON favorite_users_ways.way_uuid = ways.uuid
WHERE favorite_users_ways.user_uuid = $1
ORDER BY ways.updated_at DESC
`

type GetFavoriteWaysByUserIdRow struct {
	Uuid                uuid.UUID     `json:"uuid"`
	Name                string        `json:"name"`
	OwnerUuid           uuid.UUID     `json:"owner_uuid"`
	GoalDescription     string        `json:"goal_description"`
	UpdatedAt           time.Time     `json:"updated_at"`
	CreatedAt           time.Time     `json:"created_at"`
	EstimationTime      int32         `json:"estimation_time"`
	CopiedFromWayUuid   uuid.NullUUID `json:"copied_from_way_uuid"`
	IsCompleted         bool          `json:"is_completed"`
	IsPrivate           bool          `json:"is_private"`
	WayMetricsTotal     int64         `json:"way_metrics_total"`
	WayMetricsDone      int64         `json:"way_metrics_done"`
	WayFavoriteForUsers int64         `json:"way_favorite_for_users"`
	WayDayReportsAmount int64         `json:"way_day_reports_amount"`
	ChildrenUuids       []string      `json:"children_uuids"`
}

func (q *Queries) GetFavoriteWaysByUserId(ctx context.Context, userUuid uuid.UUID) ([]GetFavoriteWaysByUserIdRow, error) {
	rows, err := q.query(ctx, q.getFavoriteWaysByUserIdStmt, getFavoriteWaysByUserId, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFavoriteWaysByUserIdRow{}
	for rows.Next() {
		var i GetFavoriteWaysByUserIdRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.OwnerUuid,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			pq.Array(&i.ChildrenUuids),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMentoringWaysByMentorId = `-- name: GetMentoringWaysByMentorId :many
SELECT
    ways.uuid,
    ways.name,
    ways.owner_uuid,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    (ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::VARCHAR[]) AS children_uuids
FROM ways
JOIN mentor_users_ways ON mentor_users_ways.way_uuid = ways.uuid
WHERE mentor_users_ways.user_uuid = $1
ORDER BY ways.updated_at DESC
`

type GetMentoringWaysByMentorIdRow struct {
	Uuid                uuid.UUID     `json:"uuid"`
	Name                string        `json:"name"`
	OwnerUuid           uuid.UUID     `json:"owner_uuid"`
	GoalDescription     string        `json:"goal_description"`
	UpdatedAt           time.Time     `json:"updated_at"`
	CreatedAt           time.Time     `json:"created_at"`
	EstimationTime      int32         `json:"estimation_time"`
	CopiedFromWayUuid   uuid.NullUUID `json:"copied_from_way_uuid"`
	IsCompleted         bool          `json:"is_completed"`
	IsPrivate           bool          `json:"is_private"`
	WayMetricsTotal     int64         `json:"way_metrics_total"`
	WayMetricsDone      int64         `json:"way_metrics_done"`
	WayFavoriteForUsers int64         `json:"way_favorite_for_users"`
	WayDayReportsAmount int64         `json:"way_day_reports_amount"`
	ChildrenUuids       []string      `json:"children_uuids"`
}

func (q *Queries) GetMentoringWaysByMentorId(ctx context.Context, userUuid uuid.UUID) ([]GetMentoringWaysByMentorIdRow, error) {
	rows, err := q.query(ctx, q.getMentoringWaysByMentorIdStmt, getMentoringWaysByMentorId, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMentoringWaysByMentorIdRow{}
	for rows.Next() {
		var i GetMentoringWaysByMentorIdRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.OwnerUuid,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			pq.Array(&i.ChildrenUuids),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnWaysByUserId = `-- name: GetOwnWaysByUserId :many
SELECT
    ways.uuid,
    ways.name,
    ways.owner_uuid,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    (ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::VARCHAR[]) AS children_uuids
FROM ways
WHERE ways.owner_uuid = $1
ORDER BY ways.updated_at DESC
`

type GetOwnWaysByUserIdRow struct {
	Uuid                uuid.UUID     `json:"uuid"`
	Name                string        `json:"name"`
	OwnerUuid           uuid.UUID     `json:"owner_uuid"`
	GoalDescription     string        `json:"goal_description"`
	UpdatedAt           time.Time     `json:"updated_at"`
	CreatedAt           time.Time     `json:"created_at"`
	EstimationTime      int32         `json:"estimation_time"`
	CopiedFromWayUuid   uuid.NullUUID `json:"copied_from_way_uuid"`
	IsCompleted         bool          `json:"is_completed"`
	IsPrivate           bool          `json:"is_private"`
	WayMetricsTotal     int64         `json:"way_metrics_total"`
	WayMetricsDone      int64         `json:"way_metrics_done"`
	WayFavoriteForUsers int64         `json:"way_favorite_for_users"`
	WayDayReportsAmount int64         `json:"way_day_reports_amount"`
	ChildrenUuids       []string      `json:"children_uuids"`
}

func (q *Queries) GetOwnWaysByUserId(ctx context.Context, ownerUuid uuid.UUID) ([]GetOwnWaysByUserIdRow, error) {
	rows, err := q.query(ctx, q.getOwnWaysByUserIdStmt, getOwnWaysByUserId, ownerUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOwnWaysByUserIdRow{}
	for rows.Next() {
		var i GetOwnWaysByUserIdRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.OwnerUuid,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			pq.Array(&i.ChildrenUuids),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnWaysCountByUserId = `-- name: GetOwnWaysCountByUserId :one
SELECT
    COUNT(*) AS own_ways_count
FROM ways
WHERE owner_uuid = $1
`

func (q *Queries) GetOwnWaysCountByUserId(ctx context.Context, userUuid uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.getOwnWaysCountByUserIdStmt, getOwnWaysCountByUserId, userUuid)
	var own_ways_count int64
	err := row.Scan(&own_ways_count)
	return own_ways_count, err
}

const getPrivateWaysCountByUserId = `-- name: GetPrivateWaysCountByUserId :one
SELECT
    COUNT(*) AS private_ways_count
FROM ways
WHERE owner_uuid = $1 AND is_private = TRUE
`

func (q *Queries) GetPrivateWaysCountByUserId(ctx context.Context, userUuid uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.getPrivateWaysCountByUserIdStmt, getPrivateWaysCountByUserId, userUuid)
	var private_ways_count int64
	err := row.Scan(&private_ways_count)
	return private_ways_count, err
}

const getWayById = `-- name: GetWayById :one
SELECT
    ways.uuid,
    ways.name,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    (ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::VARCHAR[]) AS children_uuids,
    users.uuid AS owner_uuid,
    users.name AS owner_name,
    users.email AS owner_email,
    users.description AS owner_description,
    users.created_at AS owner_created_at,
    users.image_url AS owner_image_url,
    users.is_mentor AS owner_is_mentor,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $1) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $1 AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = $1) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = $1) AS way_day_reports_amount,
    (ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::VARCHAR[]) AS children_uuids
FROM ways
JOIN users ON users.uuid = ways.owner_uuid
WHERE ways.uuid = $1
LIMIT 1
`

type GetWayByIdRow struct {
	Uuid                uuid.UUID     `json:"uuid"`
	Name                string        `json:"name"`
	GoalDescription     string        `json:"goal_description"`
	UpdatedAt           time.Time     `json:"updated_at"`
	CreatedAt           time.Time     `json:"created_at"`
	EstimationTime      int32         `json:"estimation_time"`
	CopiedFromWayUuid   uuid.NullUUID `json:"copied_from_way_uuid"`
	IsCompleted         bool          `json:"is_completed"`
	IsPrivate           bool          `json:"is_private"`
	ChildrenUuids       []string      `json:"children_uuids"`
	OwnerUuid           uuid.UUID     `json:"owner_uuid"`
	OwnerName           string        `json:"owner_name"`
	OwnerEmail          string        `json:"owner_email"`
	OwnerDescription    string        `json:"owner_description"`
	OwnerCreatedAt      time.Time     `json:"owner_created_at"`
	OwnerImageUrl       string        `json:"owner_image_url"`
	OwnerIsMentor       bool          `json:"owner_is_mentor"`
	WayMetricsTotal     int64         `json:"way_metrics_total"`
	WayMetricsDone      int64         `json:"way_metrics_done"`
	WayFavoriteForUsers int64         `json:"way_favorite_for_users"`
	WayDayReportsAmount int64         `json:"way_day_reports_amount"`
	ChildrenUuids_2     []string      `json:"children_uuids_2"`
}

func (q *Queries) GetWayById(ctx context.Context, wayUuid uuid.UUID) (GetWayByIdRow, error) {
	row := q.queryRow(ctx, q.getWayByIdStmt, getWayById, wayUuid)
	var i GetWayByIdRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.CopiedFromWayUuid,
		&i.IsCompleted,
		&i.IsPrivate,
		pq.Array(&i.ChildrenUuids),
		&i.OwnerUuid,
		&i.OwnerName,
		&i.OwnerEmail,
		&i.OwnerDescription,
		&i.OwnerCreatedAt,
		&i.OwnerImageUrl,
		&i.OwnerIsMentor,
		&i.WayMetricsTotal,
		&i.WayMetricsDone,
		&i.WayFavoriteForUsers,
		&i.WayDayReportsAmount,
		pq.Array(&i.ChildrenUuids_2),
	)
	return i, err
}

const getWaysByCollectionId = `-- name: GetWaysByCollectionId :many
SELECT
    ways.uuid,
    ways.name,
    ways.owner_uuid,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    (ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::VARCHAR[]) AS children_uuids
FROM ways
JOIN way_collections_ways ON way_collections_ways.way_uuid = ways.uuid
WHERE way_collections_ways.way_collection_uuid = $1
ORDER BY ways.updated_at DESC
`

type GetWaysByCollectionIdRow struct {
	Uuid                uuid.UUID     `json:"uuid"`
	Name                string        `json:"name"`
	OwnerUuid           uuid.UUID     `json:"owner_uuid"`
	GoalDescription     string        `json:"goal_description"`
	UpdatedAt           time.Time     `json:"updated_at"`
	CreatedAt           time.Time     `json:"created_at"`
	EstimationTime      int32         `json:"estimation_time"`
	CopiedFromWayUuid   uuid.NullUUID `json:"copied_from_way_uuid"`
	IsCompleted         bool          `json:"is_completed"`
	IsPrivate           bool          `json:"is_private"`
	WayMetricsTotal     int64         `json:"way_metrics_total"`
	WayMetricsDone      int64         `json:"way_metrics_done"`
	WayFavoriteForUsers int64         `json:"way_favorite_for_users"`
	WayDayReportsAmount int64         `json:"way_day_reports_amount"`
	ChildrenUuids       []string      `json:"children_uuids"`
}

func (q *Queries) GetWaysByCollectionId(ctx context.Context, wayCollectionUuid uuid.UUID) ([]GetWaysByCollectionIdRow, error) {
	rows, err := q.query(ctx, q.getWaysByCollectionIdStmt, getWaysByCollectionId, wayCollectionUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWaysByCollectionIdRow{}
	for rows.Next() {
		var i GetWaysByCollectionIdRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.OwnerUuid,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			pq.Array(&i.ChildrenUuids),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWays = `-- name: ListWays :many
SELECT
    uuid, name, goal_description, updated_at, created_at, estimation_time, owner_uuid, copied_from_way_uuid, is_completed, is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    (ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::VARCHAR[]) AS children_uuids
FROM ways
WHERE ways.is_private = false AND
    (
        ($3 = 'inProgress' AND ways.is_completed = false AND ways.updated_at > $4::timestamp - interval '14 days')
    OR ($3 = 'completed' AND ways.is_completed = true)
    OR ($3 = 'abandoned' AND ways.is_completed = false AND ways.updated_at < $4::timestamp - interval '14 days')
    OR ($3 = 'all')
    )
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListWaysParams struct {
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
	Column3 interface{} `json:"column_3"`
	Column4 time.Time   `json:"column_4"`
}

type ListWaysRow struct {
	Uuid                uuid.UUID     `json:"uuid"`
	Name                string        `json:"name"`
	GoalDescription     string        `json:"goal_description"`
	UpdatedAt           time.Time     `json:"updated_at"`
	CreatedAt           time.Time     `json:"created_at"`
	EstimationTime      int32         `json:"estimation_time"`
	OwnerUuid           uuid.UUID     `json:"owner_uuid"`
	CopiedFromWayUuid   uuid.NullUUID `json:"copied_from_way_uuid"`
	IsCompleted         bool          `json:"is_completed"`
	IsPrivate           bool          `json:"is_private"`
	WayMetricsTotal     int64         `json:"way_metrics_total"`
	WayMetricsDone      int64         `json:"way_metrics_done"`
	WayFavoriteForUsers int64         `json:"way_favorite_for_users"`
	WayDayReportsAmount int64         `json:"way_day_reports_amount"`
	ChildrenUuids       []string      `json:"children_uuids"`
}

func (q *Queries) ListWays(ctx context.Context, arg ListWaysParams) ([]ListWaysRow, error) {
	rows, err := q.query(ctx, q.listWaysStmt, listWays,
		arg.Limit,
		arg.Offset,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListWaysRow{}
	for rows.Next() {
		var i ListWaysRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.OwnerUuid,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			pq.Array(&i.ChildrenUuids),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWay = `-- name: UpdateWay :one
UPDATE ways
SET
name = coalesce($1, name),
goal_description = coalesce($2, goal_description),
updated_at = coalesce($3, updated_at),
estimation_time = coalesce($4, estimation_time),
is_private = coalesce($5, is_private),
is_completed = coalesce($6, is_completed)

WHERE ways.uuid = $7
RETURNING uuid, name, goal_description, updated_at, created_at, estimation_time, owner_uuid, copied_from_way_uuid, is_completed, is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $7) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $7 AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = $7) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = $7) AS way_day_reports_amount,
    (ARRAY(
        SELECT composite_ways.child_uuid
        FROM composite_ways
        WHERE composite_ways.parent_uuid = ways.uuid
    )::VARCHAR[]) AS children_uuids
`

type UpdateWayParams struct {
	Name            sql.NullString `json:"name"`
	GoalDescription sql.NullString `json:"goal_description"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	EstimationTime  sql.NullInt32  `json:"estimation_time"`
	IsPrivate       sql.NullBool   `json:"is_private"`
	IsCompleted     sql.NullBool   `json:"is_completed"`
	Uuid            uuid.UUID      `json:"uuid"`
}

type UpdateWayRow struct {
	Uuid                uuid.UUID     `json:"uuid"`
	Name                string        `json:"name"`
	GoalDescription     string        `json:"goal_description"`
	UpdatedAt           time.Time     `json:"updated_at"`
	CreatedAt           time.Time     `json:"created_at"`
	EstimationTime      int32         `json:"estimation_time"`
	OwnerUuid           uuid.UUID     `json:"owner_uuid"`
	CopiedFromWayUuid   uuid.NullUUID `json:"copied_from_way_uuid"`
	IsCompleted         bool          `json:"is_completed"`
	IsPrivate           bool          `json:"is_private"`
	WayMetricsTotal     int64         `json:"way_metrics_total"`
	WayMetricsDone      int64         `json:"way_metrics_done"`
	WayFavoriteForUsers int64         `json:"way_favorite_for_users"`
	WayDayReportsAmount int64         `json:"way_day_reports_amount"`
	ChildrenUuids       []string      `json:"children_uuids"`
}

func (q *Queries) UpdateWay(ctx context.Context, arg UpdateWayParams) (UpdateWayRow, error) {
	row := q.queryRow(ctx, q.updateWayStmt, updateWay,
		arg.Name,
		arg.GoalDescription,
		arg.UpdatedAt,
		arg.EstimationTime,
		arg.IsPrivate,
		arg.IsCompleted,
		arg.Uuid,
	)
	var i UpdateWayRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.OwnerUuid,
		&i.CopiedFromWayUuid,
		&i.IsCompleted,
		&i.IsPrivate,
		&i.WayMetricsTotal,
		&i.WayMetricsDone,
		&i.WayFavoriteForUsers,
		&i.WayDayReportsAmount,
		pq.Array(&i.ChildrenUuids),
	)
	return i, err
}
