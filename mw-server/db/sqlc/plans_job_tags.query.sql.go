// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: plans_job_tags.query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPlansJobTag = `-- name: CreatePlansJobTag :one
INSERT INTO plans_job_tags(
    plan_uuid,
    job_tag_uuid
) VALUES (
    $1, $2
) RETURNING plan_uuid, job_tag_uuid
`

type CreatePlansJobTagParams struct {
	PlanUuid   uuid.UUID `json:"plan_uuid"`
	JobTagUuid uuid.UUID `json:"job_tag_uuid"`
}

func (q *Queries) CreatePlansJobTag(ctx context.Context, arg CreatePlansJobTagParams) (PlansJobTag, error) {
	row := q.queryRow(ctx, q.createPlansJobTagStmt, createPlansJobTag, arg.PlanUuid, arg.JobTagUuid)
	var i PlansJobTag
	err := row.Scan(&i.PlanUuid, &i.JobTagUuid)
	return i, err
}

const deletePlansJobTagByIds = `-- name: DeletePlansJobTagByIds :exec
DELETE FROM plans_job_tags
WHERE plan_uuid = $1 AND job_tag_uuid = $2
`

type DeletePlansJobTagByIdsParams struct {
	PlanUuid   uuid.UUID `json:"plan_uuid"`
	JobTagUuid uuid.UUID `json:"job_tag_uuid"`
}

func (q *Queries) DeletePlansJobTagByIds(ctx context.Context, arg DeletePlansJobTagByIdsParams) error {
	_, err := q.exec(ctx, q.deletePlansJobTagByIdsStmt, deletePlansJobTagByIds, arg.PlanUuid, arg.JobTagUuid)
	return err
}

const getPlansJoinJobTags = `-- name: GetPlansJoinJobTags :many
SELECT plans.uuid, created_at, updated_at, plans.description, time, owner_uuid, is_done, day_report_uuid, plan_uuid, job_tag_uuid, job_tags.uuid, name, job_tags.description, color, way_uuid FROM plans
JOIN plans_job_tags ON plans.uuid = plans_job_tags.plan_uuid
JOIN job_tags ON plans_job_tags.job_tag_uuid = job_tags.uuid
WHERE plans.uuid IN (
    -- plans uuids for day report 
    SELECT plans.uuid FROM plans 
    WHERE plans.day_report_uuid = $1
)
`

type GetPlansJoinJobTagsRow struct {
	Uuid          uuid.UUID `json:"uuid"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	Description   string    `json:"description"`
	Time          int32     `json:"time"`
	OwnerUuid     uuid.UUID `json:"owner_uuid"`
	IsDone        bool      `json:"is_done"`
	DayReportUuid uuid.UUID `json:"day_report_uuid"`
	PlanUuid      uuid.UUID `json:"plan_uuid"`
	JobTagUuid    uuid.UUID `json:"job_tag_uuid"`
	Uuid_2        uuid.UUID `json:"uuid_2"`
	Name          string    `json:"name"`
	Description_2 string    `json:"description_2"`
	Color         string    `json:"color"`
	WayUuid       uuid.UUID `json:"way_uuid"`
}

func (q *Queries) GetPlansJoinJobTags(ctx context.Context, dayReportUuid uuid.UUID) ([]GetPlansJoinJobTagsRow, error) {
	rows, err := q.query(ctx, q.getPlansJoinJobTagsStmt, getPlansJoinJobTags, dayReportUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPlansJoinJobTagsRow{}
	for rows.Next() {
		var i GetPlansJoinJobTagsRow
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Time,
			&i.OwnerUuid,
			&i.IsDone,
			&i.DayReportUuid,
			&i.PlanUuid,
			&i.JobTagUuid,
			&i.Uuid_2,
			&i.Name,
			&i.Description_2,
			&i.Color,
			&i.WayUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
