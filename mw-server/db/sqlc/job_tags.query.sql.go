// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_tags.query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createJobTag = `-- name: CreateJobTag :one
INSERT INTO job_tags(
    name,
    description,
    color,
    way_uuid
) VALUES (
    $1, $2, $3, $4
) RETURNING uuid, name, description, color, way_uuid
`

type CreateJobTagParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Color       string    `json:"color"`
	WayUuid     uuid.UUID `json:"way_uuid"`
}

func (q *Queries) CreateJobTag(ctx context.Context, arg CreateJobTagParams) (JobTag, error) {
	row := q.queryRow(ctx, q.createJobTagStmt, createJobTag,
		arg.Name,
		arg.Description,
		arg.Color,
		arg.WayUuid,
	)
	var i JobTag
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.WayUuid,
	)
	return i, err
}

const deleteJobTagById = `-- name: DeleteJobTagById :exec
DELETE FROM job_tags
WHERE uuid = $1
`

func (q *Queries) DeleteJobTagById(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteJobTagByIdStmt, deleteJobTagById, argUuid)
	return err
}

const getJobTagByUuid = `-- name: GetJobTagByUuid :one
SELECT uuid, name, description, color, way_uuid FROM job_tags
WHERE job_tags.uuid = $1
`

func (q *Queries) GetJobTagByUuid(ctx context.Context, argUuid uuid.UUID) (JobTag, error) {
	row := q.queryRow(ctx, q.getJobTagByUuidStmt, getJobTagByUuid, argUuid)
	var i JobTag
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.WayUuid,
	)
	return i, err
}

const getListJobTagsByWayUuid = `-- name: GetListJobTagsByWayUuid :many
SELECT uuid, name, description, color, way_uuid FROM job_tags
WHERE way_uuid = $1
ORDER BY uuid
`

func (q *Queries) GetListJobTagsByWayUuid(ctx context.Context, wayUuid uuid.UUID) ([]JobTag, error) {
	rows, err := q.query(ctx, q.getListJobTagsByWayUuidStmt, getListJobTagsByWayUuid, wayUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobTag{}
	for rows.Next() {
		var i JobTag
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.Color,
			&i.WayUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListJobTagsByWayUuids = `-- name: GetListJobTagsByWayUuids :many
SELECT uuid, name, description, color, way_uuid FROM job_tags
WHERE way_uuid = ANY($1::UUID[])
ORDER BY uuid
`

func (q *Queries) GetListJobTagsByWayUuids(ctx context.Context, dollar_1 []uuid.UUID) ([]JobTag, error) {
	rows, err := q.query(ctx, q.getListJobTagsByWayUuidsStmt, getListJobTagsByWayUuids, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobTag{}
	for rows.Next() {
		var i JobTag
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.Color,
			&i.WayUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobTag = `-- name: UpdateJobTag :one
UPDATE job_tags
SET
name = coalesce($1, name),
description = coalesce($2, description),
color = coalesce($3, color)
WHERE uuid = $4
RETURNING uuid, name, description, color, way_uuid
`

type UpdateJobTagParams struct {
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Color       sql.NullString `json:"color"`
	Uuid        uuid.UUID      `json:"uuid"`
}

func (q *Queries) UpdateJobTag(ctx context.Context, arg UpdateJobTagParams) (JobTag, error) {
	row := q.queryRow(ctx, q.updateJobTagStmt, updateJobTag,
		arg.Name,
		arg.Description,
		arg.Color,
		arg.Uuid,
	)
	var i JobTag
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.WayUuid,
	)
	return i, err
}
