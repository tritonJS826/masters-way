// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addWayToCompositeWayStmt, err = db.PrepareContext(ctx, addWayToCompositeWay); err != nil {
		return nil, fmt.Errorf("error preparing query AddWayToCompositeWay: %w", err)
	}
	if q.countUsersStmt, err = db.PrepareContext(ctx, countUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsers: %w", err)
	}
	if q.countWaysByTypeStmt, err = db.PrepareContext(ctx, countWaysByType); err != nil {
		return nil, fmt.Errorf("error preparing query CountWaysByType: %w", err)
	}
	if q.createCommentStmt, err = db.PrepareContext(ctx, createComment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateComment: %w", err)
	}
	if q.createDayReportStmt, err = db.PrepareContext(ctx, createDayReport); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDayReport: %w", err)
	}
	if q.createFavoriteUserStmt, err = db.PrepareContext(ctx, createFavoriteUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFavoriteUser: %w", err)
	}
	if q.createFavoriteUserWayStmt, err = db.PrepareContext(ctx, createFavoriteUserWay); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFavoriteUserWay: %w", err)
	}
	if q.createFormerMentorsWayStmt, err = db.PrepareContext(ctx, createFormerMentorsWay); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFormerMentorsWay: %w", err)
	}
	if q.createFromUserMentoringRequestStmt, err = db.PrepareContext(ctx, createFromUserMentoringRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFromUserMentoringRequest: %w", err)
	}
	if q.createJobDoneStmt, err = db.PrepareContext(ctx, createJobDone); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJobDone: %w", err)
	}
	if q.createJobDonesJobTagStmt, err = db.PrepareContext(ctx, createJobDonesJobTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJobDonesJobTag: %w", err)
	}
	if q.createJobTagStmt, err = db.PrepareContext(ctx, createJobTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJobTag: %w", err)
	}
	if q.createMentorUserWayStmt, err = db.PrepareContext(ctx, createMentorUserWay); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMentorUserWay: %w", err)
	}
	if q.createMetricStmt, err = db.PrepareContext(ctx, createMetric); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMetric: %w", err)
	}
	if q.createPlanStmt, err = db.PrepareContext(ctx, createPlan); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlan: %w", err)
	}
	if q.createPlansJobTagStmt, err = db.PrepareContext(ctx, createPlansJobTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlansJobTag: %w", err)
	}
	if q.createProblemStmt, err = db.PrepareContext(ctx, createProblem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProblem: %w", err)
	}
	if q.createProblemsJobTagStmt, err = db.PrepareContext(ctx, createProblemsJobTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProblemsJobTag: %w", err)
	}
	if q.createToUserMentoringRequestStmt, err = db.PrepareContext(ctx, createToUserMentoringRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateToUserMentoringRequest: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserTagStmt, err = db.PrepareContext(ctx, createUserTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserTag: %w", err)
	}
	if q.createUsersUserTagStmt, err = db.PrepareContext(ctx, createUsersUserTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUsersUserTag: %w", err)
	}
	if q.createWayStmt, err = db.PrepareContext(ctx, createWay); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWay: %w", err)
	}
	if q.createWayCollectionStmt, err = db.PrepareContext(ctx, createWayCollection); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWayCollection: %w", err)
	}
	if q.createWayCollectionsWaysStmt, err = db.PrepareContext(ctx, createWayCollectionsWays); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWayCollectionsWays: %w", err)
	}
	if q.createWayTagStmt, err = db.PrepareContext(ctx, createWayTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWayTag: %w", err)
	}
	if q.createWaysWayTagStmt, err = db.PrepareContext(ctx, createWaysWayTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWaysWayTag: %w", err)
	}
	if q.deleteCommentStmt, err = db.PrepareContext(ctx, deleteComment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteComment: %w", err)
	}
	if q.deleteFavoriteUserByIdsStmt, err = db.PrepareContext(ctx, deleteFavoriteUserByIds); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFavoriteUserByIds: %w", err)
	}
	if q.deleteFavoriteUserWayByIdsStmt, err = db.PrepareContext(ctx, deleteFavoriteUserWayByIds); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFavoriteUserWayByIds: %w", err)
	}
	if q.deleteFormerMentorWayIfExistStmt, err = db.PrepareContext(ctx, deleteFormerMentorWayIfExist); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFormerMentorWayIfExist: %w", err)
	}
	if q.deleteFromUserMentoringRequestStmt, err = db.PrepareContext(ctx, deleteFromUserMentoringRequest); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFromUserMentoringRequest: %w", err)
	}
	if q.deleteJobDoneStmt, err = db.PrepareContext(ctx, deleteJobDone); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJobDone: %w", err)
	}
	if q.deleteJobDonesJobTagByJobDoneIdStmt, err = db.PrepareContext(ctx, deleteJobDonesJobTagByJobDoneId); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJobDonesJobTagByJobDoneId: %w", err)
	}
	if q.deleteJobTagByIdStmt, err = db.PrepareContext(ctx, deleteJobTagById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJobTagById: %w", err)
	}
	if q.deleteMentorUserWayByIdsStmt, err = db.PrepareContext(ctx, deleteMentorUserWayByIds); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMentorUserWayByIds: %w", err)
	}
	if q.deleteMetricStmt, err = db.PrepareContext(ctx, deleteMetric); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMetric: %w", err)
	}
	if q.deletePlanStmt, err = db.PrepareContext(ctx, deletePlan); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePlan: %w", err)
	}
	if q.deletePlansJobTagByIdsStmt, err = db.PrepareContext(ctx, deletePlansJobTagByIds); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePlansJobTagByIds: %w", err)
	}
	if q.deleteProblemStmt, err = db.PrepareContext(ctx, deleteProblem); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProblem: %w", err)
	}
	if q.deleteProblemsJobTagByIdsStmt, err = db.PrepareContext(ctx, deleteProblemsJobTagByIds); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProblemsJobTagByIds: %w", err)
	}
	if q.deleteToUserMentoringRequestByIdsStmt, err = db.PrepareContext(ctx, deleteToUserMentoringRequestByIds); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteToUserMentoringRequestByIds: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserTagFromUserStmt, err = db.PrepareContext(ctx, deleteUserTagFromUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserTagFromUser: %w", err)
	}
	if q.deleteWayStmt, err = db.PrepareContext(ctx, deleteWay); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWay: %w", err)
	}
	if q.deleteWayCollectionStmt, err = db.PrepareContext(ctx, deleteWayCollection); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWayCollection: %w", err)
	}
	if q.deleteWayCollectionsWaysByIdsStmt, err = db.PrepareContext(ctx, deleteWayCollectionsWaysByIds); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWayCollectionsWaysByIds: %w", err)
	}
	if q.deleteWayFromCompositeWayStmt, err = db.PrepareContext(ctx, deleteWayFromCompositeWay); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWayFromCompositeWay: %w", err)
	}
	if q.deleteWayTagFromWayStmt, err = db.PrepareContext(ctx, deleteWayTagFromWay); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWayTagFromWay: %w", err)
	}
	if q.getBasePopulatedWayByIDStmt, err = db.PrepareContext(ctx, getBasePopulatedWayByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetBasePopulatedWayByID: %w", err)
	}
	if q.getDayReportsCountByWayIdStmt, err = db.PrepareContext(ctx, getDayReportsCountByWayId); err != nil {
		return nil, fmt.Errorf("error preparing query GetDayReportsCountByWayId: %w", err)
	}
	if q.getFavoriteForUserUuidsByWayIdStmt, err = db.PrepareContext(ctx, getFavoriteForUserUuidsByWayId); err != nil {
		return nil, fmt.Errorf("error preparing query GetFavoriteForUserUuidsByWayId: %w", err)
	}
	if q.getFavoriteUserByDonorUserIdStmt, err = db.PrepareContext(ctx, getFavoriteUserByDonorUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetFavoriteUserByDonorUserId: %w", err)
	}
	if q.getFavoriteUserUuidsByAcceptorUserIdStmt, err = db.PrepareContext(ctx, getFavoriteUserUuidsByAcceptorUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetFavoriteUserUuidsByAcceptorUserId: %w", err)
	}
	if q.getFavoriteWaysByUserIdStmt, err = db.PrepareContext(ctx, getFavoriteWaysByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetFavoriteWaysByUserId: %w", err)
	}
	if q.getFormerMentorUsersByWayIdStmt, err = db.PrepareContext(ctx, getFormerMentorUsersByWayId); err != nil {
		return nil, fmt.Errorf("error preparing query GetFormerMentorUsersByWayId: %w", err)
	}
	if q.getFromUserMentoringRequestWaysByUserIdStmt, err = db.PrepareContext(ctx, getFromUserMentoringRequestWaysByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetFromUserMentoringRequestWaysByUserId: %w", err)
	}
	if q.getFromUserMentoringRequestWaysByWayIdStmt, err = db.PrepareContext(ctx, getFromUserMentoringRequestWaysByWayId); err != nil {
		return nil, fmt.Errorf("error preparing query GetFromUserMentoringRequestWaysByWayId: %w", err)
	}
	if q.getJobDonesByDayReportUuidsStmt, err = db.PrepareContext(ctx, getJobDonesByDayReportUuids); err != nil {
		return nil, fmt.Errorf("error preparing query GetJobDonesByDayReportUuids: %w", err)
	}
	if q.getJobTagByUuidStmt, err = db.PrepareContext(ctx, getJobTagByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query GetJobTagByUuid: %w", err)
	}
	if q.getListCommentsByDayReportUuidsStmt, err = db.PrepareContext(ctx, getListCommentsByDayReportUuids); err != nil {
		return nil, fmt.Errorf("error preparing query GetListCommentsByDayReportUuids: %w", err)
	}
	if q.getListDayReportsByWayUuidStmt, err = db.PrepareContext(ctx, getListDayReportsByWayUuid); err != nil {
		return nil, fmt.Errorf("error preparing query GetListDayReportsByWayUuid: %w", err)
	}
	if q.getListJobTagsByWayUuidStmt, err = db.PrepareContext(ctx, getListJobTagsByWayUuid); err != nil {
		return nil, fmt.Errorf("error preparing query GetListJobTagsByWayUuid: %w", err)
	}
	if q.getListJobTagsByWayUuidsStmt, err = db.PrepareContext(ctx, getListJobTagsByWayUuids); err != nil {
		return nil, fmt.Errorf("error preparing query GetListJobTagsByWayUuids: %w", err)
	}
	if q.getListJobsDoneByDayReportIdStmt, err = db.PrepareContext(ctx, getListJobsDoneByDayReportId); err != nil {
		return nil, fmt.Errorf("error preparing query GetListJobsDoneByDayReportId: %w", err)
	}
	if q.getListLabelsByLabelUuidsStmt, err = db.PrepareContext(ctx, getListLabelsByLabelUuids); err != nil {
		return nil, fmt.Errorf("error preparing query GetListLabelsByLabelUuids: %w", err)
	}
	if q.getListMetricsByWayUuidStmt, err = db.PrepareContext(ctx, getListMetricsByWayUuid); err != nil {
		return nil, fmt.Errorf("error preparing query GetListMetricsByWayUuid: %w", err)
	}
	if q.getListPlansByDayReportIdStmt, err = db.PrepareContext(ctx, getListPlansByDayReportId); err != nil {
		return nil, fmt.Errorf("error preparing query GetListPlansByDayReportId: %w", err)
	}
	if q.getListProblemsByDayReportIdStmt, err = db.PrepareContext(ctx, getListProblemsByDayReportId); err != nil {
		return nil, fmt.Errorf("error preparing query GetListProblemsByDayReportId: %w", err)
	}
	if q.getListUserTagsByUserIdStmt, err = db.PrepareContext(ctx, getListUserTagsByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetListUserTagsByUserId: %w", err)
	}
	if q.getListWayCollectionsByUserIdStmt, err = db.PrepareContext(ctx, getListWayCollectionsByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetListWayCollectionsByUserId: %w", err)
	}
	if q.getListWayTagsByWayIdStmt, err = db.PrepareContext(ctx, getListWayTagsByWayId); err != nil {
		return nil, fmt.Errorf("error preparing query GetListWayTagsByWayId: %w", err)
	}
	if q.getListWayTagsByWayIdsStmt, err = db.PrepareContext(ctx, getListWayTagsByWayIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetListWayTagsByWayIds: %w", err)
	}
	if q.getMentorUsersByWayIdStmt, err = db.PrepareContext(ctx, getMentorUsersByWayId); err != nil {
		return nil, fmt.Errorf("error preparing query GetMentorUsersByWayId: %w", err)
	}
	if q.getMentorUsersByWayIdsStmt, err = db.PrepareContext(ctx, getMentorUsersByWayIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetMentorUsersByWayIds: %w", err)
	}
	if q.getMentoringWaysByMentorIdStmt, err = db.PrepareContext(ctx, getMentoringWaysByMentorId); err != nil {
		return nil, fmt.Errorf("error preparing query GetMentoringWaysByMentorId: %w", err)
	}
	if q.getMentoringWaysCountByUserIdStmt, err = db.PrepareContext(ctx, getMentoringWaysCountByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetMentoringWaysCountByUserId: %w", err)
	}
	if q.getNestedEntitiesForDayReportsStmt, err = db.PrepareContext(ctx, getNestedEntitiesForDayReports); err != nil {
		return nil, fmt.Errorf("error preparing query GetNestedEntitiesForDayReports: %w", err)
	}
	if q.getOwnWaysByUserIdStmt, err = db.PrepareContext(ctx, getOwnWaysByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetOwnWaysByUserId: %w", err)
	}
	if q.getOwnWaysCountByUserIdStmt, err = db.PrepareContext(ctx, getOwnWaysCountByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetOwnWaysCountByUserId: %w", err)
	}
	if q.getPlansByDayReportUuidsStmt, err = db.PrepareContext(ctx, getPlansByDayReportUuids); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlansByDayReportUuids: %w", err)
	}
	if q.getPricingPlanByUserIdStmt, err = db.PrepareContext(ctx, getPricingPlanByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetPricingPlanByUserId: %w", err)
	}
	if q.getPrivateWaysCountByUserIdStmt, err = db.PrepareContext(ctx, getPrivateWaysCountByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetPrivateWaysCountByUserId: %w", err)
	}
	if q.getProblemsByDayReportUuidsStmt, err = db.PrepareContext(ctx, getProblemsByDayReportUuids); err != nil {
		return nil, fmt.Errorf("error preparing query GetProblemsByDayReportUuids: %w", err)
	}
	if q.getTagsCountByUserIdStmt, err = db.PrepareContext(ctx, getTagsCountByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagsCountByUserId: %w", err)
	}
	if q.getToMentorUserRequestsByWayIdStmt, err = db.PrepareContext(ctx, getToMentorUserRequestsByWayId); err != nil {
		return nil, fmt.Errorf("error preparing query GetToMentorUserRequestsByWayId: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUserByIdsStmt, err = db.PrepareContext(ctx, getUserByIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByIds: %w", err)
	}
	if q.getUserTagByNameStmt, err = db.PrepareContext(ctx, getUserTagByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserTagByName: %w", err)
	}
	if q.getWayByIdStmt, err = db.PrepareContext(ctx, getWayById); err != nil {
		return nil, fmt.Errorf("error preparing query GetWayById: %w", err)
	}
	if q.getWayCollectionJoinWayByUserIdStmt, err = db.PrepareContext(ctx, getWayCollectionJoinWayByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetWayCollectionJoinWayByUserId: %w", err)
	}
	if q.getWayCollectionsByUserIdStmt, err = db.PrepareContext(ctx, getWayCollectionsByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetWayCollectionsByUserId: %w", err)
	}
	if q.getWayCollectionsCountByUserIdStmt, err = db.PrepareContext(ctx, getWayCollectionsCountByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetWayCollectionsCountByUserId: %w", err)
	}
	if q.getWayTagByNameStmt, err = db.PrepareContext(ctx, getWayTagByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetWayTagByName: %w", err)
	}
	if q.getWaysByCollectionIdStmt, err = db.PrepareContext(ctx, getWaysByCollectionId); err != nil {
		return nil, fmt.Errorf("error preparing query GetWaysByCollectionId: %w", err)
	}
	if q.isAllMetricsDoneStmt, err = db.PrepareContext(ctx, isAllMetricsDone); err != nil {
		return nil, fmt.Errorf("error preparing query IsAllMetricsDone: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.listWaysStmt, err = db.PrepareContext(ctx, listWays); err != nil {
		return nil, fmt.Errorf("error preparing query ListWays: %w", err)
	}
	if q.updateCommentStmt, err = db.PrepareContext(ctx, updateComment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateComment: %w", err)
	}
	if q.updateDayReportStmt, err = db.PrepareContext(ctx, updateDayReport); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDayReport: %w", err)
	}
	if q.updateJobDoneStmt, err = db.PrepareContext(ctx, updateJobDone); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJobDone: %w", err)
	}
	if q.updateJobTagStmt, err = db.PrepareContext(ctx, updateJobTag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJobTag: %w", err)
	}
	if q.updateMetricStmt, err = db.PrepareContext(ctx, updateMetric); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMetric: %w", err)
	}
	if q.updatePlanStmt, err = db.PrepareContext(ctx, updatePlan); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePlan: %w", err)
	}
	if q.updatePricingPlanByUserIdStmt, err = db.PrepareContext(ctx, updatePricingPlanByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePricingPlanByUserId: %w", err)
	}
	if q.updateProblemStmt, err = db.PrepareContext(ctx, updateProblem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProblem: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateWayStmt, err = db.PrepareContext(ctx, updateWay); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWay: %w", err)
	}
	if q.updateWayCollectionStmt, err = db.PrepareContext(ctx, updateWayCollection); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWayCollection: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addWayToCompositeWayStmt != nil {
		if cerr := q.addWayToCompositeWayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addWayToCompositeWayStmt: %w", cerr)
		}
	}
	if q.countUsersStmt != nil {
		if cerr := q.countUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersStmt: %w", cerr)
		}
	}
	if q.countWaysByTypeStmt != nil {
		if cerr := q.countWaysByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countWaysByTypeStmt: %w", cerr)
		}
	}
	if q.createCommentStmt != nil {
		if cerr := q.createCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCommentStmt: %w", cerr)
		}
	}
	if q.createDayReportStmt != nil {
		if cerr := q.createDayReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDayReportStmt: %w", cerr)
		}
	}
	if q.createFavoriteUserStmt != nil {
		if cerr := q.createFavoriteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFavoriteUserStmt: %w", cerr)
		}
	}
	if q.createFavoriteUserWayStmt != nil {
		if cerr := q.createFavoriteUserWayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFavoriteUserWayStmt: %w", cerr)
		}
	}
	if q.createFormerMentorsWayStmt != nil {
		if cerr := q.createFormerMentorsWayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFormerMentorsWayStmt: %w", cerr)
		}
	}
	if q.createFromUserMentoringRequestStmt != nil {
		if cerr := q.createFromUserMentoringRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFromUserMentoringRequestStmt: %w", cerr)
		}
	}
	if q.createJobDoneStmt != nil {
		if cerr := q.createJobDoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobDoneStmt: %w", cerr)
		}
	}
	if q.createJobDonesJobTagStmt != nil {
		if cerr := q.createJobDonesJobTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobDonesJobTagStmt: %w", cerr)
		}
	}
	if q.createJobTagStmt != nil {
		if cerr := q.createJobTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobTagStmt: %w", cerr)
		}
	}
	if q.createMentorUserWayStmt != nil {
		if cerr := q.createMentorUserWayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMentorUserWayStmt: %w", cerr)
		}
	}
	if q.createMetricStmt != nil {
		if cerr := q.createMetricStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMetricStmt: %w", cerr)
		}
	}
	if q.createPlanStmt != nil {
		if cerr := q.createPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlanStmt: %w", cerr)
		}
	}
	if q.createPlansJobTagStmt != nil {
		if cerr := q.createPlansJobTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlansJobTagStmt: %w", cerr)
		}
	}
	if q.createProblemStmt != nil {
		if cerr := q.createProblemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProblemStmt: %w", cerr)
		}
	}
	if q.createProblemsJobTagStmt != nil {
		if cerr := q.createProblemsJobTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProblemsJobTagStmt: %w", cerr)
		}
	}
	if q.createToUserMentoringRequestStmt != nil {
		if cerr := q.createToUserMentoringRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createToUserMentoringRequestStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserTagStmt != nil {
		if cerr := q.createUserTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserTagStmt: %w", cerr)
		}
	}
	if q.createUsersUserTagStmt != nil {
		if cerr := q.createUsersUserTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUsersUserTagStmt: %w", cerr)
		}
	}
	if q.createWayStmt != nil {
		if cerr := q.createWayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWayStmt: %w", cerr)
		}
	}
	if q.createWayCollectionStmt != nil {
		if cerr := q.createWayCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWayCollectionStmt: %w", cerr)
		}
	}
	if q.createWayCollectionsWaysStmt != nil {
		if cerr := q.createWayCollectionsWaysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWayCollectionsWaysStmt: %w", cerr)
		}
	}
	if q.createWayTagStmt != nil {
		if cerr := q.createWayTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWayTagStmt: %w", cerr)
		}
	}
	if q.createWaysWayTagStmt != nil {
		if cerr := q.createWaysWayTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWaysWayTagStmt: %w", cerr)
		}
	}
	if q.deleteCommentStmt != nil {
		if cerr := q.deleteCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCommentStmt: %w", cerr)
		}
	}
	if q.deleteFavoriteUserByIdsStmt != nil {
		if cerr := q.deleteFavoriteUserByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFavoriteUserByIdsStmt: %w", cerr)
		}
	}
	if q.deleteFavoriteUserWayByIdsStmt != nil {
		if cerr := q.deleteFavoriteUserWayByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFavoriteUserWayByIdsStmt: %w", cerr)
		}
	}
	if q.deleteFormerMentorWayIfExistStmt != nil {
		if cerr := q.deleteFormerMentorWayIfExistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFormerMentorWayIfExistStmt: %w", cerr)
		}
	}
	if q.deleteFromUserMentoringRequestStmt != nil {
		if cerr := q.deleteFromUserMentoringRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFromUserMentoringRequestStmt: %w", cerr)
		}
	}
	if q.deleteJobDoneStmt != nil {
		if cerr := q.deleteJobDoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobDoneStmt: %w", cerr)
		}
	}
	if q.deleteJobDonesJobTagByJobDoneIdStmt != nil {
		if cerr := q.deleteJobDonesJobTagByJobDoneIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobDonesJobTagByJobDoneIdStmt: %w", cerr)
		}
	}
	if q.deleteJobTagByIdStmt != nil {
		if cerr := q.deleteJobTagByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobTagByIdStmt: %w", cerr)
		}
	}
	if q.deleteMentorUserWayByIdsStmt != nil {
		if cerr := q.deleteMentorUserWayByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMentorUserWayByIdsStmt: %w", cerr)
		}
	}
	if q.deleteMetricStmt != nil {
		if cerr := q.deleteMetricStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMetricStmt: %w", cerr)
		}
	}
	if q.deletePlanStmt != nil {
		if cerr := q.deletePlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePlanStmt: %w", cerr)
		}
	}
	if q.deletePlansJobTagByIdsStmt != nil {
		if cerr := q.deletePlansJobTagByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePlansJobTagByIdsStmt: %w", cerr)
		}
	}
	if q.deleteProblemStmt != nil {
		if cerr := q.deleteProblemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProblemStmt: %w", cerr)
		}
	}
	if q.deleteProblemsJobTagByIdsStmt != nil {
		if cerr := q.deleteProblemsJobTagByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProblemsJobTagByIdsStmt: %w", cerr)
		}
	}
	if q.deleteToUserMentoringRequestByIdsStmt != nil {
		if cerr := q.deleteToUserMentoringRequestByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteToUserMentoringRequestByIdsStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserTagFromUserStmt != nil {
		if cerr := q.deleteUserTagFromUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserTagFromUserStmt: %w", cerr)
		}
	}
	if q.deleteWayStmt != nil {
		if cerr := q.deleteWayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWayStmt: %w", cerr)
		}
	}
	if q.deleteWayCollectionStmt != nil {
		if cerr := q.deleteWayCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWayCollectionStmt: %w", cerr)
		}
	}
	if q.deleteWayCollectionsWaysByIdsStmt != nil {
		if cerr := q.deleteWayCollectionsWaysByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWayCollectionsWaysByIdsStmt: %w", cerr)
		}
	}
	if q.deleteWayFromCompositeWayStmt != nil {
		if cerr := q.deleteWayFromCompositeWayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWayFromCompositeWayStmt: %w", cerr)
		}
	}
	if q.deleteWayTagFromWayStmt != nil {
		if cerr := q.deleteWayTagFromWayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWayTagFromWayStmt: %w", cerr)
		}
	}
	if q.getBasePopulatedWayByIDStmt != nil {
		if cerr := q.getBasePopulatedWayByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBasePopulatedWayByIDStmt: %w", cerr)
		}
	}
	if q.getDayReportsCountByWayIdStmt != nil {
		if cerr := q.getDayReportsCountByWayIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDayReportsCountByWayIdStmt: %w", cerr)
		}
	}
	if q.getFavoriteForUserUuidsByWayIdStmt != nil {
		if cerr := q.getFavoriteForUserUuidsByWayIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFavoriteForUserUuidsByWayIdStmt: %w", cerr)
		}
	}
	if q.getFavoriteUserByDonorUserIdStmt != nil {
		if cerr := q.getFavoriteUserByDonorUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFavoriteUserByDonorUserIdStmt: %w", cerr)
		}
	}
	if q.getFavoriteUserUuidsByAcceptorUserIdStmt != nil {
		if cerr := q.getFavoriteUserUuidsByAcceptorUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFavoriteUserUuidsByAcceptorUserIdStmt: %w", cerr)
		}
	}
	if q.getFavoriteWaysByUserIdStmt != nil {
		if cerr := q.getFavoriteWaysByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFavoriteWaysByUserIdStmt: %w", cerr)
		}
	}
	if q.getFormerMentorUsersByWayIdStmt != nil {
		if cerr := q.getFormerMentorUsersByWayIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFormerMentorUsersByWayIdStmt: %w", cerr)
		}
	}
	if q.getFromUserMentoringRequestWaysByUserIdStmt != nil {
		if cerr := q.getFromUserMentoringRequestWaysByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFromUserMentoringRequestWaysByUserIdStmt: %w", cerr)
		}
	}
	if q.getFromUserMentoringRequestWaysByWayIdStmt != nil {
		if cerr := q.getFromUserMentoringRequestWaysByWayIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFromUserMentoringRequestWaysByWayIdStmt: %w", cerr)
		}
	}
	if q.getJobDonesByDayReportUuidsStmt != nil {
		if cerr := q.getJobDonesByDayReportUuidsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobDonesByDayReportUuidsStmt: %w", cerr)
		}
	}
	if q.getJobTagByUuidStmt != nil {
		if cerr := q.getJobTagByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobTagByUuidStmt: %w", cerr)
		}
	}
	if q.getListCommentsByDayReportUuidsStmt != nil {
		if cerr := q.getListCommentsByDayReportUuidsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListCommentsByDayReportUuidsStmt: %w", cerr)
		}
	}
	if q.getListDayReportsByWayUuidStmt != nil {
		if cerr := q.getListDayReportsByWayUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListDayReportsByWayUuidStmt: %w", cerr)
		}
	}
	if q.getListJobTagsByWayUuidStmt != nil {
		if cerr := q.getListJobTagsByWayUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListJobTagsByWayUuidStmt: %w", cerr)
		}
	}
	if q.getListJobTagsByWayUuidsStmt != nil {
		if cerr := q.getListJobTagsByWayUuidsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListJobTagsByWayUuidsStmt: %w", cerr)
		}
	}
	if q.getListJobsDoneByDayReportIdStmt != nil {
		if cerr := q.getListJobsDoneByDayReportIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListJobsDoneByDayReportIdStmt: %w", cerr)
		}
	}
	if q.getListLabelsByLabelUuidsStmt != nil {
		if cerr := q.getListLabelsByLabelUuidsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListLabelsByLabelUuidsStmt: %w", cerr)
		}
	}
	if q.getListMetricsByWayUuidStmt != nil {
		if cerr := q.getListMetricsByWayUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListMetricsByWayUuidStmt: %w", cerr)
		}
	}
	if q.getListPlansByDayReportIdStmt != nil {
		if cerr := q.getListPlansByDayReportIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListPlansByDayReportIdStmt: %w", cerr)
		}
	}
	if q.getListProblemsByDayReportIdStmt != nil {
		if cerr := q.getListProblemsByDayReportIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListProblemsByDayReportIdStmt: %w", cerr)
		}
	}
	if q.getListUserTagsByUserIdStmt != nil {
		if cerr := q.getListUserTagsByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListUserTagsByUserIdStmt: %w", cerr)
		}
	}
	if q.getListWayCollectionsByUserIdStmt != nil {
		if cerr := q.getListWayCollectionsByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListWayCollectionsByUserIdStmt: %w", cerr)
		}
	}
	if q.getListWayTagsByWayIdStmt != nil {
		if cerr := q.getListWayTagsByWayIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListWayTagsByWayIdStmt: %w", cerr)
		}
	}
	if q.getListWayTagsByWayIdsStmt != nil {
		if cerr := q.getListWayTagsByWayIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListWayTagsByWayIdsStmt: %w", cerr)
		}
	}
	if q.getMentorUsersByWayIdStmt != nil {
		if cerr := q.getMentorUsersByWayIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMentorUsersByWayIdStmt: %w", cerr)
		}
	}
	if q.getMentorUsersByWayIdsStmt != nil {
		if cerr := q.getMentorUsersByWayIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMentorUsersByWayIdsStmt: %w", cerr)
		}
	}
	if q.getMentoringWaysByMentorIdStmt != nil {
		if cerr := q.getMentoringWaysByMentorIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMentoringWaysByMentorIdStmt: %w", cerr)
		}
	}
	if q.getMentoringWaysCountByUserIdStmt != nil {
		if cerr := q.getMentoringWaysCountByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMentoringWaysCountByUserIdStmt: %w", cerr)
		}
	}
	if q.getNestedEntitiesForDayReportsStmt != nil {
		if cerr := q.getNestedEntitiesForDayReportsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNestedEntitiesForDayReportsStmt: %w", cerr)
		}
	}
	if q.getOwnWaysByUserIdStmt != nil {
		if cerr := q.getOwnWaysByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOwnWaysByUserIdStmt: %w", cerr)
		}
	}
	if q.getOwnWaysCountByUserIdStmt != nil {
		if cerr := q.getOwnWaysCountByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOwnWaysCountByUserIdStmt: %w", cerr)
		}
	}
	if q.getPlansByDayReportUuidsStmt != nil {
		if cerr := q.getPlansByDayReportUuidsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlansByDayReportUuidsStmt: %w", cerr)
		}
	}
	if q.getPricingPlanByUserIdStmt != nil {
		if cerr := q.getPricingPlanByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPricingPlanByUserIdStmt: %w", cerr)
		}
	}
	if q.getPrivateWaysCountByUserIdStmt != nil {
		if cerr := q.getPrivateWaysCountByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPrivateWaysCountByUserIdStmt: %w", cerr)
		}
	}
	if q.getProblemsByDayReportUuidsStmt != nil {
		if cerr := q.getProblemsByDayReportUuidsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProblemsByDayReportUuidsStmt: %w", cerr)
		}
	}
	if q.getTagsCountByUserIdStmt != nil {
		if cerr := q.getTagsCountByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsCountByUserIdStmt: %w", cerr)
		}
	}
	if q.getToMentorUserRequestsByWayIdStmt != nil {
		if cerr := q.getToMentorUserRequestsByWayIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getToMentorUserRequestsByWayIdStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUserByIdsStmt != nil {
		if cerr := q.getUserByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdsStmt: %w", cerr)
		}
	}
	if q.getUserTagByNameStmt != nil {
		if cerr := q.getUserTagByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserTagByNameStmt: %w", cerr)
		}
	}
	if q.getWayByIdStmt != nil {
		if cerr := q.getWayByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWayByIdStmt: %w", cerr)
		}
	}
	if q.getWayCollectionJoinWayByUserIdStmt != nil {
		if cerr := q.getWayCollectionJoinWayByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWayCollectionJoinWayByUserIdStmt: %w", cerr)
		}
	}
	if q.getWayCollectionsByUserIdStmt != nil {
		if cerr := q.getWayCollectionsByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWayCollectionsByUserIdStmt: %w", cerr)
		}
	}
	if q.getWayCollectionsCountByUserIdStmt != nil {
		if cerr := q.getWayCollectionsCountByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWayCollectionsCountByUserIdStmt: %w", cerr)
		}
	}
	if q.getWayTagByNameStmt != nil {
		if cerr := q.getWayTagByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWayTagByNameStmt: %w", cerr)
		}
	}
	if q.getWaysByCollectionIdStmt != nil {
		if cerr := q.getWaysByCollectionIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWaysByCollectionIdStmt: %w", cerr)
		}
	}
	if q.isAllMetricsDoneStmt != nil {
		if cerr := q.isAllMetricsDoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isAllMetricsDoneStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.listWaysStmt != nil {
		if cerr := q.listWaysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWaysStmt: %w", cerr)
		}
	}
	if q.updateCommentStmt != nil {
		if cerr := q.updateCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCommentStmt: %w", cerr)
		}
	}
	if q.updateDayReportStmt != nil {
		if cerr := q.updateDayReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDayReportStmt: %w", cerr)
		}
	}
	if q.updateJobDoneStmt != nil {
		if cerr := q.updateJobDoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobDoneStmt: %w", cerr)
		}
	}
	if q.updateJobTagStmt != nil {
		if cerr := q.updateJobTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobTagStmt: %w", cerr)
		}
	}
	if q.updateMetricStmt != nil {
		if cerr := q.updateMetricStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMetricStmt: %w", cerr)
		}
	}
	if q.updatePlanStmt != nil {
		if cerr := q.updatePlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePlanStmt: %w", cerr)
		}
	}
	if q.updatePricingPlanByUserIdStmt != nil {
		if cerr := q.updatePricingPlanByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePricingPlanByUserIdStmt: %w", cerr)
		}
	}
	if q.updateProblemStmt != nil {
		if cerr := q.updateProblemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProblemStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateWayStmt != nil {
		if cerr := q.updateWayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWayStmt: %w", cerr)
		}
	}
	if q.updateWayCollectionStmt != nil {
		if cerr := q.updateWayCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWayCollectionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                          DBTX
	tx                                          *sql.Tx
	addWayToCompositeWayStmt                    *sql.Stmt
	countUsersStmt                              *sql.Stmt
	countWaysByTypeStmt                         *sql.Stmt
	createCommentStmt                           *sql.Stmt
	createDayReportStmt                         *sql.Stmt
	createFavoriteUserStmt                      *sql.Stmt
	createFavoriteUserWayStmt                   *sql.Stmt
	createFormerMentorsWayStmt                  *sql.Stmt
	createFromUserMentoringRequestStmt          *sql.Stmt
	createJobDoneStmt                           *sql.Stmt
	createJobDonesJobTagStmt                    *sql.Stmt
	createJobTagStmt                            *sql.Stmt
	createMentorUserWayStmt                     *sql.Stmt
	createMetricStmt                            *sql.Stmt
	createPlanStmt                              *sql.Stmt
	createPlansJobTagStmt                       *sql.Stmt
	createProblemStmt                           *sql.Stmt
	createProblemsJobTagStmt                    *sql.Stmt
	createToUserMentoringRequestStmt            *sql.Stmt
	createUserStmt                              *sql.Stmt
	createUserTagStmt                           *sql.Stmt
	createUsersUserTagStmt                      *sql.Stmt
	createWayStmt                               *sql.Stmt
	createWayCollectionStmt                     *sql.Stmt
	createWayCollectionsWaysStmt                *sql.Stmt
	createWayTagStmt                            *sql.Stmt
	createWaysWayTagStmt                        *sql.Stmt
	deleteCommentStmt                           *sql.Stmt
	deleteFavoriteUserByIdsStmt                 *sql.Stmt
	deleteFavoriteUserWayByIdsStmt              *sql.Stmt
	deleteFormerMentorWayIfExistStmt            *sql.Stmt
	deleteFromUserMentoringRequestStmt          *sql.Stmt
	deleteJobDoneStmt                           *sql.Stmt
	deleteJobDonesJobTagByJobDoneIdStmt         *sql.Stmt
	deleteJobTagByIdStmt                        *sql.Stmt
	deleteMentorUserWayByIdsStmt                *sql.Stmt
	deleteMetricStmt                            *sql.Stmt
	deletePlanStmt                              *sql.Stmt
	deletePlansJobTagByIdsStmt                  *sql.Stmt
	deleteProblemStmt                           *sql.Stmt
	deleteProblemsJobTagByIdsStmt               *sql.Stmt
	deleteToUserMentoringRequestByIdsStmt       *sql.Stmt
	deleteUserStmt                              *sql.Stmt
	deleteUserTagFromUserStmt                   *sql.Stmt
	deleteWayStmt                               *sql.Stmt
	deleteWayCollectionStmt                     *sql.Stmt
	deleteWayCollectionsWaysByIdsStmt           *sql.Stmt
	deleteWayFromCompositeWayStmt               *sql.Stmt
	deleteWayTagFromWayStmt                     *sql.Stmt
	getBasePopulatedWayByIDStmt                 *sql.Stmt
	getDayReportsCountByWayIdStmt               *sql.Stmt
	getFavoriteForUserUuidsByWayIdStmt          *sql.Stmt
	getFavoriteUserByDonorUserIdStmt            *sql.Stmt
	getFavoriteUserUuidsByAcceptorUserIdStmt    *sql.Stmt
	getFavoriteWaysByUserIdStmt                 *sql.Stmt
	getFormerMentorUsersByWayIdStmt             *sql.Stmt
	getFromUserMentoringRequestWaysByUserIdStmt *sql.Stmt
	getFromUserMentoringRequestWaysByWayIdStmt  *sql.Stmt
	getJobDonesByDayReportUuidsStmt             *sql.Stmt
	getJobTagByUuidStmt                         *sql.Stmt
	getListCommentsByDayReportUuidsStmt         *sql.Stmt
	getListDayReportsByWayUuidStmt              *sql.Stmt
	getListJobTagsByWayUuidStmt                 *sql.Stmt
	getListJobTagsByWayUuidsStmt                *sql.Stmt
	getListJobsDoneByDayReportIdStmt            *sql.Stmt
	getListLabelsByLabelUuidsStmt               *sql.Stmt
	getListMetricsByWayUuidStmt                 *sql.Stmt
	getListPlansByDayReportIdStmt               *sql.Stmt
	getListProblemsByDayReportIdStmt            *sql.Stmt
	getListUserTagsByUserIdStmt                 *sql.Stmt
	getListWayCollectionsByUserIdStmt           *sql.Stmt
	getListWayTagsByWayIdStmt                   *sql.Stmt
	getListWayTagsByWayIdsStmt                  *sql.Stmt
	getMentorUsersByWayIdStmt                   *sql.Stmt
	getMentorUsersByWayIdsStmt                  *sql.Stmt
	getMentoringWaysByMentorIdStmt              *sql.Stmt
	getMentoringWaysCountByUserIdStmt           *sql.Stmt
	getNestedEntitiesForDayReportsStmt          *sql.Stmt
	getOwnWaysByUserIdStmt                      *sql.Stmt
	getOwnWaysCountByUserIdStmt                 *sql.Stmt
	getPlansByDayReportUuidsStmt                *sql.Stmt
	getPricingPlanByUserIdStmt                  *sql.Stmt
	getPrivateWaysCountByUserIdStmt             *sql.Stmt
	getProblemsByDayReportUuidsStmt             *sql.Stmt
	getTagsCountByUserIdStmt                    *sql.Stmt
	getToMentorUserRequestsByWayIdStmt          *sql.Stmt
	getUserByEmailStmt                          *sql.Stmt
	getUserByIdStmt                             *sql.Stmt
	getUserByIdsStmt                            *sql.Stmt
	getUserTagByNameStmt                        *sql.Stmt
	getWayByIdStmt                              *sql.Stmt
	getWayCollectionJoinWayByUserIdStmt         *sql.Stmt
	getWayCollectionsByUserIdStmt               *sql.Stmt
	getWayCollectionsCountByUserIdStmt          *sql.Stmt
	getWayTagByNameStmt                         *sql.Stmt
	getWaysByCollectionIdStmt                   *sql.Stmt
	isAllMetricsDoneStmt                        *sql.Stmt
	listUsersStmt                               *sql.Stmt
	listWaysStmt                                *sql.Stmt
	updateCommentStmt                           *sql.Stmt
	updateDayReportStmt                         *sql.Stmt
	updateJobDoneStmt                           *sql.Stmt
	updateJobTagStmt                            *sql.Stmt
	updateMetricStmt                            *sql.Stmt
	updatePlanStmt                              *sql.Stmt
	updatePricingPlanByUserIdStmt               *sql.Stmt
	updateProblemStmt                           *sql.Stmt
	updateUserStmt                              *sql.Stmt
	updateWayStmt                               *sql.Stmt
	updateWayCollectionStmt                     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                          tx,
		tx:                                          tx,
		addWayToCompositeWayStmt:                    q.addWayToCompositeWayStmt,
		countUsersStmt:                              q.countUsersStmt,
		countWaysByTypeStmt:                         q.countWaysByTypeStmt,
		createCommentStmt:                           q.createCommentStmt,
		createDayReportStmt:                         q.createDayReportStmt,
		createFavoriteUserStmt:                      q.createFavoriteUserStmt,
		createFavoriteUserWayStmt:                   q.createFavoriteUserWayStmt,
		createFormerMentorsWayStmt:                  q.createFormerMentorsWayStmt,
		createFromUserMentoringRequestStmt:          q.createFromUserMentoringRequestStmt,
		createJobDoneStmt:                           q.createJobDoneStmt,
		createJobDonesJobTagStmt:                    q.createJobDonesJobTagStmt,
		createJobTagStmt:                            q.createJobTagStmt,
		createMentorUserWayStmt:                     q.createMentorUserWayStmt,
		createMetricStmt:                            q.createMetricStmt,
		createPlanStmt:                              q.createPlanStmt,
		createPlansJobTagStmt:                       q.createPlansJobTagStmt,
		createProblemStmt:                           q.createProblemStmt,
		createProblemsJobTagStmt:                    q.createProblemsJobTagStmt,
		createToUserMentoringRequestStmt:            q.createToUserMentoringRequestStmt,
		createUserStmt:                              q.createUserStmt,
		createUserTagStmt:                           q.createUserTagStmt,
		createUsersUserTagStmt:                      q.createUsersUserTagStmt,
		createWayStmt:                               q.createWayStmt,
		createWayCollectionStmt:                     q.createWayCollectionStmt,
		createWayCollectionsWaysStmt:                q.createWayCollectionsWaysStmt,
		createWayTagStmt:                            q.createWayTagStmt,
		createWaysWayTagStmt:                        q.createWaysWayTagStmt,
		deleteCommentStmt:                           q.deleteCommentStmt,
		deleteFavoriteUserByIdsStmt:                 q.deleteFavoriteUserByIdsStmt,
		deleteFavoriteUserWayByIdsStmt:              q.deleteFavoriteUserWayByIdsStmt,
		deleteFormerMentorWayIfExistStmt:            q.deleteFormerMentorWayIfExistStmt,
		deleteFromUserMentoringRequestStmt:          q.deleteFromUserMentoringRequestStmt,
		deleteJobDoneStmt:                           q.deleteJobDoneStmt,
		deleteJobDonesJobTagByJobDoneIdStmt:         q.deleteJobDonesJobTagByJobDoneIdStmt,
		deleteJobTagByIdStmt:                        q.deleteJobTagByIdStmt,
		deleteMentorUserWayByIdsStmt:                q.deleteMentorUserWayByIdsStmt,
		deleteMetricStmt:                            q.deleteMetricStmt,
		deletePlanStmt:                              q.deletePlanStmt,
		deletePlansJobTagByIdsStmt:                  q.deletePlansJobTagByIdsStmt,
		deleteProblemStmt:                           q.deleteProblemStmt,
		deleteProblemsJobTagByIdsStmt:               q.deleteProblemsJobTagByIdsStmt,
		deleteToUserMentoringRequestByIdsStmt:       q.deleteToUserMentoringRequestByIdsStmt,
		deleteUserStmt:                              q.deleteUserStmt,
		deleteUserTagFromUserStmt:                   q.deleteUserTagFromUserStmt,
		deleteWayStmt:                               q.deleteWayStmt,
		deleteWayCollectionStmt:                     q.deleteWayCollectionStmt,
		deleteWayCollectionsWaysByIdsStmt:           q.deleteWayCollectionsWaysByIdsStmt,
		deleteWayFromCompositeWayStmt:               q.deleteWayFromCompositeWayStmt,
		deleteWayTagFromWayStmt:                     q.deleteWayTagFromWayStmt,
		getBasePopulatedWayByIDStmt:                 q.getBasePopulatedWayByIDStmt,
		getDayReportsCountByWayIdStmt:               q.getDayReportsCountByWayIdStmt,
		getFavoriteForUserUuidsByWayIdStmt:          q.getFavoriteForUserUuidsByWayIdStmt,
		getFavoriteUserByDonorUserIdStmt:            q.getFavoriteUserByDonorUserIdStmt,
		getFavoriteUserUuidsByAcceptorUserIdStmt:    q.getFavoriteUserUuidsByAcceptorUserIdStmt,
		getFavoriteWaysByUserIdStmt:                 q.getFavoriteWaysByUserIdStmt,
		getFormerMentorUsersByWayIdStmt:             q.getFormerMentorUsersByWayIdStmt,
		getFromUserMentoringRequestWaysByUserIdStmt: q.getFromUserMentoringRequestWaysByUserIdStmt,
		getFromUserMentoringRequestWaysByWayIdStmt:  q.getFromUserMentoringRequestWaysByWayIdStmt,
		getJobDonesByDayReportUuidsStmt:             q.getJobDonesByDayReportUuidsStmt,
		getJobTagByUuidStmt:                         q.getJobTagByUuidStmt,
		getListCommentsByDayReportUuidsStmt:         q.getListCommentsByDayReportUuidsStmt,
		getListDayReportsByWayUuidStmt:              q.getListDayReportsByWayUuidStmt,
		getListJobTagsByWayUuidStmt:                 q.getListJobTagsByWayUuidStmt,
		getListJobTagsByWayUuidsStmt:                q.getListJobTagsByWayUuidsStmt,
		getListJobsDoneByDayReportIdStmt:            q.getListJobsDoneByDayReportIdStmt,
		getListLabelsByLabelUuidsStmt:               q.getListLabelsByLabelUuidsStmt,
		getListMetricsByWayUuidStmt:                 q.getListMetricsByWayUuidStmt,
		getListPlansByDayReportIdStmt:               q.getListPlansByDayReportIdStmt,
		getListProblemsByDayReportIdStmt:            q.getListProblemsByDayReportIdStmt,
		getListUserTagsByUserIdStmt:                 q.getListUserTagsByUserIdStmt,
		getListWayCollectionsByUserIdStmt:           q.getListWayCollectionsByUserIdStmt,
		getListWayTagsByWayIdStmt:                   q.getListWayTagsByWayIdStmt,
		getListWayTagsByWayIdsStmt:                  q.getListWayTagsByWayIdsStmt,
		getMentorUsersByWayIdStmt:                   q.getMentorUsersByWayIdStmt,
		getMentorUsersByWayIdsStmt:                  q.getMentorUsersByWayIdsStmt,
		getMentoringWaysByMentorIdStmt:              q.getMentoringWaysByMentorIdStmt,
		getMentoringWaysCountByUserIdStmt:           q.getMentoringWaysCountByUserIdStmt,
		getNestedEntitiesForDayReportsStmt:          q.getNestedEntitiesForDayReportsStmt,
		getOwnWaysByUserIdStmt:                      q.getOwnWaysByUserIdStmt,
		getOwnWaysCountByUserIdStmt:                 q.getOwnWaysCountByUserIdStmt,
		getPlansByDayReportUuidsStmt:                q.getPlansByDayReportUuidsStmt,
		getPricingPlanByUserIdStmt:                  q.getPricingPlanByUserIdStmt,
		getPrivateWaysCountByUserIdStmt:             q.getPrivateWaysCountByUserIdStmt,
		getProblemsByDayReportUuidsStmt:             q.getProblemsByDayReportUuidsStmt,
		getTagsCountByUserIdStmt:                    q.getTagsCountByUserIdStmt,
		getToMentorUserRequestsByWayIdStmt:          q.getToMentorUserRequestsByWayIdStmt,
		getUserByEmailStmt:                          q.getUserByEmailStmt,
		getUserByIdStmt:                             q.getUserByIdStmt,
		getUserByIdsStmt:                            q.getUserByIdsStmt,
		getUserTagByNameStmt:                        q.getUserTagByNameStmt,
		getWayByIdStmt:                              q.getWayByIdStmt,
		getWayCollectionJoinWayByUserIdStmt:         q.getWayCollectionJoinWayByUserIdStmt,
		getWayCollectionsByUserIdStmt:               q.getWayCollectionsByUserIdStmt,
		getWayCollectionsCountByUserIdStmt:          q.getWayCollectionsCountByUserIdStmt,
		getWayTagByNameStmt:                         q.getWayTagByNameStmt,
		getWaysByCollectionIdStmt:                   q.getWaysByCollectionIdStmt,
		isAllMetricsDoneStmt:                        q.isAllMetricsDoneStmt,
		listUsersStmt:                               q.listUsersStmt,
		listWaysStmt:                                q.listWaysStmt,
		updateCommentStmt:                           q.updateCommentStmt,
		updateDayReportStmt:                         q.updateDayReportStmt,
		updateJobDoneStmt:                           q.updateJobDoneStmt,
		updateJobTagStmt:                            q.updateJobTagStmt,
		updateMetricStmt:                            q.updateMetricStmt,
		updatePlanStmt:                              q.updatePlanStmt,
		updatePricingPlanByUserIdStmt:               q.updatePricingPlanByUserIdStmt,
		updateProblemStmt:                           q.updateProblemStmt,
		updateUserStmt:                              q.updateUserStmt,
		updateWayStmt:                               q.updateWayStmt,
		updateWayCollectionStmt:                     q.updateWayCollectionStmt,
	}
}
