// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: to_user_mentoring_requests.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createToUserMentoringRequest = `-- name: CreateToUserMentoringRequest :one
INSERT INTO to_user_mentoring_requests(
    user_uuid,
    way_uuid
) VALUES (
    $1,
    $2
) RETURNING user_uuid, way_uuid
`

type CreateToUserMentoringRequestParams struct {
	UserUuid pgtype.UUID `json:"user_uuid"`
	WayUuid  pgtype.UUID `json:"way_uuid"`
}

func (q *Queries) CreateToUserMentoringRequest(ctx context.Context, arg CreateToUserMentoringRequestParams) (ToUserMentoringRequest, error) {
	row := q.db.QueryRow(ctx, createToUserMentoringRequest, arg.UserUuid, arg.WayUuid)
	var i ToUserMentoringRequest
	err := row.Scan(&i.UserUuid, &i.WayUuid)
	return i, err
}

const deleteToUserMentoringRequestByIds = `-- name: DeleteToUserMentoringRequestByIds :exec
DELETE FROM to_user_mentoring_requests
WHERE user_uuid = $1 AND way_uuid = $2
`

type DeleteToUserMentoringRequestByIdsParams struct {
	UserUuid pgtype.UUID `json:"user_uuid"`
	WayUuid  pgtype.UUID `json:"way_uuid"`
}

func (q *Queries) DeleteToUserMentoringRequestByIds(ctx context.Context, arg DeleteToUserMentoringRequestByIdsParams) error {
	_, err := q.db.Exec(ctx, deleteToUserMentoringRequestByIds, arg.UserUuid, arg.WayUuid)
	return err
}

const getToMentorUserRequestsByWayId = `-- name: GetToMentorUserRequestsByWayId :many
SELECT users.uuid from ways
JOIN to_user_mentoring_requests ON to_user_mentoring_requests.way_uuid = ways.uuid
JOIN users ON users.uuid = to_user_mentoring_requests.user_uuid
WHERE way_uuid = $1
`

func (q *Queries) GetToMentorUserRequestsByWayId(ctx context.Context, wayUuid pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getToMentorUserRequestsByWayId, wayUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var uuid pgtype.UUID
		if err := rows.Scan(&uuid); err != nil {
			return nil, err
		}
		items = append(items, uuid)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
