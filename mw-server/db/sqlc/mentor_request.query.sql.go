// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mentor_request.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMentorRequestByUserId = `-- name: GetMentorRequestByUserId :many
SELECT user_uuid, way_uuid, uuid, name, goal_description, updated_at, created_at, estimation_time, owner_uuid, copied_from_way_uuid, is_completed, is_private
FROM to_user_mentoring_requests
         JOIN ways ON to_user_mentoring_requests.way_uuid = ways.uuid
WHERE to_user_mentoring_requests.user_uuid = $1
`

type GetMentorRequestByUserIdRow struct {
	UserUuid          pgtype.UUID      `json:"user_uuid"`
	WayUuid           pgtype.UUID      `json:"way_uuid"`
	Uuid              pgtype.UUID      `json:"uuid"`
	Name              string           `json:"name"`
	GoalDescription   string           `json:"goal_description"`
	UpdatedAt         pgtype.Timestamp `json:"updated_at"`
	CreatedAt         pgtype.Timestamp `json:"created_at"`
	EstimationTime    int32            `json:"estimation_time"`
	OwnerUuid         pgtype.UUID      `json:"owner_uuid"`
	CopiedFromWayUuid pgtype.UUID      `json:"copied_from_way_uuid"`
	IsCompleted       bool             `json:"is_completed"`
	IsPrivate         bool             `json:"is_private"`
}

func (q *Queries) GetMentorRequestByUserId(ctx context.Context, userUuid pgtype.UUID) ([]GetMentorRequestByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getMentorRequestByUserId, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMentorRequestByUserIdRow{}
	for rows.Next() {
		var i GetMentorRequestByUserIdRow
		if err := rows.Scan(
			&i.UserUuid,
			&i.WayUuid,
			&i.Uuid,
			&i.Name,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.OwnerUuid,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
