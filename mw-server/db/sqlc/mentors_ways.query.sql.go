// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mentors_ways.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMentorUserWay = `-- name: CreateMentorUserWay :one
INSERT INTO mentor_users_ways(
    user_uuid,
    way_uuid
) VALUES (
    $1,
    $2
) RETURNING user_uuid, way_uuid
`

type CreateMentorUserWayParams struct {
	UserUuid pgtype.UUID `json:"user_uuid"`
	WayUuid  pgtype.UUID `json:"way_uuid"`
}

func (q *Queries) CreateMentorUserWay(ctx context.Context, arg CreateMentorUserWayParams) (MentorUsersWay, error) {
	row := q.db.QueryRow(ctx, createMentorUserWay, arg.UserUuid, arg.WayUuid)
	var i MentorUsersWay
	err := row.Scan(&i.UserUuid, &i.WayUuid)
	return i, err
}

const deleteMentorUserWayByIds = `-- name: DeleteMentorUserWayByIds :exec
DELETE FROM mentor_users_ways
WHERE user_uuid = $1 AND way_uuid = $2
`

type DeleteMentorUserWayByIdsParams struct {
	UserUuid pgtype.UUID `json:"user_uuid"`
	WayUuid  pgtype.UUID `json:"way_uuid"`
}

func (q *Queries) DeleteMentorUserWayByIds(ctx context.Context, arg DeleteMentorUserWayByIdsParams) error {
	_, err := q.db.Exec(ctx, deleteMentorUserWayByIds, arg.UserUuid, arg.WayUuid)
	return err
}

const getMentorUsersByWayId = `-- name: GetMentorUsersByWayId :many
SELECT
    users.uuid, users.name, users.email, users.description, users.created_at, users.image_url, users.is_mentor
FROM ways
JOIN mentor_users_ways ON mentor_users_ways.way_uuid = ways.uuid
JOIN users ON users.uuid = mentor_users_ways.user_uuid
WHERE way_uuid = $1
`

func (q *Queries) GetMentorUsersByWayId(ctx context.Context, wayUuid pgtype.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, getMentorUsersByWayId, wayUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Email,
			&i.Description,
			&i.CreatedAt,
			&i.ImageUrl,
			&i.IsMentor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMentorUsersByWayIds = `-- name: GetMentorUsersByWayIds :many
SELECT
    users.uuid, users.name, users.email, users.description, users.created_at, users.image_url, users.is_mentor,
    ways.uuid AS way_uuid
FROM ways
JOIN mentor_users_ways ON mentor_users_ways.way_uuid = ways.uuid
JOIN users ON users.uuid = mentor_users_ways.user_uuid
WHERE way_uuid = ANY($1::UUID[])
`

type GetMentorUsersByWayIdsRow struct {
	Uuid        pgtype.UUID      `json:"uuid"`
	Name        string           `json:"name"`
	Email       string           `json:"email"`
	Description string           `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	ImageUrl    string           `json:"image_url"`
	IsMentor    bool             `json:"is_mentor"`
	WayUuid     pgtype.UUID      `json:"way_uuid"`
}

func (q *Queries) GetMentorUsersByWayIds(ctx context.Context, wayUuids []pgtype.UUID) ([]GetMentorUsersByWayIdsRow, error) {
	rows, err := q.db.Query(ctx, getMentorUsersByWayIds, wayUuids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMentorUsersByWayIdsRow{}
	for rows.Next() {
		var i GetMentorUsersByWayIdsRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Email,
			&i.Description,
			&i.CreatedAt,
			&i.ImageUrl,
			&i.IsMentor,
			&i.WayUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMentoringWaysCountByUserId = `-- name: GetMentoringWaysCountByUserId :one
SELECT COUNT(*) AS mentoring_ways_count
FROM mentor_users_ways
WHERE user_uuid = $1
`

func (q *Queries) GetMentoringWaysCountByUserId(ctx context.Context, userUuid pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getMentoringWaysCountByUserId, userUuid)
	var mentoring_ways_count int64
	err := row.Scan(&mentoring_ways_count)
	return mentoring_ways_count, err
}
