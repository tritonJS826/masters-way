// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: job_dones_job_tags.query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createJobDonesJobTag = `-- name: CreateJobDonesJobTag :one
INSERT INTO job_dones_job_tags(
    job_done_uuid,
    job_tag_uuid
) VALUES (
    $1, $2
) RETURNING job_done_uuid, job_tag_uuid
`

type CreateJobDonesJobTagParams struct {
	JobDoneUuid uuid.UUID `json:"job_done_uuid"`
	JobTagUuid  uuid.UUID `json:"job_tag_uuid"`
}

func (q *Queries) CreateJobDonesJobTag(ctx context.Context, arg CreateJobDonesJobTagParams) (JobDonesJobTag, error) {
	row := q.queryRow(ctx, q.createJobDonesJobTagStmt, createJobDonesJobTag, arg.JobDoneUuid, arg.JobTagUuid)
	var i JobDonesJobTag
	err := row.Scan(&i.JobDoneUuid, &i.JobTagUuid)
	return i, err
}

const deleteJobDonesJobTagByJobDoneId = `-- name: DeleteJobDonesJobTagByJobDoneId :exec
DELETE FROM job_dones_job_tags
WHERE job_done_uuid = $1 
AND job_tag_uuid = $2
`

type DeleteJobDonesJobTagByJobDoneIdParams struct {
	JobDoneUuid uuid.UUID `json:"job_done_uuid"`
	JobTagUuid  uuid.UUID `json:"job_tag_uuid"`
}

func (q *Queries) DeleteJobDonesJobTagByJobDoneId(ctx context.Context, arg DeleteJobDonesJobTagByJobDoneIdParams) error {
	_, err := q.exec(ctx, q.deleteJobDonesJobTagByJobDoneIdStmt, deleteJobDonesJobTagByJobDoneId, arg.JobDoneUuid, arg.JobTagUuid)
	return err
}

const getJobDonesByDayReportUuids = `-- name: GetJobDonesByDayReportUuids :many
SELECT uuid, created_at, updated_at, description, time, owner_uuid, day_report_uuid FROM job_dones WHERE job_dones.day_report_uuid = ANY($1::UUID[])
`

func (q *Queries) GetJobDonesByDayReportUuids(ctx context.Context, dollar_1 []uuid.UUID) ([]JobDone, error) {
	rows, err := q.query(ctx, q.getJobDonesByDayReportUuidsStmt, getJobDonesByDayReportUuids, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobDone{}
	for rows.Next() {
		var i JobDone
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Time,
			&i.OwnerUuid,
			&i.DayReportUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobDonesJoinJobTags = `-- name: GetJobDonesJoinJobTags :many
SELECT job_dones.uuid, created_at, updated_at, job_dones.description, time, owner_uuid, day_report_uuid, job_done_uuid, job_tag_uuid, job_tags.uuid, name, job_tags.description, color, way_uuid FROM job_dones
JOIN job_dones_job_tags ON job_dones.uuid = job_dones_job_tags.job_done_uuid
JOIN job_tags ON job_dones_job_tags.job_tag_uuid = job_tags.uuid
WHERE job_dones.uuid IN (
    -- job dones uuids for day report 
    SELECT job_dones.uuid FROM job_dones 
    WHERE job_dones.day_report_uuid = $1
)
`

type GetJobDonesJoinJobTagsRow struct {
	Uuid          uuid.UUID `json:"uuid"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	Description   string    `json:"description"`
	Time          int32     `json:"time"`
	OwnerUuid     uuid.UUID `json:"owner_uuid"`
	DayReportUuid uuid.UUID `json:"day_report_uuid"`
	JobDoneUuid   uuid.UUID `json:"job_done_uuid"`
	JobTagUuid    uuid.UUID `json:"job_tag_uuid"`
	Uuid_2        uuid.UUID `json:"uuid_2"`
	Name          string    `json:"name"`
	Description_2 string    `json:"description_2"`
	Color         string    `json:"color"`
	WayUuid       uuid.UUID `json:"way_uuid"`
}

func (q *Queries) GetJobDonesJoinJobTags(ctx context.Context, dayReportUuid uuid.UUID) ([]GetJobDonesJoinJobTagsRow, error) {
	rows, err := q.query(ctx, q.getJobDonesJoinJobTagsStmt, getJobDonesJoinJobTags, dayReportUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetJobDonesJoinJobTagsRow{}
	for rows.Next() {
		var i GetJobDonesJoinJobTagsRow
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Time,
			&i.OwnerUuid,
			&i.DayReportUuid,
			&i.JobDoneUuid,
			&i.JobTagUuid,
			&i.Uuid_2,
			&i.Name,
			&i.Description_2,
			&i.Color,
			&i.WayUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
