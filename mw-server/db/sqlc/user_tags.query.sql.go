// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_tags.query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserTag = `-- name: CreateUserTag :one
INSERT INTO user_tags(
    name,
    owner_uuid
) VALUES (
    $1, $2
) RETURNING uuid, owner_uuid, name
`

type CreateUserTagParams struct {
	Name      string    `json:"name"`
	OwnerUuid uuid.UUID `json:"owner_uuid"`
}

func (q *Queries) CreateUserTag(ctx context.Context, arg CreateUserTagParams) (UserTag, error) {
	row := q.queryRow(ctx, q.createUserTagStmt, createUserTag, arg.Name, arg.OwnerUuid)
	var i UserTag
	err := row.Scan(&i.Uuid, &i.OwnerUuid, &i.Name)
	return i, err
}

const deleteUserTag = `-- name: DeleteUserTag :exec
DELETE FROM user_tags
WHERE uuid = $1
`

func (q *Queries) DeleteUserTag(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserTagStmt, deleteUserTag, argUuid)
	return err
}

const getListUserTagsByUserId = `-- name: GetListUserTagsByUserId :many
SELECT uuid, owner_uuid, name FROM user_tags
WHERE user_tags.owner_uuid = $1
ORDER BY uuid
`

func (q *Queries) GetListUserTagsByUserId(ctx context.Context, ownerUuid uuid.UUID) ([]UserTag, error) {
	rows, err := q.query(ctx, q.getListUserTagsByUserIdStmt, getListUserTagsByUserId, ownerUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserTag{}
	for rows.Next() {
		var i UserTag
		if err := rows.Scan(&i.Uuid, &i.OwnerUuid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserTag = `-- name: UpdateUserTag :one
UPDATE user_tags
SET
name = coalesce($1, name)
WHERE uuid = $2
RETURNING uuid, owner_uuid, name
`

type UpdateUserTagParams struct {
	Name sql.NullString `json:"name"`
	Uuid uuid.UUID      `json:"uuid"`
}

func (q *Queries) UpdateUserTag(ctx context.Context, arg UpdateUserTagParams) (UserTag, error) {
	row := q.queryRow(ctx, q.updateUserTagStmt, updateUserTag, arg.Name, arg.Uuid)
	var i UserTag
	err := row.Scan(&i.Uuid, &i.OwnerUuid, &i.Name)
	return i, err
}
