// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: problems.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProblem = `-- name: CreateProblem :one
INSERT INTO problems(
    created_at,
    updated_at,
    description,
    is_done,
    owner_uuid,
    day_report_uuid
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING uuid, created_at, updated_at, description, is_done, owner_uuid, day_report_uuid,
    (SELECT name FROM users WHERE uuid = $5) AS owner_name,
    -- get tag uuids
    COALESCE(
        ARRAY(
            SELECT problems_job_tags.job_tag_uuid
            FROM problems_job_tags
            WHERE problems.uuid = problems_job_tags.problem_uuid
        ),
        '{}'
    )::VARCHAR[] AS tag_uuids
`

type CreateProblemParams struct {
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	IsDone        bool             `json:"is_done"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
}

type CreateProblemRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	IsDone        bool             `json:"is_done"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	OwnerName     string           `json:"owner_name"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) CreateProblem(ctx context.Context, arg CreateProblemParams) (CreateProblemRow, error) {
	row := q.db.QueryRow(ctx, createProblem,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Description,
		arg.IsDone,
		arg.OwnerUuid,
		arg.DayReportUuid,
	)
	var i CreateProblemRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.IsDone,
		&i.OwnerUuid,
		&i.DayReportUuid,
		&i.OwnerName,
		&i.TagUuids,
	)
	return i, err
}

const deleteProblem = `-- name: DeleteProblem :exec
DELETE FROM problems
WHERE uuid = $1
`

func (q *Queries) DeleteProblem(ctx context.Context, problemUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProblem, problemUuid)
	return err
}

const getListProblemsByDayReportId = `-- name: GetListProblemsByDayReportId :many
SELECT uuid, created_at, updated_at, description, is_done, owner_uuid, day_report_uuid FROM problems
WHERE problems.day_report_uuid = $1
ORDER BY created_at
`

func (q *Queries) GetListProblemsByDayReportId(ctx context.Context, dayReportUuid pgtype.UUID) ([]Problem, error) {
	rows, err := q.db.Query(ctx, getListProblemsByDayReportId, dayReportUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Problem{}
	for rows.Next() {
		var i Problem
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.IsDone,
			&i.OwnerUuid,
			&i.DayReportUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProblem = `-- name: UpdateProblem :one
UPDATE problems
SET
updated_at = coalesce($1, updated_at),
description = coalesce($2, description),
is_done = coalesce($3, is_done)
WHERE problems.uuid = $4
RETURNING uuid, created_at, updated_at, description, is_done, owner_uuid, day_report_uuid,
    (SELECT name FROM users WHERE problems.owner_uuid = users.uuid) AS owner_name,
    -- get tag uuids
    COALESCE(
        ARRAY(
            SELECT problems_job_tags.job_tag_uuid
            FROM problems_job_tags
            WHERE problems.uuid = problems_job_tags.problem_uuid
        ),
        '{}'
    )::VARCHAR[] AS tag_uuids
`

type UpdateProblemParams struct {
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	Description pgtype.Text      `json:"description"`
	IsDone      pgtype.Bool      `json:"is_done"`
	Uuid        pgtype.UUID      `json:"uuid"`
}

type UpdateProblemRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	IsDone        bool             `json:"is_done"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	OwnerName     string           `json:"owner_name"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) UpdateProblem(ctx context.Context, arg UpdateProblemParams) (UpdateProblemRow, error) {
	row := q.db.QueryRow(ctx, updateProblem,
		arg.UpdatedAt,
		arg.Description,
		arg.IsDone,
		arg.Uuid,
	)
	var i UpdateProblemRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.IsDone,
		&i.OwnerUuid,
		&i.DayReportUuid,
		&i.OwnerName,
		&i.TagUuids,
	)
	return i, err
}
