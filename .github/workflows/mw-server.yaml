name: Deploy mw-server to Server

on:
  push:
    branches:
      - main
    paths:
      - 'mw-server/**'
  # workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract commit info
        id: extract-info
        run: |
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "COMMIT_DATE=$(date -u +%Y%m%d)" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=victorveretennikov58/masters-way:mw-server.${{ env.COMMIT_HASH }}.${{ env.COMMIT_DATE }}
          docker build -t $IMAGE_NAME -f mw-server/Dockerfile mw-server
          docker push $IMAGE_NAME

  deploy:
    runs-on: ubuntu-22.04
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract commit info
        id: extract-info
        run: |
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "COMMIT_DATE=$(date -u +%Y%m%d)" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
          COMMIT_DATE: ${{ env.COMMIT_DATE }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          ENV_FILE_PATH_SERVER: ${{ secrets.ENV_FILE_PATH_SERVER }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER_SERVER }}@${{ secrets.IP_SERVER }} << EOF
            export COMMIT_HASH=${COMMIT_HASH}
            export COMMIT_DATE=${COMMIT_DATE}
            export DOCKER_USERNAME=${DOCKER_USERNAME}
            export DOCKER_TOKEN=${DOCKER_TOKEN}
            export ENV_FILE_PATH_SERVER=${ENV_FILE_PATH_SERVER}

            echo ${DOCKER_TOKEN} | sudo docker login -u ${DOCKER_USERNAME} --password-stdin
            sudo docker pull victorveretennikov58/masters-way:mw-server.${COMMIT_HASH}.${COMMIT_DATE}
            sudo docker stop masters-way_mw-server_1 || true
            sudo docker rm masters-way_mw-server_1 || true
            sudo docker run --env-file ${ENV_FILE_PATH_SERVER} -d --name masters-way_mw-server_1 --restart unless-stopped -p 8000:8000 --network masters-way_app-network victorveretennikov58/masters-way:mw-server.${COMMIT_HASH}.${COMMIT_DATE}
            
            sudo docker images --format '{{.Repository}}:{{.Tag}}' | grep 'victorveretennikov58/masters-way:mw-server' | grep -v '${COMMIT_HASH}.${COMMIT_DATE}' | xargs -I {} sudo docker rmi {}
          EOF


  # notify:
  #   runs-on: ubuntu-22.04
  #   needs: [build-and-push, deploy]

  #   steps:
  #     - name: Send Telegram Notification
  #       if: always()
  #       env:
  #         TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  #         TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  #       run: |
  #         STATUS=${{ job.status }}
  #         MESSAGE="GitHub Action completed with status: $STATUS. Deployment of mw-server with tag mw-server"
  #         curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
  #         -d chat_id="${TELEGRAM_CHAT_ID}" \
  #         -d text="$MESSAGE"