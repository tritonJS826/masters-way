/*


Testing GroupAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_GroupAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupAPIService AcceptRequestToGroupRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupRoomId string

		resp, httpRes, err := apiClient.GroupAPI.AcceptRequestToGroupRoom(context.Background(), groupRoomId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService AddUserToGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupRoomId string
		var userId string

		resp, httpRes, err := apiClient.GroupAPI.AddUserToGroup(context.Background(), groupRoomId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService CreateGroupRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GroupAPI.CreateGroupRooms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService CreateMessageInGroupRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupRoomId string

		resp, httpRes, err := apiClient.GroupAPI.CreateMessageInGroupRoom(context.Background(), groupRoomId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService CreateRequestsToGroupRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.GroupAPI.CreateRequestsToGroupRoom(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService DeclineRequestToGroupRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupRoomId string

		resp, httpRes, err := apiClient.GroupAPI.DeclineRequestToGroupRoom(context.Background(), groupRoomId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService DeleteUserToGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupRoomId string
		var userId string

		resp, httpRes, err := apiClient.GroupAPI.DeleteUserToGroup(context.Background(), groupRoomId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService GetGroupRoomById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupRoomId string

		resp, httpRes, err := apiClient.GroupAPI.GetGroupRoomById(context.Background(), groupRoomId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService GetGroupRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GroupAPI.GetGroupRooms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService GetRequestsToGroupRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GroupAPI.GetRequestsToGroupRoom(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService UpdateGroupRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupRoomId string

		resp, httpRes, err := apiClient.GroupAPI.UpdateGroupRooms(context.Background(), groupRoomId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
