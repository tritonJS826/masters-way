/*
Masters way general API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SchemasCreateProblemJobTagPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasCreateProblemJobTagPayload{}

// SchemasCreateProblemJobTagPayload struct for SchemasCreateProblemJobTagPayload
type SchemasCreateProblemJobTagPayload struct {
	JobTagUuid string `json:"jobTagUuid"`
	ProblemUuid string `json:"problemUuid"`
}

type _SchemasCreateProblemJobTagPayload SchemasCreateProblemJobTagPayload

// NewSchemasCreateProblemJobTagPayload instantiates a new SchemasCreateProblemJobTagPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasCreateProblemJobTagPayload(jobTagUuid string, problemUuid string) *SchemasCreateProblemJobTagPayload {
	this := SchemasCreateProblemJobTagPayload{}
	this.JobTagUuid = jobTagUuid
	this.ProblemUuid = problemUuid
	return &this
}

// NewSchemasCreateProblemJobTagPayloadWithDefaults instantiates a new SchemasCreateProblemJobTagPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasCreateProblemJobTagPayloadWithDefaults() *SchemasCreateProblemJobTagPayload {
	this := SchemasCreateProblemJobTagPayload{}
	return &this
}

// GetJobTagUuid returns the JobTagUuid field value
func (o *SchemasCreateProblemJobTagPayload) GetJobTagUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobTagUuid
}

// GetJobTagUuidOk returns a tuple with the JobTagUuid field value
// and a boolean to check if the value has been set.
func (o *SchemasCreateProblemJobTagPayload) GetJobTagUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobTagUuid, true
}

// SetJobTagUuid sets field value
func (o *SchemasCreateProblemJobTagPayload) SetJobTagUuid(v string) {
	o.JobTagUuid = v
}

// GetProblemUuid returns the ProblemUuid field value
func (o *SchemasCreateProblemJobTagPayload) GetProblemUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProblemUuid
}

// GetProblemUuidOk returns a tuple with the ProblemUuid field value
// and a boolean to check if the value has been set.
func (o *SchemasCreateProblemJobTagPayload) GetProblemUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProblemUuid, true
}

// SetProblemUuid sets field value
func (o *SchemasCreateProblemJobTagPayload) SetProblemUuid(v string) {
	o.ProblemUuid = v
}

func (o SchemasCreateProblemJobTagPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasCreateProblemJobTagPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jobTagUuid"] = o.JobTagUuid
	toSerialize["problemUuid"] = o.ProblemUuid
	return toSerialize, nil
}

func (o *SchemasCreateProblemJobTagPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jobTagUuid",
		"problemUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemasCreateProblemJobTagPayload := _SchemasCreateProblemJobTagPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchemasCreateProblemJobTagPayload)

	if err != nil {
		return err
	}

	*o = SchemasCreateProblemJobTagPayload(varSchemasCreateProblemJobTagPayload)

	return err
}

type NullableSchemasCreateProblemJobTagPayload struct {
	value *SchemasCreateProblemJobTagPayload
	isSet bool
}

func (v NullableSchemasCreateProblemJobTagPayload) Get() *SchemasCreateProblemJobTagPayload {
	return v.value
}

func (v *NullableSchemasCreateProblemJobTagPayload) Set(val *SchemasCreateProblemJobTagPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasCreateProblemJobTagPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasCreateProblemJobTagPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasCreateProblemJobTagPayload(val *SchemasCreateProblemJobTagPayload) *NullableSchemasCreateProblemJobTagPayload {
	return &NullableSchemasCreateProblemJobTagPayload{value: val, isSet: true}
}

func (v NullableSchemasCreateProblemJobTagPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasCreateProblemJobTagPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


