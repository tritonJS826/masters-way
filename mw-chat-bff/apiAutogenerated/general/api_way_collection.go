/*
Masters way general API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WayCollectionAPIService WayCollectionAPI service
type WayCollectionAPIService service

type ApiCreateWayCollectionRequest struct {
	ctx context.Context
	ApiService *WayCollectionAPIService
	request *SchemasCreateWayCollectionPayload
}

// query params
func (r ApiCreateWayCollectionRequest) Request(request SchemasCreateWayCollectionPayload) ApiCreateWayCollectionRequest {
	r.request = &request
	return r
}

func (r ApiCreateWayCollectionRequest) Execute() (*SchemasWayCollectionPopulatedResponse, *http.Response, error) {
	return r.ApiService.CreateWayCollectionExecute(r)
}

/*
CreateWayCollection Create a new wayCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateWayCollectionRequest
*/
func (a *WayCollectionAPIService) CreateWayCollection(ctx context.Context) ApiCreateWayCollectionRequest {
	return ApiCreateWayCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SchemasWayCollectionPopulatedResponse
func (a *WayCollectionAPIService) CreateWayCollectionExecute(r ApiCreateWayCollectionRequest) (*SchemasWayCollectionPopulatedResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SchemasWayCollectionPopulatedResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WayCollectionAPIService.CreateWayCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wayCollections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteWayCollectionRequest struct {
	ctx context.Context
	ApiService *WayCollectionAPIService
	wayCollectionId string
}

func (r ApiDeleteWayCollectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWayCollectionExecute(r)
}

/*
DeleteWayCollection Delete wayCollection by UUID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param wayCollectionId wayCollection ID
 @return ApiDeleteWayCollectionRequest
*/
func (a *WayCollectionAPIService) DeleteWayCollection(ctx context.Context, wayCollectionId string) ApiDeleteWayCollectionRequest {
	return ApiDeleteWayCollectionRequest{
		ApiService: a,
		ctx: ctx,
		wayCollectionId: wayCollectionId,
	}
}

// Execute executes the request
func (a *WayCollectionAPIService) DeleteWayCollectionExecute(r ApiDeleteWayCollectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WayCollectionAPIService.DeleteWayCollection")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wayCollections/{wayCollectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"wayCollectionId"+"}", url.PathEscape(parameterValueToString(r.wayCollectionId, "wayCollectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateWayCollectionRequest struct {
	ctx context.Context
	ApiService *WayCollectionAPIService
	wayCollectionId string
	request *SchemasUpdateWayCollectionPayload
}

// query params
func (r ApiUpdateWayCollectionRequest) Request(request SchemasUpdateWayCollectionPayload) ApiUpdateWayCollectionRequest {
	r.request = &request
	return r
}

func (r ApiUpdateWayCollectionRequest) Execute() (*SchemasWayCollectionPlainResponse, *http.Response, error) {
	return r.ApiService.UpdateWayCollectionExecute(r)
}

/*
UpdateWayCollection Update wayCollection by UUID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param wayCollectionId wayCollection ID
 @return ApiUpdateWayCollectionRequest
*/
func (a *WayCollectionAPIService) UpdateWayCollection(ctx context.Context, wayCollectionId string) ApiUpdateWayCollectionRequest {
	return ApiUpdateWayCollectionRequest{
		ApiService: a,
		ctx: ctx,
		wayCollectionId: wayCollectionId,
	}
}

// Execute executes the request
//  @return SchemasWayCollectionPlainResponse
func (a *WayCollectionAPIService) UpdateWayCollectionExecute(r ApiUpdateWayCollectionRequest) (*SchemasWayCollectionPlainResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SchemasWayCollectionPlainResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WayCollectionAPIService.UpdateWayCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wayCollections/{wayCollectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"wayCollectionId"+"}", url.PathEscape(parameterValueToString(r.wayCollectionId, "wayCollectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
