/*
Masters way general API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SchemasProblemPopulatedResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasProblemPopulatedResponse{}

// SchemasProblemPopulatedResponse struct for SchemasProblemPopulatedResponse
type SchemasProblemPopulatedResponse struct {
	CreatedAt string `json:"createdAt"`
	DayReportUuid string `json:"dayReportUuid"`
	Description string `json:"description"`
	IsDone bool `json:"isDone"`
	OwnerName string `json:"ownerName"`
	OwnerUuid string `json:"ownerUuid"`
	Tags []SchemasJobTagResponse `json:"tags"`
	UpdatedAt string `json:"updatedAt"`
	Uuid string `json:"uuid"`
}

type _SchemasProblemPopulatedResponse SchemasProblemPopulatedResponse

// NewSchemasProblemPopulatedResponse instantiates a new SchemasProblemPopulatedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasProblemPopulatedResponse(createdAt string, dayReportUuid string, description string, isDone bool, ownerName string, ownerUuid string, tags []SchemasJobTagResponse, updatedAt string, uuid string) *SchemasProblemPopulatedResponse {
	this := SchemasProblemPopulatedResponse{}
	this.CreatedAt = createdAt
	this.DayReportUuid = dayReportUuid
	this.Description = description
	this.IsDone = isDone
	this.OwnerName = ownerName
	this.OwnerUuid = ownerUuid
	this.Tags = tags
	this.UpdatedAt = updatedAt
	this.Uuid = uuid
	return &this
}

// NewSchemasProblemPopulatedResponseWithDefaults instantiates a new SchemasProblemPopulatedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasProblemPopulatedResponseWithDefaults() *SchemasProblemPopulatedResponse {
	this := SchemasProblemPopulatedResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *SchemasProblemPopulatedResponse) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SchemasProblemPopulatedResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SchemasProblemPopulatedResponse) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDayReportUuid returns the DayReportUuid field value
func (o *SchemasProblemPopulatedResponse) GetDayReportUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DayReportUuid
}

// GetDayReportUuidOk returns a tuple with the DayReportUuid field value
// and a boolean to check if the value has been set.
func (o *SchemasProblemPopulatedResponse) GetDayReportUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DayReportUuid, true
}

// SetDayReportUuid sets field value
func (o *SchemasProblemPopulatedResponse) SetDayReportUuid(v string) {
	o.DayReportUuid = v
}

// GetDescription returns the Description field value
func (o *SchemasProblemPopulatedResponse) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SchemasProblemPopulatedResponse) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SchemasProblemPopulatedResponse) SetDescription(v string) {
	o.Description = v
}

// GetIsDone returns the IsDone field value
func (o *SchemasProblemPopulatedResponse) GetIsDone() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDone
}

// GetIsDoneOk returns a tuple with the IsDone field value
// and a boolean to check if the value has been set.
func (o *SchemasProblemPopulatedResponse) GetIsDoneOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDone, true
}

// SetIsDone sets field value
func (o *SchemasProblemPopulatedResponse) SetIsDone(v bool) {
	o.IsDone = v
}

// GetOwnerName returns the OwnerName field value
func (o *SchemasProblemPopulatedResponse) GetOwnerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value
// and a boolean to check if the value has been set.
func (o *SchemasProblemPopulatedResponse) GetOwnerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerName, true
}

// SetOwnerName sets field value
func (o *SchemasProblemPopulatedResponse) SetOwnerName(v string) {
	o.OwnerName = v
}

// GetOwnerUuid returns the OwnerUuid field value
func (o *SchemasProblemPopulatedResponse) GetOwnerUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerUuid
}

// GetOwnerUuidOk returns a tuple with the OwnerUuid field value
// and a boolean to check if the value has been set.
func (o *SchemasProblemPopulatedResponse) GetOwnerUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerUuid, true
}

// SetOwnerUuid sets field value
func (o *SchemasProblemPopulatedResponse) SetOwnerUuid(v string) {
	o.OwnerUuid = v
}

// GetTags returns the Tags field value
func (o *SchemasProblemPopulatedResponse) GetTags() []SchemasJobTagResponse {
	if o == nil {
		var ret []SchemasJobTagResponse
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *SchemasProblemPopulatedResponse) GetTagsOk() ([]SchemasJobTagResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *SchemasProblemPopulatedResponse) SetTags(v []SchemasJobTagResponse) {
	o.Tags = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SchemasProblemPopulatedResponse) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SchemasProblemPopulatedResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SchemasProblemPopulatedResponse) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetUuid returns the Uuid field value
func (o *SchemasProblemPopulatedResponse) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *SchemasProblemPopulatedResponse) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *SchemasProblemPopulatedResponse) SetUuid(v string) {
	o.Uuid = v
}

func (o SchemasProblemPopulatedResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasProblemPopulatedResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["dayReportUuid"] = o.DayReportUuid
	toSerialize["description"] = o.Description
	toSerialize["isDone"] = o.IsDone
	toSerialize["ownerName"] = o.OwnerName
	toSerialize["ownerUuid"] = o.OwnerUuid
	toSerialize["tags"] = o.Tags
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *SchemasProblemPopulatedResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"dayReportUuid",
		"description",
		"isDone",
		"ownerName",
		"ownerUuid",
		"tags",
		"updatedAt",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemasProblemPopulatedResponse := _SchemasProblemPopulatedResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchemasProblemPopulatedResponse)

	if err != nil {
		return err
	}

	*o = SchemasProblemPopulatedResponse(varSchemasProblemPopulatedResponse)

	return err
}

type NullableSchemasProblemPopulatedResponse struct {
	value *SchemasProblemPopulatedResponse
	isSet bool
}

func (v NullableSchemasProblemPopulatedResponse) Get() *SchemasProblemPopulatedResponse {
	return v.value
}

func (v *NullableSchemasProblemPopulatedResponse) Set(val *SchemasProblemPopulatedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasProblemPopulatedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasProblemPopulatedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasProblemPopulatedResponse(val *SchemasProblemPopulatedResponse) *NullableSchemasProblemPopulatedResponse {
	return &NullableSchemasProblemPopulatedResponse{value: val, isSet: true}
}

func (v NullableSchemasProblemPopulatedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasProblemPopulatedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


