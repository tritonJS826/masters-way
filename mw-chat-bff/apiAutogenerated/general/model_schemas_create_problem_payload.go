/*
Masters way general API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SchemasCreateProblemPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasCreateProblemPayload{}

// SchemasCreateProblemPayload struct for SchemasCreateProblemPayload
type SchemasCreateProblemPayload struct {
	DayReportUuid string `json:"dayReportUuid"`
	Description string `json:"description"`
	IsDone bool `json:"isDone"`
	OwnerUuid string `json:"ownerUuid"`
}

type _SchemasCreateProblemPayload SchemasCreateProblemPayload

// NewSchemasCreateProblemPayload instantiates a new SchemasCreateProblemPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasCreateProblemPayload(dayReportUuid string, description string, isDone bool, ownerUuid string) *SchemasCreateProblemPayload {
	this := SchemasCreateProblemPayload{}
	this.DayReportUuid = dayReportUuid
	this.Description = description
	this.IsDone = isDone
	this.OwnerUuid = ownerUuid
	return &this
}

// NewSchemasCreateProblemPayloadWithDefaults instantiates a new SchemasCreateProblemPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasCreateProblemPayloadWithDefaults() *SchemasCreateProblemPayload {
	this := SchemasCreateProblemPayload{}
	return &this
}

// GetDayReportUuid returns the DayReportUuid field value
func (o *SchemasCreateProblemPayload) GetDayReportUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DayReportUuid
}

// GetDayReportUuidOk returns a tuple with the DayReportUuid field value
// and a boolean to check if the value has been set.
func (o *SchemasCreateProblemPayload) GetDayReportUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DayReportUuid, true
}

// SetDayReportUuid sets field value
func (o *SchemasCreateProblemPayload) SetDayReportUuid(v string) {
	o.DayReportUuid = v
}

// GetDescription returns the Description field value
func (o *SchemasCreateProblemPayload) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SchemasCreateProblemPayload) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SchemasCreateProblemPayload) SetDescription(v string) {
	o.Description = v
}

// GetIsDone returns the IsDone field value
func (o *SchemasCreateProblemPayload) GetIsDone() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDone
}

// GetIsDoneOk returns a tuple with the IsDone field value
// and a boolean to check if the value has been set.
func (o *SchemasCreateProblemPayload) GetIsDoneOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDone, true
}

// SetIsDone sets field value
func (o *SchemasCreateProblemPayload) SetIsDone(v bool) {
	o.IsDone = v
}

// GetOwnerUuid returns the OwnerUuid field value
func (o *SchemasCreateProblemPayload) GetOwnerUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerUuid
}

// GetOwnerUuidOk returns a tuple with the OwnerUuid field value
// and a boolean to check if the value has been set.
func (o *SchemasCreateProblemPayload) GetOwnerUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerUuid, true
}

// SetOwnerUuid sets field value
func (o *SchemasCreateProblemPayload) SetOwnerUuid(v string) {
	o.OwnerUuid = v
}

func (o SchemasCreateProblemPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasCreateProblemPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dayReportUuid"] = o.DayReportUuid
	toSerialize["description"] = o.Description
	toSerialize["isDone"] = o.IsDone
	toSerialize["ownerUuid"] = o.OwnerUuid
	return toSerialize, nil
}

func (o *SchemasCreateProblemPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dayReportUuid",
		"description",
		"isDone",
		"ownerUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemasCreateProblemPayload := _SchemasCreateProblemPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchemasCreateProblemPayload)

	if err != nil {
		return err
	}

	*o = SchemasCreateProblemPayload(varSchemasCreateProblemPayload)

	return err
}

type NullableSchemasCreateProblemPayload struct {
	value *SchemasCreateProblemPayload
	isSet bool
}

func (v NullableSchemasCreateProblemPayload) Get() *SchemasCreateProblemPayload {
	return v.value
}

func (v *NullableSchemasCreateProblemPayload) Set(val *SchemasCreateProblemPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasCreateProblemPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasCreateProblemPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasCreateProblemPayload(val *SchemasCreateProblemPayload) *NullableSchemasCreateProblemPayload {
	return &NullableSchemasCreateProblemPayload{value: val, isSet: true}
}

func (v NullableSchemasCreateProblemPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasCreateProblemPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


