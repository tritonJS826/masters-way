/*
Masters way API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SchemasGetAllWaysResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasGetAllWaysResponse{}

// SchemasGetAllWaysResponse struct for SchemasGetAllWaysResponse
type SchemasGetAllWaysResponse struct {
	Size int32 `json:"size"`
	Ways []SchemasWayPlainResponse `json:"ways"`
}

type _SchemasGetAllWaysResponse SchemasGetAllWaysResponse

// NewSchemasGetAllWaysResponse instantiates a new SchemasGetAllWaysResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasGetAllWaysResponse(size int32, ways []SchemasWayPlainResponse) *SchemasGetAllWaysResponse {
	this := SchemasGetAllWaysResponse{}
	this.Size = size
	this.Ways = ways
	return &this
}

// NewSchemasGetAllWaysResponseWithDefaults instantiates a new SchemasGetAllWaysResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasGetAllWaysResponseWithDefaults() *SchemasGetAllWaysResponse {
	this := SchemasGetAllWaysResponse{}
	return &this
}

// GetSize returns the Size field value
func (o *SchemasGetAllWaysResponse) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *SchemasGetAllWaysResponse) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *SchemasGetAllWaysResponse) SetSize(v int32) {
	o.Size = v
}

// GetWays returns the Ways field value
func (o *SchemasGetAllWaysResponse) GetWays() []SchemasWayPlainResponse {
	if o == nil {
		var ret []SchemasWayPlainResponse
		return ret
	}

	return o.Ways
}

// GetWaysOk returns a tuple with the Ways field value
// and a boolean to check if the value has been set.
func (o *SchemasGetAllWaysResponse) GetWaysOk() ([]SchemasWayPlainResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ways, true
}

// SetWays sets field value
func (o *SchemasGetAllWaysResponse) SetWays(v []SchemasWayPlainResponse) {
	o.Ways = v
}

func (o SchemasGetAllWaysResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasGetAllWaysResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["size"] = o.Size
	toSerialize["ways"] = o.Ways
	return toSerialize, nil
}

func (o *SchemasGetAllWaysResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size",
		"ways",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemasGetAllWaysResponse := _SchemasGetAllWaysResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchemasGetAllWaysResponse)

	if err != nil {
		return err
	}

	*o = SchemasGetAllWaysResponse(varSchemasGetAllWaysResponse)

	return err
}

type NullableSchemasGetAllWaysResponse struct {
	value *SchemasGetAllWaysResponse
	isSet bool
}

func (v NullableSchemasGetAllWaysResponse) Get() *SchemasGetAllWaysResponse {
	return v.value
}

func (v *NullableSchemasGetAllWaysResponse) Set(val *SchemasGetAllWaysResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasGetAllWaysResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasGetAllWaysResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasGetAllWaysResponse(val *SchemasGetAllWaysResponse) *NullableSchemasGetAllWaysResponse {
	return &NullableSchemasGetAllWaysResponse{value: val, isSet: true}
}

func (v NullableSchemasGetAllWaysResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasGetAllWaysResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


