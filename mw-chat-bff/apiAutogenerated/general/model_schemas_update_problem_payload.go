/*
Masters way API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemasUpdateProblemPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasUpdateProblemPayload{}

// SchemasUpdateProblemPayload struct for SchemasUpdateProblemPayload
type SchemasUpdateProblemPayload struct {
	Description *string `json:"description,omitempty"`
	IsDone *bool `json:"isDone,omitempty"`
}

// NewSchemasUpdateProblemPayload instantiates a new SchemasUpdateProblemPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasUpdateProblemPayload() *SchemasUpdateProblemPayload {
	this := SchemasUpdateProblemPayload{}
	return &this
}

// NewSchemasUpdateProblemPayloadWithDefaults instantiates a new SchemasUpdateProblemPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasUpdateProblemPayloadWithDefaults() *SchemasUpdateProblemPayload {
	this := SchemasUpdateProblemPayload{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemasUpdateProblemPayload) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemasUpdateProblemPayload) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemasUpdateProblemPayload) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemasUpdateProblemPayload) SetDescription(v string) {
	o.Description = &v
}

// GetIsDone returns the IsDone field value if set, zero value otherwise.
func (o *SchemasUpdateProblemPayload) GetIsDone() bool {
	if o == nil || IsNil(o.IsDone) {
		var ret bool
		return ret
	}
	return *o.IsDone
}

// GetIsDoneOk returns a tuple with the IsDone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemasUpdateProblemPayload) GetIsDoneOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDone) {
		return nil, false
	}
	return o.IsDone, true
}

// HasIsDone returns a boolean if a field has been set.
func (o *SchemasUpdateProblemPayload) HasIsDone() bool {
	if o != nil && !IsNil(o.IsDone) {
		return true
	}

	return false
}

// SetIsDone gets a reference to the given bool and assigns it to the IsDone field.
func (o *SchemasUpdateProblemPayload) SetIsDone(v bool) {
	o.IsDone = &v
}

func (o SchemasUpdateProblemPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasUpdateProblemPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsDone) {
		toSerialize["isDone"] = o.IsDone
	}
	return toSerialize, nil
}

type NullableSchemasUpdateProblemPayload struct {
	value *SchemasUpdateProblemPayload
	isSet bool
}

func (v NullableSchemasUpdateProblemPayload) Get() *SchemasUpdateProblemPayload {
	return v.value
}

func (v *NullableSchemasUpdateProblemPayload) Set(val *SchemasUpdateProblemPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasUpdateProblemPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasUpdateProblemPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasUpdateProblemPayload(val *SchemasUpdateProblemPayload) *NullableSchemasUpdateProblemPayload {
	return &NullableSchemasUpdateProblemPayload{value: val, isSet: true}
}

func (v NullableSchemasUpdateProblemPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasUpdateProblemPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


