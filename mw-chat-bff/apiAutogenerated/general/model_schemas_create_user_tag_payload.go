/*
Masters way general API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SchemasCreateUserTagPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasCreateUserTagPayload{}

// SchemasCreateUserTagPayload struct for SchemasCreateUserTagPayload
type SchemasCreateUserTagPayload struct {
	Name string `json:"name"`
	OwnerUuid string `json:"ownerUuid"`
}

type _SchemasCreateUserTagPayload SchemasCreateUserTagPayload

// NewSchemasCreateUserTagPayload instantiates a new SchemasCreateUserTagPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasCreateUserTagPayload(name string, ownerUuid string) *SchemasCreateUserTagPayload {
	this := SchemasCreateUserTagPayload{}
	this.Name = name
	this.OwnerUuid = ownerUuid
	return &this
}

// NewSchemasCreateUserTagPayloadWithDefaults instantiates a new SchemasCreateUserTagPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasCreateUserTagPayloadWithDefaults() *SchemasCreateUserTagPayload {
	this := SchemasCreateUserTagPayload{}
	return &this
}

// GetName returns the Name field value
func (o *SchemasCreateUserTagPayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SchemasCreateUserTagPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SchemasCreateUserTagPayload) SetName(v string) {
	o.Name = v
}

// GetOwnerUuid returns the OwnerUuid field value
func (o *SchemasCreateUserTagPayload) GetOwnerUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerUuid
}

// GetOwnerUuidOk returns a tuple with the OwnerUuid field value
// and a boolean to check if the value has been set.
func (o *SchemasCreateUserTagPayload) GetOwnerUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerUuid, true
}

// SetOwnerUuid sets field value
func (o *SchemasCreateUserTagPayload) SetOwnerUuid(v string) {
	o.OwnerUuid = v
}

func (o SchemasCreateUserTagPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasCreateUserTagPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["ownerUuid"] = o.OwnerUuid
	return toSerialize, nil
}

func (o *SchemasCreateUserTagPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"ownerUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemasCreateUserTagPayload := _SchemasCreateUserTagPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchemasCreateUserTagPayload)

	if err != nil {
		return err
	}

	*o = SchemasCreateUserTagPayload(varSchemasCreateUserTagPayload)

	return err
}

type NullableSchemasCreateUserTagPayload struct {
	value *SchemasCreateUserTagPayload
	isSet bool
}

func (v NullableSchemasCreateUserTagPayload) Get() *SchemasCreateUserTagPayload {
	return v.value
}

func (v *NullableSchemasCreateUserTagPayload) Set(val *SchemasCreateUserTagPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasCreateUserTagPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasCreateUserTagPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasCreateUserTagPayload(val *SchemasCreateUserTagPayload) *NullableSchemasCreateUserTagPayload {
	return &NullableSchemasCreateUserTagPayload{value: val, isSet: true}
}

func (v NullableSchemasCreateUserTagPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasCreateUserTagPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


