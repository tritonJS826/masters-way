package services

import (
	"fmt"
	openapiGeneral "mw-chat-bff/apiAutogenerated/general"
	utils "mw-chat-bff/internal/utils"

	"github.com/gin-gonic/gin"
	"github.com/samber/lo"
)

type UsersService struct {
	generalAPI *openapiGeneral.APIClient
}

func NewUsersService(generalAPI *openapiGeneral.APIClient) *UsersService {
	return &UsersService{generalAPI}
}

func (usersService *UsersService) GetPopulatedUsers(ctx *gin.Context, userIDs []string) (map[string]PopulatedUser, error) {
	chatUsersData, response, err := usersService.generalAPI.UserAPI.GetUsersByIds(ctx).Request(userIDs).Execute()
	if err != nil {
		message, extractErr := utils.ExtractErrorMessageFromResponse(response)
		if extractErr != nil {
			return nil, fmt.Errorf("failed to extract error message: %w", extractErr)
		}
		return nil, fmt.Errorf(message)
	}

	userMap := lo.SliceToMap(chatUsersData, func(userData openapiGeneral.SchemasGetUsersByIDsResponse) (string, PopulatedUser) {
		return userData.UserId, PopulatedUser{
			UserID:   userData.UserId,
			Name:     userData.Name,
			ImageURL: userData.ImageUrl,
		}
	})

	return userMap, nil
}
