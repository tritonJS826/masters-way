package services

import (
	openapiChat "mw-chat-bff/apiAutogenerated/chat"
	openapiGeneral "mw-chat-bff/apiAutogenerated/general"
	"mw-chat-bff/internal/schemas"

	"github.com/gin-gonic/gin"
)

type RoomsService struct {
}

func NewRoomsService() *RoomsService {
	return &RoomsService{}
}

// TODO: 1. Use DI to get rid of such configs
// TODO: 2. Use Envs instead of hardcode
var generalConfig = openapiGeneral.Configuration{
	Host:   "localhost:8000",
	Scheme: "http",
	Servers: openapiGeneral.ServerConfigurations{
		{
			URL:         "http://localhost:8000/api",
			Description: "mw-general",
		},
	},
}
var GeneralApi = openapiGeneral.NewAPIClient(&generalConfig)

var chatConfig = openapiChat.Configuration{
	Host:   "localhost:8001",
	Scheme: "http",
	Servers: openapiChat.ServerConfigurations{
		{
			URL:         "http://localhost:8001/chat",
			Description: "mw-chat",
		},
	},
}
var ChatApi = openapiChat.NewAPIClient(&chatConfig)

func (p *RoomsService) GetChatPreview(ctx *gin.Context) (*schemas.GetChatPreviewResponse, error) {
	chatPreviewRaw, _, err := ChatApi.RoomAPI.GetChatPreview(ctx).Execute()
	if err != nil {
		return &schemas.GetChatPreviewResponse{}, err
	}

	chatPreview := schemas.GetChatPreviewResponse{
		UnreadMessagesAmount: int(chatPreviewRaw.UserId),
	}

	return &chatPreview, nil
}

func (p *RoomsService) GetRooms(ctx *gin.Context, roomType string) (*schemas.GetRoomsResponse, error) {
	return &schemas.GetRoomsResponse{}, nil
}

func (p *RoomsService) GetRoomById(ctx *gin.Context) (*schemas.RoomPopulatedResponse, error) {
	return &schemas.RoomPopulatedResponse{}, nil

}

func (p *RoomsService) CreateRoom(ctx *gin.Context) (*schemas.RoomPopulatedResponse, error) {
	return &schemas.RoomPopulatedResponse{}, nil
}
func (p *RoomsService) UpdateRoom(ctx *gin.Context) error {
	return nil
}
func (p *RoomsService) CreateMessage(ctx *gin.Context) (*schemas.MessageResponse, error) {
	return &schemas.MessageResponse{}, nil
}
func (p *RoomsService) AddUserToRoom(ctx *gin.Context) error {
	return nil
}
