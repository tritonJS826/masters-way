// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: p2p_rooms.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createP2PRoom = `-- name: CreateP2PRoom :one
INSERT INTO p2p_rooms (user_1_uuid, user_2_uuid, created_at, is_blocked)
VALUES ($1, $2, CURRENT_TIMESTAMP, false)
RETURNING uuid, user_1_uuid, user_2_uuid, created_at, is_blocked
`

type CreateP2PRoomParams struct {
	User1Uuid pgtype.UUID `json:"user_1_uuid"`
	User2Uuid pgtype.UUID `json:"user_2_uuid"`
}

func (q *Queries) CreateP2PRoom(ctx context.Context, arg CreateP2PRoomParams) (P2pRoom, error) {
	row := q.db.QueryRow(ctx, createP2PRoom, arg.User1Uuid, arg.User2Uuid)
	var i P2pRoom
	err := row.Scan(
		&i.Uuid,
		&i.User1Uuid,
		&i.User2Uuid,
		&i.CreatedAt,
		&i.IsBlocked,
	)
	return i, err
}

const getP2PRooms = `-- name: GetP2PRooms :many
SELECT uuid, user_1_uuid, user_2_uuid, created_at, is_blocked FROM p2p_rooms
WHERE user_1_uuid = $1 OR user_2_uuid = $1
`

func (q *Queries) GetP2PRooms(ctx context.Context, userUuid pgtype.UUID) ([]P2pRoom, error) {
	rows, err := q.db.Query(ctx, getP2PRooms, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []P2pRoom{}
	for rows.Next() {
		var i P2pRoom
		if err := rows.Scan(
			&i.Uuid,
			&i.User1Uuid,
			&i.User2Uuid,
			&i.CreatedAt,
			&i.IsBlocked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateP2PRoomsIsBlocked = `-- name: UpdateP2PRoomsIsBlocked :one
UPDATE p2p_rooms
SET is_blocked = $1
WHERE uuid = $2
RETURNING uuid, user_1_uuid, user_2_uuid, created_at, is_blocked
`

type UpdateP2PRoomsIsBlockedParams struct {
	IsBlocked   pgtype.Bool `json:"is_blocked"`
	P2pRoomUuid pgtype.UUID `json:"p2p_room_uuid"`
}

func (q *Queries) UpdateP2PRoomsIsBlocked(ctx context.Context, arg UpdateP2PRoomsIsBlockedParams) (P2pRoom, error) {
	row := q.db.QueryRow(ctx, updateP2PRoomsIsBlocked, arg.IsBlocked, arg.P2pRoomUuid)
	var i P2pRoom
	err := row.Scan(
		&i.Uuid,
		&i.User1Uuid,
		&i.User2Uuid,
		&i.CreatedAt,
		&i.IsBlocked,
	)
	return i, err
}
