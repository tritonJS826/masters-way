// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: group_rooms.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGroupRoom = `-- name: CreateGroupRoom :one
INSERT INTO group_rooms(name, created_at)
VALUES ($1, $2)
RETURNING uuid, name, is_blocked
`

type CreateGroupRoomParams struct {
	Name      string           `json:"name"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

type CreateGroupRoomRow struct {
	Uuid      pgtype.UUID `json:"uuid"`
	Name      string      `json:"name"`
	IsBlocked bool        `json:"is_blocked"`
}

func (q *Queries) CreateGroupRoom(ctx context.Context, arg CreateGroupRoomParams) (CreateGroupRoomRow, error) {
	row := q.db.QueryRow(ctx, createGroupRoom, arg.Name, arg.CreatedAt)
	var i CreateGroupRoomRow
	err := row.Scan(&i.Uuid, &i.Name, &i.IsBlocked)
	return i, err
}

const getGroupRoomByUUID = `-- name: GetGroupRoomByUUID :one
SELECT
    group_rooms.uuid,
    group_rooms.name,
    group_rooms.is_blocked,
    (SELECT user_uuid
     FROM users_group_rooms
     WHERE room_uuid = group_rooms.uuid AND users_group_rooms.user_uuid <> $1
     LIMIT 1
    ) AS first_user_uuid
FROM group_rooms
WHERE group_rooms.uuid = $2
`

type GetGroupRoomByUUIDParams struct {
	UserUuid pgtype.UUID `json:"user_uuid"`
	RoomUuid pgtype.UUID `json:"room_uuid"`
}

type GetGroupRoomByUUIDRow struct {
	Uuid          pgtype.UUID `json:"uuid"`
	Name          string      `json:"name"`
	IsBlocked     bool        `json:"is_blocked"`
	FirstUserUuid pgtype.UUID `json:"first_user_uuid"`
}

func (q *Queries) GetGroupRoomByUUID(ctx context.Context, arg GetGroupRoomByUUIDParams) (GetGroupRoomByUUIDRow, error) {
	row := q.db.QueryRow(ctx, getGroupRoomByUUID, arg.UserUuid, arg.RoomUuid)
	var i GetGroupRoomByUUIDRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.IsBlocked,
		&i.FirstUserUuid,
	)
	return i, err
}

const getGroupRoomsByUserUUID = `-- name: GetGroupRoomsByUserUUID :many
SELECT
    group_rooms.uuid,
    group_rooms.name,
    group_rooms.is_blocked,
    (SELECT user_uuid
     FROM users_group_rooms
     WHERE room_uuid = group_rooms.uuid AND users_group_rooms.user_uuid <> $1
     LIMIT 1
    ) AS first_user_uuid
FROM group_rooms
JOIN users_group_rooms ON group_rooms.uuid = users_group_rooms.room_uuid
WHERE users_group_rooms.user_uuid = $1
`

type GetGroupRoomsByUserUUIDRow struct {
	Uuid          pgtype.UUID `json:"uuid"`
	Name          string      `json:"name"`
	IsBlocked     bool        `json:"is_blocked"`
	FirstUserUuid pgtype.UUID `json:"first_user_uuid"`
}

func (q *Queries) GetGroupRoomsByUserUUID(ctx context.Context, userUuid pgtype.UUID) ([]GetGroupRoomsByUserUUIDRow, error) {
	rows, err := q.db.Query(ctx, getGroupRoomsByUserUUID, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGroupRoomsByUserUUIDRow{}
	for rows.Next() {
		var i GetGroupRoomsByUserUUIDRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.IsBlocked,
			&i.FirstUserUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleBlockGroupRoom = `-- name: ToggleBlockGroupRoom :exec
UPDATE group_rooms
SET is_blocked = $1
FROM users_group_rooms
WHERE group_rooms.uuid = users_group_rooms.room_uuid
    AND users_group_rooms.user_uuid = $2
    AND users_group_rooms.role = 'admin'
    AND group_rooms.uuid = $3
`

type ToggleBlockGroupRoomParams struct {
	IsBlocked bool        `json:"is_blocked"`
	UserUuid  pgtype.UUID `json:"user_uuid"`
	RoomUuid  pgtype.UUID `json:"room_uuid"`
}

func (q *Queries) ToggleBlockGroupRoom(ctx context.Context, arg ToggleBlockGroupRoomParams) error {
	_, err := q.db.Exec(ctx, toggleBlockGroupRoom, arg.IsBlocked, arg.UserUuid, arg.RoomUuid)
	return err
}
