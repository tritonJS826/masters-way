// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: messages.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (owner_uuid, room_uuid, text)
VALUES ($1, $2, $3)
RETURNING owner_uuid, text
`

type CreateMessageParams struct {
	OwnerUuid pgtype.UUID `json:"owner_uuid"`
	RoomUuid  pgtype.UUID `json:"room_uuid"`
	Text      string      `json:"text"`
}

type CreateMessageRow struct {
	OwnerUuid pgtype.UUID `json:"owner_uuid"`
	Text      string      `json:"text"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (CreateMessageRow, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.OwnerUuid, arg.RoomUuid, arg.Text)
	var i CreateMessageRow
	err := row.Scan(&i.OwnerUuid, &i.Text)
	return i, err
}

const getMessagesByRoomUUID = `-- name: GetMessagesByRoomUUID :many
SELECT owner_uuid, text 
FROM messages
WHERE room_uuid = $1
`

type GetMessagesByRoomUUIDRow struct {
	OwnerUuid pgtype.UUID `json:"owner_uuid"`
	Text      string      `json:"text"`
}

func (q *Queries) GetMessagesByRoomUUID(ctx context.Context, roomUuid pgtype.UUID) ([]GetMessagesByRoomUUIDRow, error) {
	rows, err := q.db.Query(ctx, getMessagesByRoomUUID, roomUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessagesByRoomUUIDRow{}
	for rows.Next() {
		var i GetMessagesByRoomUUIDRow
		if err := rows.Scan(&i.OwnerUuid, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
