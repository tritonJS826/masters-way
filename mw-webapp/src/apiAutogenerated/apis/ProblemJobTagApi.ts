// @ts-nocheck
/* eslint-disable */
/**
 * Masters way API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasCreateProblemJobTagPayload,
} from '../models/index';
import {
    SchemasCreateProblemJobTagPayloadFromJSON,
    SchemasCreateProblemJobTagPayloadToJSON,
} from '../models/index';

export interface CreateProblemJobTagRequest {
    request: SchemasCreateProblemJobTagPayload;
}

export interface DeleteProblemJobTagRequest {
    problemId: string;
    jobTagId: string;
}

/**
 * 
 */
export class ProblemJobTagApi extends runtime.BaseAPI {

    /**
     * Create a new problemJobTag
     */
    async createProblemJobTagRaw(requestParameters: CreateProblemJobTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createProblemJobTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problemJobTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasCreateProblemJobTagPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new problemJobTag
     */
    async createProblemJobTag(requestParameters: CreateProblemJobTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createProblemJobTagRaw(requestParameters, initOverrides);
    }

    /**
     * Delete problemJobTag by UUID
     */
    async deleteProblemJobTagRaw(requestParameters: DeleteProblemJobTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.problemId === null || requestParameters.problemId === undefined) {
            throw new runtime.RequiredError('problemId','Required parameter requestParameters.problemId was null or undefined when calling deleteProblemJobTag.');
        }

        if (requestParameters.jobTagId === null || requestParameters.jobTagId === undefined) {
            throw new runtime.RequiredError('jobTagId','Required parameter requestParameters.jobTagId was null or undefined when calling deleteProblemJobTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problemJobTags/{jobTagId}/{problemId}`.replace(`{${"problemId"}}`, encodeURIComponent(String(requestParameters.problemId))).replace(`{${"jobTagId"}}`, encodeURIComponent(String(requestParameters.jobTagId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete problemJobTag by UUID
     */
    async deleteProblemJobTag(requestParameters: DeleteProblemJobTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProblemJobTagRaw(requestParameters, initOverrides);
    }

}
