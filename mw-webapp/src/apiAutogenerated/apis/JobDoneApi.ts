// @ts-nocheck
/* eslint-disable */
/**
 * Masters way API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasCreateJobDonePayload,
  SchemasJobDonePopulatedResponse,
  SchemasUpdateJobDone,
} from '../models/index';
import {
    SchemasCreateJobDonePayloadFromJSON,
    SchemasCreateJobDonePayloadToJSON,
    SchemasJobDonePopulatedResponseFromJSON,
    SchemasJobDonePopulatedResponseToJSON,
    SchemasUpdateJobDoneFromJSON,
    SchemasUpdateJobDoneToJSON,
} from '../models/index';

export interface CreateJobDoneRequest {
    request: SchemasCreateJobDonePayload;
}

export interface DeleteJobDoneRequest {
    jobDoneId: string;
}

export interface UpdateJobDoneRequest {
    jobDoneId: string;
    request: SchemasUpdateJobDone;
}

/**
 * 
 */
export class JobDoneApi extends runtime.BaseAPI {

    /**
     * Create a new jobDone
     */
    async createJobDoneRaw(requestParameters: CreateJobDoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasJobDonePopulatedResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createJobDone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/jobDones`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasCreateJobDonePayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasJobDonePopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Create a new jobDone
     */
    async createJobDone(requestParameters: CreateJobDoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasJobDonePopulatedResponse> {
        const response = await this.createJobDoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete jobDone by UUID
     */
    async deleteJobDoneRaw(requestParameters: DeleteJobDoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.jobDoneId === null || requestParameters.jobDoneId === undefined) {
            throw new runtime.RequiredError('jobDoneId','Required parameter requestParameters.jobDoneId was null or undefined when calling deleteJobDone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jobDones/{jobDoneId}`.replace(`{${"jobDoneId"}}`, encodeURIComponent(String(requestParameters.jobDoneId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete jobDone by UUID
     */
    async deleteJobDone(requestParameters: DeleteJobDoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteJobDoneRaw(requestParameters, initOverrides);
    }

    /**
     * Update jobDone by UUID
     */
    async updateJobDoneRaw(requestParameters: UpdateJobDoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasJobDonePopulatedResponse>> {
        if (requestParameters.jobDoneId === null || requestParameters.jobDoneId === undefined) {
            throw new runtime.RequiredError('jobDoneId','Required parameter requestParameters.jobDoneId was null or undefined when calling updateJobDone.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateJobDone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/jobDones/{jobDoneId}`.replace(`{${"jobDoneId"}}`, encodeURIComponent(String(requestParameters.jobDoneId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasUpdateJobDoneToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasJobDonePopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Update jobDone by UUID
     */
    async updateJobDone(requestParameters: UpdateJobDoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasJobDonePopulatedResponse> {
        const response = await this.updateJobDoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
