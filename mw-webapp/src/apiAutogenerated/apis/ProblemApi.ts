// @ts-nocheck
/* eslint-disable */
/**
 * Masters way API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasCreateProblemPayload,
  SchemasProblemPlainResponse,
  SchemasUpdateProblemPayload,
} from '../models/index';
import {
    SchemasCreateProblemPayloadFromJSON,
    SchemasCreateProblemPayloadToJSON,
    SchemasProblemPlainResponseFromJSON,
    SchemasProblemPlainResponseToJSON,
    SchemasUpdateProblemPayloadFromJSON,
    SchemasUpdateProblemPayloadToJSON,
} from '../models/index';

export interface CreateProblemRequest {
    request: SchemasCreateProblemPayload;
}

export interface DeleteProblemRequest {
    problemId: string;
}

export interface GetProblemsByDayReportUuidRequest {
    dayReportId: string;
}

export interface UpdateProblemRequest {
    problemId: string;
    request: SchemasUpdateProblemPayload;
}

/**
 * 
 */
export class ProblemApi extends runtime.BaseAPI {

    /**
     * Create a new problem
     */
    async createProblemRaw(requestParameters: CreateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasProblemPlainResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasCreateProblemPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasProblemPlainResponseFromJSON(jsonValue));
    }

    /**
     * Create a new problem
     */
    async createProblem(requestParameters: CreateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasProblemPlainResponse> {
        const response = await this.createProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete problem by UUID
     */
    async deleteProblemRaw(requestParameters: DeleteProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.problemId === null || requestParameters.problemId === undefined) {
            throw new runtime.RequiredError('problemId','Required parameter requestParameters.problemId was null or undefined when calling deleteProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problems/{problemId}`.replace(`{${"problemId"}}`, encodeURIComponent(String(requestParameters.problemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete problem by UUID
     */
    async deleteProblem(requestParameters: DeleteProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProblemRaw(requestParameters, initOverrides);
    }

    /**
     * Get problems by dayReport UUID
     */
    async getProblemsByDayReportUuidRaw(requestParameters: GetProblemsByDayReportUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SchemasProblemPlainResponse>>> {
        if (requestParameters.dayReportId === null || requestParameters.dayReportId === undefined) {
            throw new runtime.RequiredError('dayReportId','Required parameter requestParameters.dayReportId was null or undefined when calling getProblemsByDayReportUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problems/{dayReportId}`.replace(`{${"dayReportId"}}`, encodeURIComponent(String(requestParameters.dayReportId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SchemasProblemPlainResponseFromJSON));
    }

    /**
     * Get problems by dayReport UUID
     */
    async getProblemsByDayReportUuid(requestParameters: GetProblemsByDayReportUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SchemasProblemPlainResponse>> {
        const response = await this.getProblemsByDayReportUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update problem by UUID
     */
    async updateProblemRaw(requestParameters: UpdateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasProblemPlainResponse>> {
        if (requestParameters.problemId === null || requestParameters.problemId === undefined) {
            throw new runtime.RequiredError('problemId','Required parameter requestParameters.problemId was null or undefined when calling updateProblem.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problems/{problemId}`.replace(`{${"problemId"}}`, encodeURIComponent(String(requestParameters.problemId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasUpdateProblemPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasProblemPlainResponseFromJSON(jsonValue));
    }

    /**
     * Update problem by UUID
     */
    async updateProblem(requestParameters: UpdateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasProblemPlainResponse> {
        const response = await this.updateProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
