// @ts-nocheck
/* eslint-disable */
/**
 * Masters way API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SchemasUserPlainResponse } from './SchemasUserPlainResponse';
import {
    SchemasUserPlainResponseFromJSON,
    SchemasUserPlainResponseFromJSONTyped,
    SchemasUserPlainResponseToJSON,
} from './SchemasUserPlainResponse';
import type { SchemasWayTagResponse } from './SchemasWayTagResponse';
import {
    SchemasWayTagResponseFromJSON,
    SchemasWayTagResponseFromJSONTyped,
    SchemasWayTagResponseToJSON,
} from './SchemasWayTagResponse';

/**
 * 
 * @export
 * @interface SchemasWayPlainResponse
 */
export interface SchemasWayPlainResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof SchemasWayPlainResponse
     */
    childrenUuids: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SchemasWayPlainResponse
     */
    copiedFromWayUuid: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchemasWayPlainResponse
     */
    createdAt: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasWayPlainResponse
     */
    dayReportsAmount: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasWayPlainResponse
     */
    estimationTime: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasWayPlainResponse
     */
    favoriteForUsers: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasWayPlainResponse
     */
    goalDescription: string;
    /**
     * 
     * @type {boolean}
     * @memberof SchemasWayPlainResponse
     */
    isCompleted: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchemasWayPlainResponse
     */
    isPrivate: boolean;
    /**
     * 
     * @type {Array<SchemasUserPlainResponse>}
     * @memberof SchemasWayPlainResponse
     */
    mentors: Array<SchemasUserPlainResponse>;
    /**
     * 
     * @type {number}
     * @memberof SchemasWayPlainResponse
     */
    metricsDone: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasWayPlainResponse
     */
    metricsTotal: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasWayPlainResponse
     */
    name: string;
    /**
     * 
     * @type {SchemasUserPlainResponse}
     * @memberof SchemasWayPlainResponse
     */
    owner: SchemasUserPlainResponse;
    /**
     * 
     * @type {string}
     * @memberof SchemasWayPlainResponse
     */
    updatedAt: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasWayPlainResponse
     */
    uuid: string;
    /**
     * 
     * @type {Array<SchemasWayTagResponse>}
     * @memberof SchemasWayPlainResponse
     */
    wayTags: Array<SchemasWayTagResponse>;
}

/**
 * Check if a given object implements the SchemasWayPlainResponse interface.
 */
export function instanceOfSchemasWayPlainResponse(
    value: object
): boolean {
    let isInstance = true;
    isInstance = isInstance && "childrenUuids" in value;
    isInstance = isInstance && "copiedFromWayUuid" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "dayReportsAmount" in value;
    isInstance = isInstance && "estimationTime" in value;
    isInstance = isInstance && "favoriteForUsers" in value;
    isInstance = isInstance && "goalDescription" in value;
    isInstance = isInstance && "isCompleted" in value;
    isInstance = isInstance && "isPrivate" in value;
    isInstance = isInstance && "mentors" in value;
    isInstance = isInstance && "metricsDone" in value;
    isInstance = isInstance && "metricsTotal" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "wayTags" in value;

    return isInstance;
}

export function SchemasWayPlainResponseFromJSON(json: any): SchemasWayPlainResponse {
    return SchemasWayPlainResponseFromJSONTyped(json, false);
}

export function SchemasWayPlainResponseFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): SchemasWayPlainResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'childrenUuids': json['childrenUuids'],
        'copiedFromWayUuid': json['copiedFromWayUuid'],
        'createdAt': json['createdAt'],
        'dayReportsAmount': json['dayReportsAmount'],
        'estimationTime': json['estimationTime'],
        'favoriteForUsers': json['favoriteForUsers'],
        'goalDescription': json['goalDescription'],
        'isCompleted': json['isCompleted'],
        'isPrivate': json['isPrivate'],
        'mentors': ((json['mentors'] as Array<any>).map(SchemasUserPlainResponseFromJSON)),
        'metricsDone': json['metricsDone'],
        'metricsTotal': json['metricsTotal'],
        'name': json['name'],
        'owner': SchemasUserPlainResponseFromJSON(json['owner']),
        'updatedAt': json['updatedAt'],
        'uuid': json['uuid'],
        'wayTags': ((json['wayTags'] as Array<any>).map(SchemasWayTagResponseFromJSON)),
    };
}


export function SchemasWayPlainResponseToJSON(value?: SchemasWayPlainResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'childrenUuids': value.childrenUuids,
        'copiedFromWayUuid': value.copiedFromWayUuid,
        'createdAt': value.createdAt,
        'dayReportsAmount': value.dayReportsAmount,
        'estimationTime': value.estimationTime,
        'favoriteForUsers': value.favoriteForUsers,
        'goalDescription': value.goalDescription,
        'isCompleted': value.isCompleted,
        'isPrivate': value.isPrivate,
        'mentors': ((value.mentors as Array<any>).map(SchemasUserPlainResponseToJSON)),
        'metricsDone': value.metricsDone,
        'metricsTotal': value.metricsTotal,
        'name': value.name,
        'owner': SchemasUserPlainResponseToJSON(value.owner),
        'updatedAt': value.updatedAt,
        'uuid': value.uuid,
        'wayTags': ((value.wayTags as Array<any>).map(SchemasWayTagResponseToJSON)),
    };
}

