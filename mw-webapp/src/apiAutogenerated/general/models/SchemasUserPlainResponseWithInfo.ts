// @ts-nocheck
/* eslint-disable */
/**
 * Masters way API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SchemasUserTagResponse } from './SchemasUserTagResponse';
import {
    SchemasUserTagResponseFromJSON,
    SchemasUserTagResponseFromJSONTyped,
    SchemasUserTagResponseToJSON,
} from './SchemasUserTagResponse';

/**
 * 
 * @export
 * @interface SchemasUserPlainResponseWithInfo
 */
export interface SchemasUserPlainResponseWithInfo {
    /**
     * 
     * @type {string}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    email: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    favoriteForUsers: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    favoriteWays: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    imageUrl: string;
    /**
     * 
     * @type {boolean}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    isMentor: boolean;
    /**
     * 
     * @type {number}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    mentoringWays: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    ownWays: number;
    /**
     * 
     * @type {Array<SchemasUserTagResponse>}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    tags: Array<SchemasUserTagResponse>;
    /**
     * 
     * @type {string}
     * @memberof SchemasUserPlainResponseWithInfo
     */
    uuid: string;
}

/**
 * Check if a given object implements the SchemasUserPlainResponseWithInfo interface.
 */
export function instanceOfSchemasUserPlainResponseWithInfo(
    value: object
): boolean {
    let isInstance = true;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "favoriteForUsers" in value;
    isInstance = isInstance && "favoriteWays" in value;
    isInstance = isInstance && "imageUrl" in value;
    isInstance = isInstance && "isMentor" in value;
    isInstance = isInstance && "mentoringWays" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ownWays" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "uuid" in value;

    return isInstance;
}

export function SchemasUserPlainResponseWithInfoFromJSON(json: any): SchemasUserPlainResponseWithInfo {
    return SchemasUserPlainResponseWithInfoFromJSONTyped(json, false);
}

export function SchemasUserPlainResponseWithInfoFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): SchemasUserPlainResponseWithInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'],
        'description': json['description'],
        'email': json['email'],
        'favoriteForUsers': json['favoriteForUsers'],
        'favoriteWays': json['favoriteWays'],
        'imageUrl': json['imageUrl'],
        'isMentor': json['isMentor'],
        'mentoringWays': json['mentoringWays'],
        'name': json['name'],
        'ownWays': json['ownWays'],
        'tags': ((json['tags'] as Array<any>).map(SchemasUserTagResponseFromJSON)),
        'uuid': json['uuid'],
    };
}


export function SchemasUserPlainResponseWithInfoToJSON(value?: SchemasUserPlainResponseWithInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createdAt': value.createdAt,
        'description': value.description,
        'email': value.email,
        'favoriteForUsers': value.favoriteForUsers,
        'favoriteWays': value.favoriteWays,
        'imageUrl': value.imageUrl,
        'isMentor': value.isMentor,
        'mentoringWays': value.mentoringWays,
        'name': value.name,
        'ownWays': value.ownWays,
        'tags': ((value.tags as Array<any>).map(SchemasUserTagResponseToJSON)),
        'uuid': value.uuid,
    };
}

