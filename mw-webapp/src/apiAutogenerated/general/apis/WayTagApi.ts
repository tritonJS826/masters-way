// @ts-nocheck
/* eslint-disable */
/**
 * Masters way general API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasCreateWayTagPayload,
  SchemasWayTagResponse,
} from '../models/index';
import {
    SchemasCreateWayTagPayloadFromJSON,
    SchemasCreateWayTagPayloadToJSON,
    SchemasWayTagResponseFromJSON,
    SchemasWayTagResponseToJSON,
} from '../models/index';

export interface CreateWayTagRequest {
    request: SchemasCreateWayTagPayload;
}

export interface DeleteWayTagRequest {
    wayTagId: string;
    wayId: string;
}

/**
 * 
 */
export class WayTagApi extends runtime.BaseAPI {

    /**
     * Create a new wayTag
     */
    async createWayTagRaw(requestParameters: CreateWayTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasWayTagResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createWayTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wayTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasCreateWayTagPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasWayTagResponseFromJSON(jsonValue));
    }

    /**
     * Create a new wayTag
     */
    async createWayTag(requestParameters: CreateWayTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasWayTagResponse> {
        const response = await this.createWayTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete wayTag by UUID
     */
    async deleteWayTagRaw(requestParameters: DeleteWayTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.wayTagId === null || requestParameters.wayTagId === undefined) {
            throw new runtime.RequiredError('wayTagId','Required parameter requestParameters.wayTagId was null or undefined when calling deleteWayTag.');
        }

        if (requestParameters.wayId === null || requestParameters.wayId === undefined) {
            throw new runtime.RequiredError('wayId','Required parameter requestParameters.wayId was null or undefined when calling deleteWayTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wayTags/{wayTagId}/{wayId}`.replace(`{${"wayTagId"}}`, encodeURIComponent(String(requestParameters.wayTagId))).replace(`{${"wayId"}}`, encodeURIComponent(String(requestParameters.wayId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete wayTag by UUID
     */
    async deleteWayTag(requestParameters: DeleteWayTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWayTagRaw(requestParameters, initOverrides);
    }

}
