// @ts-nocheck
/* eslint-disable */
/**
 * Masters way general API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasCreateMetricPayload,
  SchemasMetricResponse,
  SchemasUpdateMetricPayload,
} from '../models/index';
import {
    SchemasCreateMetricPayloadFromJSON,
    SchemasCreateMetricPayloadToJSON,
    SchemasMetricResponseFromJSON,
    SchemasMetricResponseToJSON,
    SchemasUpdateMetricPayloadFromJSON,
    SchemasUpdateMetricPayloadToJSON,
} from '../models/index';

export interface CreateMetricRequest {
    request: SchemasCreateMetricPayload;
}

export interface DeleteMetricRequest {
    metricId: string;
}

export interface UpdateMetricRequest {
    metricId: string;
    request: SchemasUpdateMetricPayload;
}

/**
 * 
 */
export class MetricApi extends runtime.BaseAPI {

    /**
     * Create a new metric
     */
    async createMetricRaw(requestParameters: CreateMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasMetricResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createMetric.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/metrics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasCreateMetricPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasMetricResponseFromJSON(jsonValue));
    }

    /**
     * Create a new metric
     */
    async createMetric(requestParameters: CreateMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasMetricResponse> {
        const response = await this.createMetricRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete metric by UUID
     */
    async deleteMetricRaw(requestParameters: DeleteMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.metricId === null || requestParameters.metricId === undefined) {
            throw new runtime.RequiredError('metricId','Required parameter requestParameters.metricId was null or undefined when calling deleteMetric.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/metrics/{metricId}`.replace(`{${"metricId"}}`, encodeURIComponent(String(requestParameters.metricId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete metric by UUID
     */
    async deleteMetric(requestParameters: DeleteMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMetricRaw(requestParameters, initOverrides);
    }

    /**
     * Update metric by UUID
     */
    async updateMetricRaw(requestParameters: UpdateMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasMetricResponse>> {
        if (requestParameters.metricId === null || requestParameters.metricId === undefined) {
            throw new runtime.RequiredError('metricId','Required parameter requestParameters.metricId was null or undefined when calling updateMetric.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateMetric.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/metrics/{metricId}`.replace(`{${"metricId"}}`, encodeURIComponent(String(requestParameters.metricId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasUpdateMetricPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasMetricResponseFromJSON(jsonValue));
    }

    /**
     * Update metric by UUID
     */
    async updateMetric(requestParameters: UpdateMetricRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasMetricResponse> {
        const response = await this.updateMetricRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
