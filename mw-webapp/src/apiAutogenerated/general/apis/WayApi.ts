// @ts-nocheck
/* eslint-disable */
/**
 * Masters way general API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasCreateWayPayload,
  SchemasGetAllWaysResponse,
  SchemasUpdateWayPayload,
  SchemasWayPlainResponse,
  SchemasWayPopulatedResponse,
} from '../models/index';
import {
    SchemasCreateWayPayloadFromJSON,
    SchemasCreateWayPayloadToJSON,
    SchemasGetAllWaysResponseFromJSON,
    SchemasGetAllWaysResponseToJSON,
    SchemasUpdateWayPayloadFromJSON,
    SchemasUpdateWayPayloadToJSON,
    SchemasWayPlainResponseFromJSON,
    SchemasWayPlainResponseToJSON,
    SchemasWayPopulatedResponseFromJSON,
    SchemasWayPopulatedResponseToJSON,
} from '../models/index';

export interface CreateWayRequest {
    request: SchemasCreateWayPayload;
}

export interface DeleteWayRequest {
    wayId: string;
}

export interface GetAllWaysRequest {
    page?: number;
    limit?: number;
    status?: string;
}

export interface GetWayByUuidRequest {
    wayId: string;
}

export interface UpdateWayRequest {
    wayId: string;
    request: SchemasUpdateWayPayload;
}

/**
 * 
 */
export class WayApi extends runtime.BaseAPI {

    /**
     * Create a new way
     */
    async createWayRaw(requestParameters: CreateWayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasWayPlainResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createWay.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasCreateWayPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasWayPlainResponseFromJSON(jsonValue));
    }

    /**
     * Create a new way
     */
    async createWay(requestParameters: CreateWayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasWayPlainResponse> {
        const response = await this.createWayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete way by UUID
     */
    async deleteWayRaw(requestParameters: DeleteWayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.wayId === null || requestParameters.wayId === undefined) {
            throw new runtime.RequiredError('wayId','Required parameter requestParameters.wayId was null or undefined when calling deleteWay.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ways/{wayId}`.replace(`{${"wayId"}}`, encodeURIComponent(String(requestParameters.wayId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete way by UUID
     */
    async deleteWay(requestParameters: DeleteWayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWayRaw(requestParameters, initOverrides);
    }

    /**
     * Get ways with pagination
     * Get all ways
     */
    async getAllWaysRaw(requestParameters: GetAllWaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasGetAllWaysResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ways`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasGetAllWaysResponseFromJSON(jsonValue));
    }

    /**
     * Get ways with pagination
     * Get all ways
     */
    async getAllWays(requestParameters: GetAllWaysRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasGetAllWaysResponse> {
        const response = await this.getAllWaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get way by UUID
     */
    async getWayByUuidRaw(requestParameters: GetWayByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasWayPopulatedResponse>> {
        if (requestParameters.wayId === null || requestParameters.wayId === undefined) {
            throw new runtime.RequiredError('wayId','Required parameter requestParameters.wayId was null or undefined when calling getWayByUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ways/{wayId}`.replace(`{${"wayId"}}`, encodeURIComponent(String(requestParameters.wayId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasWayPopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Get way by UUID
     */
    async getWayByUuid(requestParameters: GetWayByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasWayPopulatedResponse> {
        const response = await this.getWayByUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update way by UUID
     */
    async updateWayRaw(requestParameters: UpdateWayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasWayPlainResponse>> {
        if (requestParameters.wayId === null || requestParameters.wayId === undefined) {
            throw new runtime.RequiredError('wayId','Required parameter requestParameters.wayId was null or undefined when calling updateWay.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateWay.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ways/{wayId}`.replace(`{${"wayId"}}`, encodeURIComponent(String(requestParameters.wayId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasUpdateWayPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasWayPlainResponseFromJSON(jsonValue));
    }

    /**
     * Update way by UUID
     */
    async updateWay(requestParameters: UpdateWayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasWayPlainResponse> {
        const response = await this.updateWayRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
