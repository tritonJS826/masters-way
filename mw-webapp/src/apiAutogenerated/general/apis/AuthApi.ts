// @ts-nocheck
/* eslint-disable */
/**
 * Masters way general API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasUserPopulatedResponse,
  UtilResponseStatusString,
} from '../models/index';
import {
    SchemasUserPopulatedResponseFromJSON,
    SchemasUserPopulatedResponseToJSON,
    UtilResponseStatusStringFromJSON,
    UtilResponseStatusStringToJSON,
} from '../models/index';

export interface BeginAuthRequest {
    provider: string;
}

export interface GetTokenLocallyRequest {
    userEmail: string;
}

export interface GoogleAuthLogInCallbackFunctionRequest {
    state: string;
    provider: string;
}

export interface LogoutCurrentAuthorizedUserRequest {
    provider: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Begin oauth
     */
    async beginAuthRaw(requestParameters: BeginAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling beginAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Begin oauth
     */
    async beginAuth(requestParameters: BeginAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.beginAuthRaw(requestParameters, initOverrides);
    }

    /**
     * Get current authorized user
     */
    async getCurrentAuthorizedUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasUserPopulatedResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasUserPopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Get current authorized user
     */
    async getCurrentAuthorizedUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasUserPopulatedResponse> {
        const response = await this.getCurrentAuthorizedUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login locally by providing an email address.
     * login locally by email (with no oauth)
     */
    async getTokenLocallyRaw(requestParameters: GetTokenLocallyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userEmail === null || requestParameters.userEmail === undefined) {
            throw new runtime.RequiredError('userEmail','Required parameter requestParameters.userEmail was null or undefined when calling getTokenLocally.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/login/local/{userEmail}`.replace(`{${"userEmail"}}`, encodeURIComponent(String(requestParameters.userEmail))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Login locally by providing an email address.
     * login locally by email (with no oauth)
     */
    async getTokenLocally(requestParameters: GetTokenLocallyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getTokenLocallyRaw(requestParameters, initOverrides);
    }

    /**
     * Log in with google oAuth
     */
    async googleAuthLogInCallbackFunctionRaw(requestParameters: GoogleAuthLogInCallbackFunctionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.state === null || requestParameters.state === undefined) {
            throw new runtime.RequiredError('state','Required parameter requestParameters.state was null or undefined when calling googleAuthLogInCallbackFunction.');
        }

        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling googleAuthLogInCallbackFunction.');
        }

        const queryParameters: any = {};

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{provider}/callback`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log in with google oAuth
     */
    async googleAuthLogInCallbackFunction(requestParameters: GoogleAuthLogInCallbackFunctionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleAuthLogInCallbackFunctionRaw(requestParameters, initOverrides);
    }

    /**
     * Logout current authorized user
     */
    async logoutCurrentAuthorizedUserRaw(requestParameters: LogoutCurrentAuthorizedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UtilResponseStatusString>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling logoutCurrentAuthorizedUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/logout/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UtilResponseStatusStringFromJSON(jsonValue));
    }

    /**
     * Logout current authorized user
     */
    async logoutCurrentAuthorizedUser(requestParameters: LogoutCurrentAuthorizedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UtilResponseStatusString> {
        const response = await this.logoutCurrentAuthorizedUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
