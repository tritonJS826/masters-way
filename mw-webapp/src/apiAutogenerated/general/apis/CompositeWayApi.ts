// @ts-nocheck
/* eslint-disable */
/**
 * Masters way API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasAddWayToCompositeWayPayload,
  SchemasCompositeWayRelation,
} from '../models/index';
import {
    SchemasAddWayToCompositeWayPayloadFromJSON,
    SchemasAddWayToCompositeWayPayloadToJSON,
    SchemasCompositeWayRelationFromJSON,
    SchemasCompositeWayRelationToJSON,
} from '../models/index';

export interface CreateCompositeWayRequest {
    request: SchemasAddWayToCompositeWayPayload;
}

export interface DeleteCompositeWayRelationRequest {
    parentWayId: string;
    childWayId: string;
}

/**
 * 
 */
export class CompositeWayApi extends runtime.BaseAPI {

    /**
     * Add a way to composite way
     */
    async createCompositeWayRaw(requestParameters: CreateCompositeWayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasCompositeWayRelation>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createCompositeWay.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/compositeWay`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasAddWayToCompositeWayPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasCompositeWayRelationFromJSON(jsonValue));
    }

    /**
     * Add a way to composite way
     */
    async createCompositeWay(requestParameters: CreateCompositeWayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasCompositeWayRelation> {
        const response = await this.createCompositeWayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete composite way relation
     */
    async deleteCompositeWayRelationRaw(requestParameters: DeleteCompositeWayRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.parentWayId === null || requestParameters.parentWayId === undefined) {
            throw new runtime.RequiredError('parentWayId','Required parameter requestParameters.parentWayId was null or undefined when calling deleteCompositeWayRelation.');
        }

        if (requestParameters.childWayId === null || requestParameters.childWayId === undefined) {
            throw new runtime.RequiredError('childWayId','Required parameter requestParameters.childWayId was null or undefined when calling deleteCompositeWayRelation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/compositeWay/{parentWayId}/{childWayId}`.replace(`{${"parentWayId"}}`, encodeURIComponent(String(requestParameters.parentWayId))).replace(`{${"childWayId"}}`, encodeURIComponent(String(requestParameters.childWayId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete composite way relation
     */
    async deleteCompositeWayRelation(requestParameters: DeleteCompositeWayRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCompositeWayRelationRaw(requestParameters, initOverrides);
    }

}
