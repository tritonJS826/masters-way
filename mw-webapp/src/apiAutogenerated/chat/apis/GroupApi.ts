// @ts-nocheck
/* eslint-disable */
/**
 * Masters way chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ControllersMakeMessageInGroupRoomPayload,
  ControllersMakeRequestsToGroupRoomPayload,
} from '../models/index';
import {
    ControllersMakeMessageInGroupRoomPayloadFromJSON,
    ControllersMakeMessageInGroupRoomPayloadToJSON,
    ControllersMakeRequestsToGroupRoomPayloadFromJSON,
    ControllersMakeRequestsToGroupRoomPayloadToJSON,
} from '../models/index';

export interface AcceptRequestsToGroupRoomRequest {
    groupRoomId: string;
}

export interface AddUserToGroupRequest {
    groupRoomId: string;
    userId: string;
}

export interface DeleteRequestsToGroupRoomRequest {
    groupRoomId: string;
}

export interface DeleteUserToGroupRequest {
    groupRoomId: string;
    userId: string;
}

export interface GetGroupRoomByIdRequest {
    groupRoomId: string;
}

export interface MakeMessageInGroupRoomRequest {
    groupRoomId: string;
    request: ControllersMakeMessageInGroupRoomPayload;
}

export interface MakeRequestsToGroupRoomRequest {
    request: ControllersMakeRequestsToGroupRoomPayload;
}

export interface UpdateGroupRoomsRequest {
    groupRoomId: string;
}

/**
 * 
 */
export class GroupApi extends runtime.BaseAPI {

    /**
     * Accept requests to group room
     */
    async acceptRequestsToGroupRoomRaw(requestParameters: AcceptRequestsToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling acceptRequestsToGroupRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/requests/accept/{groupRoomId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Accept requests to group room
     */
    async acceptRequestsToGroupRoom(requestParameters: AcceptRequestsToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.acceptRequestsToGroupRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add user to group room
     */
    async addUserToGroupRaw(requestParameters: AddUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling addUserToGroup.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserToGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}/users/{userId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Add user to group room
     */
    async addUserToGroup(requestParameters: AddUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.addUserToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create group rooms for user
     */
    async createGroupRoomsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create group rooms for user
     */
    async createGroupRooms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.createGroupRoomsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete requests to group room
     */
    async deleteRequestsToGroupRoomRaw(requestParameters: DeleteRequestsToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling deleteRequestsToGroupRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/requests/decline/{groupRoomId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete requests to group room
     */
    async deleteRequestsToGroupRoom(requestParameters: DeleteRequestsToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteRequestsToGroupRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete user to group room
     */
    async deleteUserToGroupRaw(requestParameters: DeleteUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling deleteUserToGroup.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUserToGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}/users/{userId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete user to group room
     */
    async deleteUserToGroup(requestParameters: DeleteUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteUserToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group room by id
     */
    async getGroupRoomByIdRaw(requestParameters: GetGroupRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling getGroupRoomById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get group room by id
     */
    async getGroupRoomById(requestParameters: GetGroupRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getGroupRoomByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group rooms preview for user
     */
    async getGroupRoomsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get group rooms preview for user
     */
    async getGroupRooms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getGroupRoomsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get requests to group room
     */
    async getRequestsToGroupRoomRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get requests to group room
     */
    async getRequestsToGroupRoom(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getRequestsToGroupRoomRaw(initOverrides);
        return await response.value();
    }

    /**
     * Make message to group room
     */
    async makeMessageInGroupRoomRaw(requestParameters: MakeMessageInGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling makeMessageInGroupRoom.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling makeMessageInGroupRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}/messages`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersMakeMessageInGroupRoomPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Make message to group room
     */
    async makeMessageInGroupRoom(requestParameters: MakeMessageInGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.makeMessageInGroupRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Make requests to group room
     */
    async makeRequestsToGroupRoomRaw(requestParameters: MakeRequestsToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling makeRequestsToGroupRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/group-rooms/requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersMakeRequestsToGroupRoomPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Make requests to group room
     */
    async makeRequestsToGroupRoom(requestParameters: MakeRequestsToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.makeRequestsToGroupRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update group rooms for user
     */
    async updateGroupRoomsRaw(requestParameters: UpdateGroupRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling updateGroupRooms.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update group rooms for user
     */
    async updateGroupRooms(requestParameters: UpdateGroupRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.updateGroupRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
