// @ts-nocheck
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasCreateMessagePayload,
  SchemasCreateRequestToGroupRoomPayload,
  SchemasDeclineRequestToGroupRoomResponse,
  SchemasGetRequestsToGroupRoomResponse,
  SchemasGetRoomsResponse,
  SchemasMessageResponse,
  SchemasRoomPopulatedResponse,
} from '../models/index';
import {
    SchemasCreateMessagePayloadFromJSON,
    SchemasCreateMessagePayloadToJSON,
    SchemasCreateRequestToGroupRoomPayloadFromJSON,
    SchemasCreateRequestToGroupRoomPayloadToJSON,
    SchemasDeclineRequestToGroupRoomResponseFromJSON,
    SchemasDeclineRequestToGroupRoomResponseToJSON,
    SchemasGetRequestsToGroupRoomResponseFromJSON,
    SchemasGetRequestsToGroupRoomResponseToJSON,
    SchemasGetRoomsResponseFromJSON,
    SchemasGetRoomsResponseToJSON,
    SchemasMessageResponseFromJSON,
    SchemasMessageResponseToJSON,
    SchemasRoomPopulatedResponseFromJSON,
    SchemasRoomPopulatedResponseToJSON,
} from '../models/index';

export interface AcceptRequestToGroupRoomRequest {
    groupRoomId: string;
}

export interface AddUserToGroupRequest {
    groupRoomId: string;
    userId: string;
}

export interface CreateMessageInGroupRoomRequest {
    groupRoomId: string;
    request: SchemasCreateMessagePayload;
}

export interface CreateRequestsToGroupRoomRequest {
    request: SchemasCreateRequestToGroupRoomPayload;
}

export interface DeclineRequestToGroupRoomRequest {
    groupRoomId: string;
}

export interface DeleteUserToGroupRequest {
    groupRoomId: string;
    userId: string;
}

export interface GetGroupRoomByIdRequest {
    groupRoomId: string;
}

export interface UpdateGroupRoomsRequest {
    groupRoomId: string;
}

/**
 * 
 */
export class GroupApi extends runtime.BaseAPI {

    /**
     * Accept request to group room
     */
    async acceptRequestToGroupRoomRaw(requestParameters: AcceptRequestToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasRoomPopulatedResponse>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling acceptRequestToGroupRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}/requests/accept`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasRoomPopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Accept request to group room
     */
    async acceptRequestToGroupRoom(requestParameters: AcceptRequestToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasRoomPopulatedResponse> {
        const response = await this.acceptRequestToGroupRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add user to group room
     */
    async addUserToGroupRaw(requestParameters: AddUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasRoomPopulatedResponse>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling addUserToGroup.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserToGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}/users/{userId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasRoomPopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Add user to group room
     */
    async addUserToGroup(requestParameters: AddUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasRoomPopulatedResponse> {
        const response = await this.addUserToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create group rooms for user
     */
    async createGroupRoomsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasRoomPopulatedResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasRoomPopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Create group rooms for user
     */
    async createGroupRooms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasRoomPopulatedResponse> {
        const response = await this.createGroupRoomsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create message to group room
     */
    async createMessageInGroupRoomRaw(requestParameters: CreateMessageInGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasMessageResponse>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling createMessageInGroupRoom.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createMessageInGroupRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}/messages`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasCreateMessagePayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasMessageResponseFromJSON(jsonValue));
    }

    /**
     * Create message to group room
     */
    async createMessageInGroupRoom(requestParameters: CreateMessageInGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasMessageResponse> {
        const response = await this.createMessageInGroupRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create requests to group room
     */
    async createRequestsToGroupRoomRaw(requestParameters: CreateRequestsToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createRequestsToGroupRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/group-rooms/requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasCreateRequestToGroupRoomPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create requests to group room
     */
    async createRequestsToGroupRoom(requestParameters: CreateRequestsToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createRequestsToGroupRoomRaw(requestParameters, initOverrides);
    }

    /**
     * Decline request to group room
     */
    async declineRequestToGroupRoomRaw(requestParameters: DeclineRequestToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasDeclineRequestToGroupRoomResponse>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling declineRequestToGroupRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}/requests/decline`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasDeclineRequestToGroupRoomResponseFromJSON(jsonValue));
    }

    /**
     * Decline request to group room
     */
    async declineRequestToGroupRoom(requestParameters: DeclineRequestToGroupRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasDeclineRequestToGroupRoomResponse> {
        const response = await this.declineRequestToGroupRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete user to group room
     */
    async deleteUserToGroupRaw(requestParameters: DeleteUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasRoomPopulatedResponse>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling deleteUserToGroup.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUserToGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}/users/{userId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasRoomPopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Delete user to group room
     */
    async deleteUserToGroup(requestParameters: DeleteUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasRoomPopulatedResponse> {
        const response = await this.deleteUserToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group room by id
     */
    async getGroupRoomByIdRaw(requestParameters: GetGroupRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasRoomPopulatedResponse>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling getGroupRoomById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasRoomPopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Get group room by id
     */
    async getGroupRoomById(requestParameters: GetGroupRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasRoomPopulatedResponse> {
        const response = await this.getGroupRoomByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group rooms preview for user
     */
    async getGroupRoomsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasGetRoomsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasGetRoomsResponseFromJSON(jsonValue));
    }

    /**
     * Get group rooms preview for user
     */
    async getGroupRooms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasGetRoomsResponse> {
        const response = await this.getGroupRoomsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get requests to group room
     */
    async getRequestsToGroupRoomRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasGetRequestsToGroupRoomResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasGetRequestsToGroupRoomResponseFromJSON(jsonValue));
    }

    /**
     * Get requests to group room
     */
    async getRequestsToGroupRoom(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasGetRequestsToGroupRoomResponse> {
        const response = await this.getRequestsToGroupRoomRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update group rooms for user
     */
    async updateGroupRoomsRaw(requestParameters: UpdateGroupRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasRoomPopulatedResponse>> {
        if (requestParameters.groupRoomId === null || requestParameters.groupRoomId === undefined) {
            throw new runtime.RequiredError('groupRoomId','Required parameter requestParameters.groupRoomId was null or undefined when calling updateGroupRooms.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group-rooms/{groupRoomId}`.replace(`{${"groupRoomId"}}`, encodeURIComponent(String(requestParameters.groupRoomId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasRoomPopulatedResponseFromJSON(jsonValue));
    }

    /**
     * Update group rooms for user
     */
    async updateGroupRooms(requestParameters: UpdateGroupRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasRoomPopulatedResponse> {
        const response = await this.updateGroupRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
