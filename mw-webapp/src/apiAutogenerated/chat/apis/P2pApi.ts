// @ts-nocheck
/* eslint-disable */
/**
 * Masters way chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ControllersMakeMessageInP2PRoomPayload,
} from '../models/index';
import {
    ControllersMakeMessageInP2PRoomPayloadFromJSON,
    ControllersMakeMessageInP2PRoomPayloadToJSON,
} from '../models/index';

export interface GetP2pRoomByIdRequest {
    p2pRoomId: string;
}

export interface MakeMessageInP2pRoomRequest {
    p2pRoomId: string;
    request: ControllersMakeMessageInP2PRoomPayload;
}

export interface UpdateP2pRoomRequest {
    p2pRoomId: string;
}

/**
 * 
 */
export class P2pApi extends runtime.BaseAPI {

    /**
     * Create p2p room for user
     */
    async createP2pRoomRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/p2p-rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create p2p room for user
     */
    async createP2pRoom(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.createP2pRoomRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get p2p room by id
     */
    async getP2pRoomByIdRaw(requestParameters: GetP2pRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.p2pRoomId === null || requestParameters.p2pRoomId === undefined) {
            throw new runtime.RequiredError('p2pRoomId','Required parameter requestParameters.p2pRoomId was null or undefined when calling getP2pRoomById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/p2p-rooms/{p2pRoomId}`.replace(`{${"p2pRoomId"}}`, encodeURIComponent(String(requestParameters.p2pRoomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get p2p room by id
     */
    async getP2pRoomById(requestParameters: GetP2pRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getP2pRoomByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get p2p rooms for user
     */
    async getP2pRoomsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/p2p-rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get p2p rooms for user
     */
    async getP2pRooms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getP2pRoomsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Make message in p2p room
     */
    async makeMessageInP2pRoomRaw(requestParameters: MakeMessageInP2pRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.p2pRoomId === null || requestParameters.p2pRoomId === undefined) {
            throw new runtime.RequiredError('p2pRoomId','Required parameter requestParameters.p2pRoomId was null or undefined when calling makeMessageInP2pRoom.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling makeMessageInP2pRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/p2p-rooms/{p2pRoomId}/messages`.replace(`{${"p2pRoomId"}}`, encodeURIComponent(String(requestParameters.p2pRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersMakeMessageInP2PRoomPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Make message in p2p room
     */
    async makeMessageInP2pRoom(requestParameters: MakeMessageInP2pRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.makeMessageInP2pRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update p2p room for user
     */
    async updateP2pRoomRaw(requestParameters: UpdateP2pRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.p2pRoomId === null || requestParameters.p2pRoomId === undefined) {
            throw new runtime.RequiredError('p2pRoomId','Required parameter requestParameters.p2pRoomId was null or undefined when calling updateP2pRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/p2p-rooms/{p2pRoomId}`.replace(`{${"p2pRoomId"}}`, encodeURIComponent(String(requestParameters.p2pRoomId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update p2p room for user
     */
    async updateP2pRoom(requestParameters: UpdateP2pRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.updateP2pRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
