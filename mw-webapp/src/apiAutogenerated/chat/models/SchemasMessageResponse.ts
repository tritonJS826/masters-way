// @ts-nocheck
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SchemasMessageReaders } from './SchemasMessageReaders';
import {
    SchemasMessageReadersFromJSON,
    SchemasMessageReadersFromJSONTyped,
    SchemasMessageReadersToJSON,
} from './SchemasMessageReaders';

/**
 * 
 * @export
 * @interface SchemasMessageResponse
 */
export interface SchemasMessageResponse {
    /**
     * 
     * @type {string}
     * @memberof SchemasMessageResponse
     */
    message: string;
    /**
     * 
     * @type {Array<SchemasMessageReaders>}
     * @memberof SchemasMessageResponse
     */
    messageReaders: Array<SchemasMessageReaders>;
    /**
     * 
     * @type {string}
     * @memberof SchemasMessageResponse
     */
    ownerId: string;
}

/**
 * Check if a given object implements the SchemasMessageResponse interface.
 */
export function instanceOfSchemasMessageResponse(
    value: object
): boolean {
    let isInstance = true;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "messageReaders" in value;
    isInstance = isInstance && "ownerId" in value;

    return isInstance;
}

export function SchemasMessageResponseFromJSON(json: any): SchemasMessageResponse {
    return SchemasMessageResponseFromJSONTyped(json, false);
}

export function SchemasMessageResponseFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): SchemasMessageResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'message': json['message'],
        'messageReaders': ((json['messageReaders'] as Array<any>).map(SchemasMessageReadersFromJSON)),
        'ownerId': json['ownerId'],
    };
}


export function SchemasMessageResponseToJSON(value?: SchemasMessageResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'message': value.message,
        'messageReaders': ((value.messageReaders as Array<any>).map(SchemasMessageReadersToJSON)),
        'ownerId': value.ownerId,
    };
}

