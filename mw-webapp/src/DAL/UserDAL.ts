import {CreateUserRequest, DeleteUserRequest, UpdateUserRequest} from "src/apiAutogenerated";
import {UserDTOToUserConverter} from "src/DAL/DTOToPreviewConverter/userDTOToUser";
import {UserDTOToUserNotSaturatedWayConverter}
  from "src/DAL/DTOToPreviewConverter/userDTOToUserNotSaturatedWayConverter";
import {User} from "src/model/businessModel/User";
import {UserNotSaturatedWay} from "src/model/businessModelPreview/UserNotSaturatedWay";
import {UserServiceU} from "src/serviceUpdated/UserService";

/**
 * Provides methods to interact with the User model
 */
export class UserDAL {

  /**
   * Get all Users
   */
  public static async getUsers(): Promise<UserNotSaturatedWay[]> {
    const usersDTO = await UserServiceU.getAllUsers();

    const usersNotSaturatedWay = usersDTO.users.map(UserDTOToUserNotSaturatedWayConverter);

    return usersNotSaturatedWay;
  }

  /**
   * Create user
   */
  public static async createUser(requestParameters: CreateUserRequest): Promise<void> {
    await UserServiceU.createUser(requestParameters);
  }

  /**
   * Get user by UUID
   */
  public static async getUserByUuid(userUuid: string): Promise<User> {
    const userDTO = await UserServiceU.getUserByUuid({userId: userUuid});
    const user = UserDTOToUserConverter(userDTO);

    return user;
  }

  /**
   * Update user
   */
  public static async updateUser(requestParameters: UpdateUserRequest) {
    await UserServiceU.updateUser(requestParameters);
  }

  /**
   * Delete user
   */
  public static async deleteUser(requestParameters: DeleteUserRequest): Promise<void> {
    await UserServiceU.deleteUser(requestParameters);
  }

}
