/* eslint-disable @typescript-eslint/no-explicit-any */
import {
  CreateP2pRoomRequest,
  GetP2pRoomByIdRequest,
  MakeMessageInP2pRoomRequest,
  SchemasGetRoomsResponse,
  SchemasMessageResponse,
  SchemasRoomPopulatedResponse,
  UpdateP2pRoomRequest,
} from "src/apiAutogenerated/chat";
import {chatP2P} from "src/service/services";

/**
 * Provides methods to interact with the person to person chat
 */
export class ChatP2PService {

  /**
   * Create P2P chat room
   */
  public static async createP2pRoom(requestParameters: CreateP2pRoomRequest): Promise<SchemasRoomPopulatedResponse> {
    const p2pRoom = await chatP2P.createP2pRoom(requestParameters);

    return p2pRoom;
  }

  /**
   * Get P2P chat room by ID
   */
  public static async getP2pRoomById(requestParameters: GetP2pRoomByIdRequest): Promise<SchemasRoomPopulatedResponse> {
    const p2pRoom = await chatP2P.getP2pRoomById(requestParameters);

    return p2pRoom;
  }

  /**
   * Get P2P chat rooms for user
   */
  public static async getP2pRooms(requestParameters: RequestInit): Promise<SchemasGetRoomsResponse> {
    const p2pRooms = await chatP2P.getP2pRooms(requestParameters);

    return p2pRooms;
  }

  /**
   * Make message in P2P chat room
   */
  public static async makeMessageInP2pRoom(requestParameters: MakeMessageInP2pRoomRequest): Promise<SchemasMessageResponse> {
    const p2pRoomMessage = await chatP2P.makeMessageInP2pRoom(requestParameters);

    return p2pRoomMessage;
  }

  /**
   * Update P2P chat room
   */
  public static async updateP2pRoom(requestParameters: UpdateP2pRoomRequest): Promise<SchemasRoomPopulatedResponse> {
    const p2pRoomUpdated = await chatP2P.updateP2pRoom(requestParameters);

    return p2pRoomUpdated;
  }

}
