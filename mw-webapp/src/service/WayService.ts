import {
  CreateWayRequest,
  DeleteWayRequest,
  GetAllWaysRequest,
  GetWayByUuidRequest,
  SchemasGetAllWaysResponse,
  SchemasWayPlainResponse,
  SchemasWayPopulatedResponse,
  UpdateWayRequest,
} from "src/apiAutogenerated/general";
import {Way} from "src/model/businessModel/Way";
import {wayService} from "src/service/services";

/**
 * WayDTO props without uuid
 */
export type WayDTOWithoutUuid = Omit<Way, "uuid">;

export type GetWaysFilter = {

  /**
   * Show only ways in progress
   */
  isInProgress?: boolean;

  /**
   * Show only completed ways
   */
  isCompleted?: boolean;

  /**
   * Show only abandoned ways
   */
  isAbandoned?: boolean;
}

/**
 * Pagination and filter params
 */
export interface GetWaysParams {

  /**
   * Page
   */
  page?: number;

  /**
   * Limit
   */
  limit?: number;

  /**
   * Status
   */
  status?: string;

}

/**
 * Provides methods to interact with the Ways
 */
export class WayService {

  /**
   * Get all ways
   */
  public static async getAllWays(requestParameters: GetAllWaysRequest = {}): Promise<SchemasGetAllWaysResponse> {
    const allWays = await wayService.getAllWays(requestParameters);

    return allWays;
  }

  /**
   * Create way
   */
  public static async createWay(requestParameters: CreateWayRequest): Promise<SchemasWayPlainResponse> {
    const way = await wayService.createWay(requestParameters);

    return way;
  }

  /**
   * Get way by UUID
   */
  public static async getWayByUuid(requestParameters: GetWayByUuidRequest): Promise<SchemasWayPopulatedResponse> {
    const way = await wayService.getWayByUuid(requestParameters);

    return way;
  }

  /**
   * Update way
   */
  public static async updateWay(requestParameters: UpdateWayRequest): Promise<SchemasWayPlainResponse> {
    const updatedWay = await wayService.updateWay(requestParameters);

    return updatedWay;
  }

  /**
   * Delete way
   */
  public static async deleteWay(requestParameters: DeleteWayRequest): Promise<void> {
    await wayService.deleteWay(requestParameters);
  }

}

