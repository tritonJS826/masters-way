/* eslint-disable @typescript-eslint/no-explicit-any */
import {
  AcceptRequestToGroupRoomRequest,
  AddUserToGroupRequest,
  CreateMessageInGroupRoomRequest,
  CreateRequestsToGroupRoomRequest,
  DeclineRequestToGroupRoomRequest,
  DeleteUserToGroupRequest,
  GetGroupRoomByIdRequest,
  SchemasDeclineRequestToGroupRoomResponse,
  SchemasGetRequestsToGroupRoomResponse,
  SchemasGetRoomsResponse,
  SchemasMessageResponse,
  SchemasRoomPopulatedResponse,
  UpdateGroupRoomsRequest,
} from "src/apiAutogenerated/chat";
import {chatGroup} from "src/service/services";

/**
 * Provides methods to interact with the group chat
 */
export class ChatGroupService {

  /**
   * Create group chat room
   */
  public static async createGroupRoom(requestParameters: RequestInit): Promise<SchemasRoomPopulatedResponse> {
    const groupRoom = await chatGroup.createGroupRooms(requestParameters);

    return groupRoom;
  }

  /**
   * Accept request to group chat room
   */
  public static async acceptRequestToGroupRoom(
    requestParameters: AcceptRequestToGroupRoomRequest,
  ): Promise<SchemasRoomPopulatedResponse> {
    const groupRoom = await chatGroup.acceptRequestToGroupRoom(requestParameters);

    return groupRoom;
  }

  /**
   * Add user to group chat room
   */
  public static async addUserToGroup(requestParameters: AddUserToGroupRequest): Promise<SchemasRoomPopulatedResponse> {
    const groupRoom = await chatGroup.addUserToGroup(requestParameters);

    return groupRoom;
  }

  /**
   * Delete requests to group chat room
   */
  public static async declineRequestToGroupRoom(
    requestParameters: DeclineRequestToGroupRoomRequest,
  ): Promise<SchemasDeclineRequestToGroupRoomResponse> {
    const groupRoom = await chatGroup.declineRequestToGroupRoom(requestParameters);

    return groupRoom;
  }

  /**
   * Delete user from group chat room
   */
  public static async deleteUserFromGroup(requestParameters: DeleteUserToGroupRequest): Promise<SchemasRoomPopulatedResponse> {
    const groupRoom = await chatGroup.deleteUserToGroup(requestParameters);

    return groupRoom;
  }

  /**
   * Get group chat room by ID
   */
  public static async getGroupRoomById(requestParameters: GetGroupRoomByIdRequest): Promise<SchemasRoomPopulatedResponse> {
    const groupRoom = await chatGroup.getGroupRoomById(requestParameters);

    return groupRoom;
  }

  /**
   * Get group chat rooms
   */
  public static async getGroupRooms(requestParameters: RequestInit): Promise<SchemasGetRoomsResponse> {
    const groupRooms = await chatGroup.getGroupRooms(requestParameters);

    return groupRooms;
  }

  /**
   * Get requests to group chat room
   */
  public static async getRequestsToGroupRoom(requestParameters: RequestInit): Promise<SchemasGetRequestsToGroupRoomResponse> {
    const requestsToGroupRoom = await chatGroup.getRequestsToGroupRoom(requestParameters);

    return requestsToGroupRoom;
  }

  /**
   * Create message in group chat room
   */
  public static async createMessageInGroupRoom(
    requestParameters: CreateMessageInGroupRoomRequest,
  ): Promise<SchemasMessageResponse> {
    const message = await chatGroup.createMessageInGroupRoom(requestParameters);

    return message;
  }

  /**
   * Create request to group chat room
   */
  public static async createRequestToGroupRoom(
    requestParameters: CreateRequestsToGroupRoomRequest,
  ): Promise<void> {
    await chatGroup.createRequestsToGroupRoom(requestParameters);
  }

  /**
   * Update group chat room
   */
  public static async updateGroupRooms(requestParameters: UpdateGroupRoomsRequest): Promise<SchemasRoomPopulatedResponse> {
    const groupRoomUpdated = await chatGroup.updateGroupRooms(requestParameters);

    return groupRoomUpdated;
  }

}
