import {
  CreateCompositeWayRequest,
  DeleteCompositeWayRelationRequest,
  SchemasCompositeWayRelation,
} from "src/apiAutogenerated/general";
import {Way} from "src/model/businessModel/Way";
import {compositeWayService} from "src/service/services";

/**
 * WayDTO props without uuid
 */
export type WayDTOWithoutUuid = Omit<Way, "uuid">;

export type GetWaysFilter = {

  /**
   * Show only ways in progress
   */
  isInProgress?: boolean;

  /**
   * Show only completed ways
   */
  isCompleted?: boolean;

  /**
   * Show only abandoned ways
   */
  isAbandoned?: boolean;
}

/**
 * Pagination and filter params
 */
export interface GetWaysParams {

  /**
   * Page
   */
  page?: number;

  /**
   * Limit
   */
  limit?: number;

  /**
   * Status
   */
  status?: string;

}

/**
 * Provides methods to interact with the Ways
 */
export class CompositeWayService {

  /**
   * Add way to composite way
   */
  public static async addWayToComposite(requestParameters: CreateCompositeWayRequest): Promise<SchemasCompositeWayRelation> {
    const compositeWayRelation = await compositeWayService.createCompositeWay(requestParameters);

    return compositeWayRelation;
  }

  /**
   * Delete way from composite way
   */
  public static async deleteWayFromComposite(requestParameters: DeleteCompositeWayRelationRequest): Promise<void> {
    await compositeWayService.deleteCompositeWayRelation(requestParameters);
  }

}

