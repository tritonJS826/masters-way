import {Timestamp} from "firebase/firestore";
import {dayReportToDayReportDTOConverter} from "src/dataAccessLogic/BusinessToDTOConverter/dayReportToDayReportDTOConverter";
import {dayReportDTOToDayReportConverter} from
  "src/dataAccessLogic/DTOToBusinessConverter/dayReportDTOToDayReportConverter";
import {DayReport} from "src/model/businessModel/DayReport";
import {WayDTO} from "src/model/DTOModel/WayDTO";
import {DayReportDTOWithoutUuid, DayReportService} from "src/service/DayReportService";
import {WayService} from "src/service/WayService";
import {PartialWithUuid} from "src/utils/PartialWithUuid";

/**
 * Provides methods to interact with the DayReport business model
 */
export class DayReportDAL {

  /**
   * Get DayReports that belong to a specific way
   */
  public static async getDayReports(dayReportUuids: string[]): Promise<DayReport[]> {

    const dayReportsDTO = await DayReportService.getDayReportsDTO(dayReportUuids);

    const dayReports = dayReportsDTO.map(dayReportDTOToDayReportConverter);

    return dayReports;
  }

  /**
   * Get DayReport by uuid
   */
  public static async getDayReport(uuid: string): Promise<DayReport> {
    const dayReportDTO = await DayReportService.getDayReportDTO(uuid);
    const dayReport = dayReportDTOToDayReportConverter(dayReportDTO);

    return dayReport;
  }

  /**
   * Create DayReport with empty fields and autogenerated uuid
   */
  public static async createDayReport(wayUuid: string, dayReportUuids: string[]): Promise<DayReport> {
    const DEFAULT_DAY_REPORT: DayReportDTOWithoutUuid = {
      createdAt: Timestamp.fromDate(new Date()),
      updatedAt: Timestamp.fromDate(new Date()),
      jobsDoneStringified: [],
      plansStringified: [],
      problemsStringified: [],
      commentsStringified: [],
      isDayOff: false,
    };
    const dayReportDTO = await DayReportService.createDayReportDTO(DEFAULT_DAY_REPORT);

    const dayReport = dayReportDTOToDayReportConverter(dayReportDTO);

    const updatedDayReportUuids = [...dayReportUuids, dayReportDTO.uuid];

    const updatedWay: PartialWithUuid<WayDTO> = {
      uuid: wayUuid,
      dayReportUuids: updatedDayReportUuids,
      lastUpdate: Timestamp.fromDate(new Date()),
    };

    await WayService.updateWayDTO(updatedWay);

    return dayReport;
  }

  /**
   * Update DayReport
   */
  public static async updateDayReport(dayReport: DayReport) {
    const dayReportDTO = dayReportToDayReportDTOConverter(dayReport);
    await DayReportService.updateDayReportDTO(dayReportDTO);
  }

}
