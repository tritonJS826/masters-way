import {SchemasCompositeWayRelation} from "src/apiAutogenerated";
import {Way} from "src/model/businessModel/Way";
import {CompositeWayService} from "src/service/CompositeWayService";

export const WAY_NAME_FIELD = "name";
export const WAY_TAGS_FIELD = "wayTags";
export const WAY_JOB_TAGS_FIELD = "jobTags";
export const WAY_COPIED_FROM_WAY_UUID_FIELD = "copiedFromWayUuid";
export const WAY_GOAL_DESCRIPTION_FIELD = "goalDescription";
export const WAY_ESTIMATION_TIME_FIELD = "estimationTime";
export const WAY_METRICS_FIELD = "metrics";

/**
 * Way props without uuid
 */
export type WayWithoutUuid = Omit<Way, "uuid">;

export type BaseWayData = Pick<WayWithoutUuid,
  typeof WAY_NAME_FIELD
| typeof WAY_COPIED_FROM_WAY_UUID_FIELD
| typeof WAY_GOAL_DESCRIPTION_FIELD
| typeof WAY_ESTIMATION_TIME_FIELD
>

/**
 * All ways params
 */
export interface CompositeWayParams {

  /**
   * Ways amount
   */
  childWayUuid: string;

  /**
   * Array of way preview
   */
  parentWayUuid: string;
}

/**
 * Provides methods to interact with the CompositeWay
 */
export class CompositeWayDAL {

  /**
   * Add way to composite way
   */
  public static async addWayToComposite(params: CompositeWayParams): Promise<SchemasCompositeWayRelation> {
    const compositeWayRelation = await CompositeWayService.addWayToComposite({
      request: {
        childWayUuid: params.childWayUuid,
        parentWayUuid: params.parentWayUuid,
      },
    });

    return compositeWayRelation;

  }

  /**
   * Delete way from composite way
   */
  public static async deleteWayFromComposite(params: CompositeWayParams): Promise<void> {
    await CompositeWayService.deleteWayFromComposite({
      childWayId: params.childWayUuid,
      parentWayId: params.parentWayUuid,
    },
    );

  }

}
