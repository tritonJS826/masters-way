import {SchemasWayPlainResponse} from "src/apiAutogenerated";
import {wayDTOToWay} from "src/DAL/DTOToPreviewConverter/wayDTOToWay";
// Import {UserDAL} from "src/DAL/UserDAL";
// import {DayReportDAL} from "src/dataAccessLogic/DayReportDAL";
// import {wayDTOToWayConverter} from "src/dataAccessLogic/DTOToBusinessConverter/wayDTOToWayPreviewConverter";
// import {SafeMap} from "src/dataAccessLogic/SafeMap";
import {User} from "src/model/businessModel/User";
import {Way} from "src/model/businessModel/Way";
// Import {USER_UUID_FIELD} from "src/model/DTOModel/UserDTO";
import {
  WAY_COPIED_FROM_WAY_UUID_FIELD,
  WAY_ESTIMATION_TIME_FIELD,
  WAY_GOAL_DESCRIPTION_FIELD,
  WAY_JOB_TAGS_FIELD,
  WAY_METRICS_STRINGIFIED_FIELD,
  WAY_NAME_FIELD,
  WAY_TAGS_FIELD,
} from "src/model/DTOModel/WayDTO";
import {WayDTOWithoutUuid} from "src/service/WayService";
import {WayService} from "src/serviceUpdated/WayService";
// Import {arrayToHashMap} from "src/utils/arrayToHashMap";
// Import {getColorByString} from "src/utils/getColorByString";
// import {v4 as uuidv4} from "uuid";

// Const DEFAULT_TAG = {
//   uuid: uuidv4(),
//   name: "no tag",
//   description: "Default tag",
//   color: getColorByString("no tag"),
// };

export type BaseWayData = Pick<WayDTOWithoutUuid,
  typeof WAY_NAME_FIELD
| typeof WAY_TAGS_FIELD
| typeof WAY_JOB_TAGS_FIELD
| typeof WAY_COPIED_FROM_WAY_UUID_FIELD
| typeof WAY_GOAL_DESCRIPTION_FIELD
| typeof WAY_ESTIMATION_TIME_FIELD
| typeof WAY_METRICS_STRINGIFIED_FIELD
>

/**
 * Provides methods to interact with the Way model
 */
export class WayDAL {

  /**
   * Get WayPreview
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  public static async getWay(uuid: string): Promise<Way> {
    const wayDTO = await WayService.getWayByUuid({wayId: uuid});
    const way = wayDTOToWay(wayDTO);

    //   // Const allNeededUsersUuids = new Set([
    //   //   wayDTO[WAY_OWNER_UUID_FIELD],
    //   //   ...wayDTO.formerMentorUuids,
    //   //   ...wayDTO[WAY_MENTOR_UUIDS_FIELD],
    //   //   ...wayDTO.mentorRequestUuids,
    //   // ]);

    //   const allNeededUsersPreviewPromise = UserDAL.getUsers();
    //   const dayReportsPromise = DayReportDAL.getDayReports(wayDTO.dayReportUuids);

    //   const [
    //     allNeededUsersPreview,
    //     dayReports,
    //   ] = await Promise.all([
    //     allNeededUsersPreviewPromise,
    //     dayReportsPromise,
    //   ]);

    //   const usersHashmap = arrayToHashMap({keyField: USER_UUID_FIELD, list: allNeededUsersPreview});

    //   const usersSafeHashmap = new SafeMap(usersHashmap);

    //   const owner = usersSafeHashmap.getValue(wayDTO[WAY_OWNER_UUID_FIELD]);
    //   const mentors = wayDTO.mentorUuids.map((mentorUuid) => usersSafeHashmap.getValue(mentorUuid));
    //   const mentorRequests = wayDTO.mentorRequestUuids
    // .map((mentorRequestUuid) => usersSafeHashmap.getValue(mentorRequestUuid));
    //   const formerMentors = wayDTO.formerMentorUuids.map((formerMentorUuid) => usersSafeHashmap.getValue(formerMentorUuid));

    //   const mentorsDictionary = arrayToHashMap({keyField: USER_UUID_FIELD, list: mentors});

    //   const formerMentorsDictionary = arrayToHashMap({keyField: USER_UUID_FIELD, list: formerMentors});

    //   const dayReportsOrderedByDate = dayReports.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

    //   const lastUpdate = wayDTO.lastUpdate.toDate();
    //   const createdAt = wayDTO.createdAt.toDate();

    //   const wayProps = {
    //     owner,
    //     mentors: mentorsDictionary,
    //     formerMentors: formerMentorsDictionary,
    //     dayReports: dayReportsOrderedByDate,
    //     mentorRequests,
    //     lastUpdate,
    //     createdAt,
    //   };

    //   const way = wayDTOToWayConverter(wayDTO, wayProps);

    return way;
  }

  /**
   * Create Way with empty fields and autogenerated uuid
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  public static async createWay(user: User, baseWayData?: BaseWayData): Promise<SchemasWayPlainResponse> {
    const way = await WayService.createWay({
      request: {
        copiedFromWayUuid: "",
        estimationTime: 0,
        goalDescription: "",
        isPrivate: false,
        name: `Way of ${user.name}`,
        ownerUuid: `${user.uuid}`,
        status: "",
      },
    });

    return way;
  }

  // /**
  //  * Update Way
  //  */
  // public static async updateWay(way: PartialWithUuid<Way>) {
  //   const wayDTO = wayToWayDTOPartialConverter(way);
  //   await WayService.updateWayDTO(wayDTO);
  // }

  /**
   * Delete Way
   */
  // public static async deleteWay(way: Way) {
  //   const batch = writeBatch(db);

  //   const dayReportsForDelete = way.dayReports;
  //   const mentorsForDelete = way.mentors;
  //   const favoriteForUsersForDelete = way.favoriteForUserUuids;
  //   const ownWaysForDelete = way.owner.ownWays;
  //   const favoriteWaysForDelete = way.owner.favoriteWays;

  //   const updatedOwner = new UserPreview({
  //     ...way.owner,
  //     ownWays: ownWaysForDelete.filter((ownWay) => ownWay !== way.uuid),
  //     favoriteWays: favoriteWaysForDelete.filter((ownWay) => ownWay !== way.uuid),
  //   });
  //   const updatedOwnerDTO = userPreviewToUserDTOConverter(updatedOwner);
  //   UserService.updateUserDTOWithBatch(updatedOwnerDTO, batch);

  //   mentorsForDelete.forEach((mentor) => {
  //     const updatedMentor = new UserPreview({
  //       ...mentor,
  //       mentoringWays: mentor.mentoringWays.filter((mentoringWay) => mentoringWay !== way.uuid),
  //     });
  //     const updatedMentorDTO = userPreviewToUserDTOConverter(updatedMentor);
  //     UserService.updateUserDTOWithBatch(updatedMentorDTO, batch);
  //   });

  //   favoriteForUsersForDelete.forEach(async (favoriteForUser) => {
  //     const user = await UserDAL.getUserByUuid(favoriteForUser);

  //     const updatedFavoriteForUser = new UserPreview({
  //       ...user,
  //       favoriteWays: user.favoriteWays.filter((favoriteWay) => favoriteWay !== way.uuid),
  //     });

  //     const updatedFavoriteForUserDTO = userPreviewToUserDTOConverter(updatedFavoriteForUser);
  //     UserService.updateUserDTOWithBatch(updatedFavoriteForUserDTO, batch);
  //   });

  //   dayReportsForDelete.forEach((dayReport) => DayReportService.deleteDayReportDTOWithBatch(dayReport.uuid, batch));

  //   WayService.deleteWayDTOWithBatch(way.uuid, batch);

  //   await batch.commit();
  // }

}
