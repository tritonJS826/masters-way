import {SchemasWayPlainResponse} from "src/apiAutogenerated";
import {wayToWayDTOPartial} from "src/dataAccessLogic/BusinessToDTOConverter/wayToWayDTOPartial";
import {wayDTOToWay} from "src/dataAccessLogic/DTOToPreviewConverter/wayDTOToWay";
import {wayDTOToWayPreview} from "src/dataAccessLogic/DTOToPreviewConverter/wayDTOToWayPreview";
// Import {UserDAL} from "src/DAL/UserDAL";
// import {DayReportDAL} from "src/dataAccessLogic/DayReportDAL";
// import {wayDTOToWayConverter} from "src/dataAccessLogic/DTOToBusinessConverter/wayDTOToWayPreviewConverter";
// import {SafeMap} from "src/dataAccessLogic/SafeMap";
import {User} from "src/model/businessModel/User";
import {Way} from "src/model/businessModel/Way";
import {WayPreview} from "src/model/businessModelPreview/WayPreview";
// Import {USER_UUID_FIELD} from "src/model/DTOModel/UserDTO";
import {GetWaysParams, WayService} from "src/service/WayService";
import {PartialWithUuid} from "src/utils/PartialWithUuid";
// Import {arrayToHashMap} from "src/utils/arrayToHashMap";
// Import {getColorByString} from "src/utils/getColorByString";
// import {v4 as uuidv4} from "uuid";

// Const DEFAULT_TAG = {
//   uuid: uuidv4(),
//   name: "no tag",
//   description: "Default tag",
//   color: getColorByString("no tag"),
// };

export const WAY_NAME_FIELD = "name";
export const WAY_TAGS_FIELD = "wayTags";
export const WAY_JOB_TAGS_FIELD = "jobTags";
export const WAY_COPIED_FROM_WAY_UUID_FIELD = "copiedFromWayUuid";
export const WAY_GOAL_DESCRIPTION_FIELD = "goalDescription";
export const WAY_ESTIMATION_TIME_FIELD = "estimationTime";
export const WAY_METRICS_FIELD = "metrics";

/**
 * Way props without uuid
 */
export type WayWithoutUuid = Omit<Way, "uuid">;

export type BaseWayData = Pick<WayWithoutUuid,
  typeof WAY_NAME_FIELD
| typeof WAY_TAGS_FIELD
| typeof WAY_JOB_TAGS_FIELD
| typeof WAY_COPIED_FROM_WAY_UUID_FIELD
| typeof WAY_GOAL_DESCRIPTION_FIELD
| typeof WAY_ESTIMATION_TIME_FIELD
| typeof WAY_METRICS_FIELD
>

/**
 * All ways params
 */
export interface AllWaysParams {

  /**
   * Ways amount
   */
  size: number;

  /**
   * Array of way preview
   */
  waysPreview: WayPreview[];
}

/**
 * Provides methods to interact with the Way model
 */
export class WayDAL {

  /**
   * Get all WayPreview
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  public static async getWays(params?: GetWaysParams): Promise<AllWaysParams> {
    const waysDTO = await WayService.getAllWays(params);
    // Const waysPreview = await Promise.all(waysDTO.ways.map(async (wayDTO) => {
    //   const metrics = await MetricService.getMetrics({wayId: wayDTO.uuid});

    //   const wayPreview = wayDTOToWayPreview(wayDTO, metrics);

    //   return wayPreview;
    // }));

    const waysPreview = waysDTO.ways.map(wayDTOToWayPreview);

    const ways = {
      size: waysDTO.size,
      waysPreview,
    };

    return ways;

  }

  /**
   * Get WayPreview
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  public static async getWay(uuid: string): Promise<Way> {
    const wayDTO = await WayService.getWayByUuid({wayId: uuid});
    const way = wayDTOToWay(wayDTO);

    //   // Const allNeededUsersUuids = new Set([
    //   //   wayDTO[WAY_OWNER_UUID_FIELD],
    //   //   ...wayDTO.formerMentorUuids,
    //   //   ...wayDTO[WAY_MENTOR_UUIDS_FIELD],
    //   //   ...wayDTO.mentorRequestUuids,
    //   // ]);

    //   const allNeededUsersPreviewPromise = UserDAL.getUsers();
    //   const dayReportsPromise = DayReportDAL.getDayReports(wayDTO.dayReportUuids);

    //   const [
    //     allNeededUsersPreview,
    //     dayReports,
    //   ] = await Promise.all([
    //     allNeededUsersPreviewPromise,
    //     dayReportsPromise,
    //   ]);

    //   const usersHashmap = arrayToHashMap({keyField: USER_UUID_FIELD, list: allNeededUsersPreview});

    //   const usersSafeHashmap = new SafeMap(usersHashmap);

    //   const owner = usersSafeHashmap.getValue(wayDTO[WAY_OWNER_UUID_FIELD]);
    //   const mentors = wayDTO.mentorUuids.map((mentorUuid) => usersSafeHashmap.getValue(mentorUuid));
    //   const mentorRequests = wayDTO.mentorRequestUuids
    // .map((mentorRequestUuid) => usersSafeHashmap.getValue(mentorRequestUuid));
    //   const formerMentors = wayDTO.formerMentorUuids.map((formerMentorUuid) => usersSafeHashmap.getValue(formerMentorUuid));

    //   const mentorsDictionary = arrayToHashMap({keyField: USER_UUID_FIELD, list: mentors});

    //   const formerMentorsDictionary = arrayToHashMap({keyField: USER_UUID_FIELD, list: formerMentors});

    //   const dayReportsOrderedByDate = dayReports.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

    //   const lastUpdate = wayDTO.lastUpdate.toDate();
    //   const createdAt = wayDTO.createdAt.toDate();

    //   const wayProps = {
    //     owner,
    //     mentors: mentorsDictionary,
    //     formerMentors: formerMentorsDictionary,
    //     dayReports: dayReportsOrderedByDate,
    //     mentorRequests,
    //     lastUpdate,
    //     createdAt,
    //   };

    //   const way = wayDTOToWayConverter(wayDTO, wayProps);

    return way;
  }

  /**
   * Create Way with empty fields and autogenerated uuid
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  public static async createWay(user: User, baseWayData?: BaseWayData): Promise<SchemasWayPlainResponse> {
    const way = await WayService.createWay({
      request: {
        copiedFromWayUuid: baseWayData?.copiedFromWayUuid ?? "",
        estimationTime: baseWayData?.estimationTime ?? 0,
        goalDescription: baseWayData?.goalDescription ?? "",
        isPrivate: false,
        name: `Way of ${user.name}`,
        ownerUuid: `${user.uuid}`,
        isCompleted: false,
      },
    });

    // Const ownWayCollectionUuid = user.wayCollections.find((wayCollection) => wayCollection.name === "own");

    // if (!ownWayCollectionUuid) {
    //   throw new Error("\"Own ways\" collection is not exist");
    // }

    // await WayCollectionWayService.createWayCollectionWay({
    //   request: {
    //     wayCollectionUuid: ownWayCollectionUuid.uuid,
    //     wayUuid: way.uuid,
    //   },
    // });

    return way;
  }

  /**
   * Update Way
   */
  public static async updateWay(way: PartialWithUuid<Way>) {
    const wayDTOPartial = wayToWayDTOPartial(way);
    await WayService.updateWay({
      wayId: way.uuid,
      request: wayDTOPartial,
    });
  }

  /**
   * Delete Way
   */
  public static async deleteWay(wayUuid: string) {
    await WayService.deleteWay({wayId: wayUuid});
  }

}
