[
  {
    "id": "0",
    "date": "2023-08-15",
    "workDone": [{
      "id": "0",
      "todoItem": "Initialized the project",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "1",
      "todoItem": "Set up tsconfig, eslint environment",
      "time": {
        "unit": "MINUTE",
        "amount": 55
      }
    },
    {
      "id": "2",
      "todoItem": "Create a basic json with data",
      "time": {
        "unit": "MINUTE",
        "amount": 20
      }
    },
    {
      "id": "3",
      "todoItem": "Add basic layout to the page (table with data from json)",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Add models",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    },
    {
      "id": "1",
      "todoItem": "Add get and post requests",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    },
    {
      "id": "2",
      "todoItem": "Add service layer",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    }
  ],
    "currentProblems": [
      "✓ When adding eslint (typescript-eslint/prefer-optional-chain) rules, there was a conflict. I solved it by adding the projects property to parserOptions with the path to tsconfig."
    ],
    "studentComment": ["Repeated table tags when creating it."],
    "learnedForToday": ["Local json files can only be fetched if they are in a public folder. If they belong inside src, then imports should be used. It all depends on the paths."],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "1",
    "date": "2023-08-16",
    "workDone": [{
      "id": "0",
      "todoItem": "Create a model Deal.ts",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "1",
      "todoItem": "Create an additional models Work, Plan, Time, Unit",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Change todoList.json according to the model",
      "time": {
        "unit": "MINUTE",
        "amount": 20
      }
    },
    {
      "id": "3",
      "todoItem": "Fix mistakes in code after changed json file",
      "time": {
        "unit": "MINUTE",
        "amount": 75
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Move out base state from table.tsx 'TODO: where it is now?'",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    },
    {
      "id": "1",
      "todoItem": "Fix model mistakes (change public to private methods, add methods to properties)",
      "time": {
        "unit": "MINUTE",
        "amount": 80
      }
    },
    {
      "id": "2",
      "todoItem": "Create services to convert data 'TODO: what data, why do you need to convert it'",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    }
  ],
    "currentProblems": [
      "✓ Initially, I used a stub array for the basic display of the table, so after changing json, it took a very long time to change the models. And only then I realized that this array can be deleted altogether, and left empty."
    ],
    "studentComment": ["Need to figure out how bundlers work. 'TODO it means nothing for both of us'"],
    "learnedForToday": ["ParserOptions.project property is an option allows to provide a path to your project's tsconfig.json. This setting is required if you want to use rules which require type information. True value indicates to look for the nearest tsconfig.json for each source file, and path - is the path to map tsconfig files relative to parserOptions.tsconfigRootDir, or current working directory if not specified."],
    "mentorComment": [
      "✓ Think about main models, for example use 'Report' instead 'Deal', work -> workDone, plan -> planForTomorrow, problem -> currentProblems, -> comment -> studentComment, new -> learnedForToday",
      "✓ Adjust .module.scss instead of css",
      "✓ Adjust routing (add pages folder)",
      "✓ Add services layer (adjust class to get data, currently it should be async and return your json)",
      "✓ Be more concrete in yor report (example: 'add models' -> 'add models: Report, User... etc.')",
      "✓ Estimate your work by hours (at least 30 minutes), not by minutes",
      "✓ Change date format from YYYY-MM-DD to timestamp or ISO826",
      "✓ Use headless component for table",
      "✓ Let's try to use vite instead of webpack",
      "✓ Learn why do you need bundlers (webpack, vite) and learn how to fetch data not only from public folder",
      "✓ Lets start to use firebase instead of backend, learn what the benefits"
    ],
    "isDayOff": false
  },
  {
    "id": "2",
    "date": "2023-08-17",
    "workDone": [{
      "id": "0",
      "todoItem": "Add scss dependency and change files .css to .module.scss",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "1",
      "todoItem": "Add routing in app (it's only one route to main page now)",
      "time": {
        "unit": "MINUTE",
        "amount": 20
      }
    },
    {
      "id": "2",
      "todoItem": "Create models.io (with models and modelsDTO), rename model's name in project (Deal -> Report, Work -> WorkDone, Plan -> PlanForTomorrow) and model's properties name (add property mentorComment, problem -> currentProblems, etc.)",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    },
    {
      "id": "3",
      "todoItem": "Create service layer with getReports methods that return all methods from .json and convert ReportDTO to Report model",
      "time": {
        "unit": "MINUTE",
        "amount": 55
      }
    },
    {
      "id": "4",
      "todoItem": "Fix mistakes in code after changed model",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Use headless component for table instead of custom table",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    },
    {
      "id": "1",
      "todoItem": "Add delete report by id method to service layer",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "2",
      "todoItem": "Set up Vite instead of webpack",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    }
  ],
    "currentProblems": [
      "✓ When I use methods from model (getFullTime, getFullPlan, getFullWork) it return undefined."
    ],
    "studentComment": ["Repeat how to set up routes"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "3",
    "date": "2023-08-18",
    "workDone": [{}],
    "planForTomorrow": [{}],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": ["✓ Align model with table view (align columns naming with fields naming, I don't see some fields in the table."],
    "isDayOff": true
  },
  {
    "id": "4",
    "date": "2023-08-19",
    "workDone": [{
      "id": "0",
      "todoItem": "Add property isDayOff to .json, Report model, ReportDTO model, models.draw.io",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "1",
      "todoItem": "Use base empty headless table (@tanstack/react-table) instead of custom table component",
      "time": {
        "unit": "MINUTE",
        "amount": 55
      }
    },
    {
      "id": "2",
      "todoItem": "Fix mistakes for right render arrays of objects and date (use map in 'cell' property)",
      "time": {
        "unit": "MINUTE",
        "amount": 25
      }
    },
    {
      "id": "3",
      "todoItem": "Add styles to table, delete unneeded table components",
      "time": {
        "unit": "MINUTE",
        "amount": 35
      }
    },
    {
      "id": "4",
      "todoItem": "Migration from CRA to Vite (set up vite.config for use absolute paths, eslint, typescript",
      "time": {
        "unit": "MINUTE",
        "amount": 65
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "use firebase instead of local json",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Add delete report by id method to service layer",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    }
  ],
    "currentProblems": [
      "✓ When I use methods from model (getFullTime, getFullPlan, getFullWork) it return undefined.",
      "✓ Couldn't type accessor (tried string and AccessorFn but it doesn't work) to render function and follow DRY principle."
    ],
    "studentComment": ["I found info that we can fetch data from local.json (that placed inside src folder) by using import, but if I want to use fetch then this file shoule be placed in public folder. I couldn't find info how to set up webpack (vite) for resolve this."],
    "learnedForToday": ["Headless UI is a term for libraries and utilities that provide the logic, state, processing and API for UI elements and interactions, but do not provide markup, styles, or pre-built implementations. (In this project I use @tanstack/react-table so I learn how to create basic tables with it)", "A module bundler helps you keep your code organised by making it easy to import and use other JavaScript files (modules) in your code. It keeps track of which files depend on which other files and ensures they are loaded in the right order. This helps make your code more modular and easier to maintain."],
    "mentorComment": [
      "✓ Don't forget to create class instances, repeat what operator 'new' and operator 'instanceof' do",
      "✓ You don't need to implement 'delete record method",
      "✓ Lets put newest records in table above",
      "✓ Think a little bit about UX, checkmarks in the last column looks strange, columns width, ordered lists instead unordered etc, add list to other columns (problems)", 
      "✓ Learn how context works in js (this)", 
      "✓ ColumnHelper.accessor is a generic, use it like '...accessor<..., ...>(...)'"
    ],
    "isDayOff": false
  },
  {
    "id": "5",
    "date": "2023-08-20",
    "workDone": [{
      "id": "0",
      "todoItem": "Create ptoject on firebase by using cloud firestore, add .env",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    },
    {
      "id": "1",
      "todoItem": "Created instances of class (new WorkDone) for use methods .getFullWork()",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Create instances of classes for use methods (new WorkDone, new PlanForTomorrow, new Time)",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Move todoList.json to firebase",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    },
    {
      "id": "2",
      "todoItem": "Change render of reports in the table (newest on the top of table)",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    }
  ],
    "currentProblems": [
      "✓ I tried to create instance of one class inside other instance of other class in service layer but don't understand how to use nested classes (for example class Time inside workDone class)",
      "✓ Don't understand how to create database in firebase with array of objects (on site you cam choose only object or other types)"
    ],
    "studentComment": ["When I choose between firebase and cloud firestore I chose the last one because it has some pluses: Firebase stores data as one big JSON tree. Cloud Firestore stores data as a set of documents, making it easy to organize and store complex hierarchical data; firestore support not only web but also ios and android clients, etc."],
    "learnedForToday": ["Firebase is a platform for create web-app. It's interface is a service with data base that works in real time, so datas update in real time on all services."],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "6",
    "date": "2023-08-21",
    "workDone": [{
      "id": "0",
      "todoItem": "Get data from realtime database (inside function component R.tsx)",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Get data from real time databse in Report.ts",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Render right time (property time)",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    },
    {
      "id": "2",
      "todoItem": "Add some styles for good UI",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    }
  ],
    "currentProblems": [
      "✓ I tried to create instance of one class inside other instance of other class in service layer but don't understand how to use nested classes (for example class Time inside workDone class)",
      "✓ Can't fetch data from firebase in Report.ts file"
    ],
    "studentComment": ["Now we will work with real time database for update info in the moments but if we will need we will move our datas to cloud firestore"],
    "learnedForToday": ["onValue function listens for data changes at a particular location. This is the primary way to read data from a Database. Our callback will be triggered for the initial data and again whenever the data changes."],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "7",
    "date": "2023-08-22",
    "workDone": [{
      "id": "0",
      "todoItem": "Get data from firebase in R.tsx and convert it to business model (R.tsx file)",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Revert render reports (newest on the top), move out columns in columns.tsx, add styles to table, render empty cells if property isDayOff === true",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Use the similar code in Table/tsx as in R.tsc for render reports from firebase",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Add possibility to add reports",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Add possibility to edit reports",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    }
  ],
    "currentProblems": [
      "✓ Can't understand how to create generic for ColumnHelper.accessor",
      "✓ I tried to create instance of one class inside other instance of other class in service layer but don't understand how to use nested classes (for example class Time inside workDone class doesn't work while class Time works inside PlanForTomorrow class)"
    ],
    "studentComment": ["Thought about UI but don't know how to better render big text and small info as siblings"],
    "learnedForToday": [""],
    "mentorComment": [
      "✓ I added a script to git with an example of nested classes with some public fields and methods, please check it, you can run it with ts-node", 
      "✓ Try to read official documentation of your new table, they use typescript in the code (https://tanstack.com/table/v8/docs/guide/column-defs)"],
    "isDayOff": false
  },
  {
    "id": "8",
    "date": "2023-08-23",
    "workDone": [{}],
    "planForTomorrow": [{}],
    "currentProblems": [
      "✓ Can't understand how to create generic for ColumnHelper.accessor",
      "✓ I tried to create instance of one class inside other instance of other class in service layer but don't understand how to use nested classes (for example class Time inside workDone class doesn't work while class Time works inside PlanForTomorrow class)"
    ],
    "studentComment": ["I tried to fix mistakes in classes bit it failed. So let's write that it was day odd"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": true
  },
  {
    "id": "9",
    "date": "2023-08-24",
    "workDone": [{
      "id": "0",
      "todoItem": "Fix all mistakes and get data from firebase with convert data from DTO to business model",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Add possibility to add reports to firebase from browser",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Add possibility to edit reports",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Add service for offline (dev) mode and possibility to switch to online (prod) mode",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "3",
      "todoItem": "Clear project (delete unneeded files, console.log and comments)",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["Couldn't fix mistakes in classes about three days. There were few mistakes: 1. The real-time database did not match the current models (there were old time model); 2. When I mapped array object inside classes it returned undefined because method .map doesn't work if arrayis empty; 3. I forgor that we should create inctance of ckasses for use it in code;"],
    "learnedForToday": ["Learned how to create instances of classes for array"],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "10",
    "date": "2023-08-25",
    "workDone": [{
      "id": "0",
      "todoItem": "Add TS typing to columns.tsx (for ColumnDef and Accessors)",
      "time": {
        "unit": "MINUTE",
        "amount": 50
      }
    },
    {
      "id": "1",
      "todoItem": "Add function to post new Report into firebase (with stub data)",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    },
    {
      "id": "2",
      "todoItem": "Clean project (delete unneeded comments, console.log, etc.)",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Update function with post report to firebase (service layer: add method postReport and converter BusinessToReportDTOConverter; Button component: add possibility send your data, not stub)",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    },
    {
      "id": "1",
      "todoItem": "Add possibility to edit reports from client side",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Add service for offline (dev) mode and possibility to switch to online (prod) mode",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["Since the database contains an array of objects, the indices of which are randomly generated using the firebase methods, in order to map the received data, I first create a variable, where I call the Object.values() method"],
    "learnedForToday": ["Learned how to add TS typings to tanStack table columns", "Learned how to add data to firebase (POST)"],
    "mentorComment": [
      "✓ Does docs directory related to only frontend? If it is dabase relations, please move it on the top level",
      "✓ Fix models.drawio to discuss your model schemas (looks like it is just broken merge, just apply right changes in your IDE)",
      "✓ Remove unused hidden files (add to gitignore)",
      "✓ Add green color to completed problems and mentor comments",
      "✓ Updated models for firebase, create DTO models for them on the client",
      "✓ Script pnpm run build does not work",
      "Think more about naming, get* should return something, converters should convert and etc.",
      "Add stats to the page with table (all days, days without day off, day off amount, work hours)"
    ],
    "isDayOff": false
  },
  {
    "id": "11",
    "date": "2023-08-26",
    "workDone": [{}],
    "planForTomorrow": [],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": true
  },
  {
    "id": "12",
    "date": "2023-08-27",
    "workDone": [{
      "id": "0",
      "todoItem": "Add enum Unit in Time class and change other models where it was used (Report, WorkDone, PlanForTomorrow)",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "1",
      "todoItem": "Create DTO models (for local json file) and business models in draw.io based on firebase collections",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Create firebase collections (User, Way, DayReport) in model folder",
      "time": {
        "unit": "MINUTE",
        "amount": 20
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Check naming of method and functions",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    },
    {
      "id": "1",
      "todoItem": "Add green color to completed problems and mentor comments",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Check and fix pnpm run build command",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "3",
      "todoItem": "Add stats to the page with table (all days, days without day off, day off amount, work hours)",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["Found info how to get nested collections from firebase"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "13",
    "date": "2023-08-28",
    "workDone": [{
      "id": "0",
      "todoItem": "Add collections (Goal, GoalMetrics, MonthReport, CurrentProblem, JobDone, PlanForNextPeriod, MentorComment",
      "time": {
        "unit": "MINUTE",
        "amount": 25
      }
    },
    {
      "id": "1",
      "todoItem": "Add business models (User, Way, PlanForNextPeriod, MonthReport, MentorComment, JobDone, GoalMetrics, Goal, DayReport, CurrentProblem, Time)",
      "time": {
        "unit": "MINUTE",
        "amount": 75
      }
    },
    {
      "id": "2",
      "todoItem": "Check naming in models, collections",
      "time": {
        "unit": "MINUTE",
        "amount": 25
      }
    },
    {
      "id": "3",
      "todoItem": "Add ts typing to Column.accessor",
      "time": {
        "unit": "MINUTE",
        "amount": 35
      }
    },
    {
      "id": "4",
      "todoItem": "Add styles to done comments in MentorComments and CurrentProblems columns",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    },
    {
      "id": "5",
      "todoItem": "Fix mistake in Button.tsx: add updates typing ts",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Add stats to the page with table (all days, days without day off, day off amount, work hours)",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Use new models in service layer",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    },
    {
      "id": "2",
      "todoItem": "Change data according new models in local json and firebase",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    }
  ],
    "currentProblems": ["Is it possible to move out Column.accessor for don't repeat it so many times?"],
    "studentComment": ["Script pnpm run build works after fix all mistakes in code (after I added ts typing)"],
    "learnedForToday": ["Learned how to add typing to Column.accessor and updates method in real time firebase"],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "14",
    "date": "2023-08-29",
    "workDone": [{}],
    "planForTomorrow": [{}],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": true
  },
  {
    "id": "15",
    "date": "2023-08-30",
    "workDone": [{
      "id": "0",
      "todoItem": "Add button to update cells",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    },
    {
      "id": "1",
      "todoItem": "Create one button component instead of few buttons for each action (buttonCreateRow, buttonEdit, etc.)",
      "time": {
        "unit": "MINUTE",
        "amount": 25
      }
    },
    {
      "id": "2",
      "todoItem": "Move out firebase methods into service layer (methods updateReport and createNewReport)",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    },
    {
      "id": "3",
      "todoItem": "Check firebase keys for understand do we need squash all commits or not",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "4",
      "todoItem": "Update mentor comment according by UUID",
      "time": {
        "unit": "MINUTE",
        "amount": 80
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Add possibility to write in browser and update cells",
      "time": {
        "unit": "MINUTE",
        "amount": 110
      }
    },
    {
      "id": "1",
      "todoItem": "Fix base row (when create a new report should return empty object",
      "time": {
        "unit": "MINUTE",
        "amount": 50
      }
    },
    {
      "id": "2",
      "todoItem": "Clean project: delete consoles and commits",
      "time": {
        "unit": "MINUTE",
        "amount": 20
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["For resolve problem with firebase keys we decided do't use squash all commits but create a new firebase real time database and delete old db with keys on github"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "16",
    "date": "2023-08-31",
    "workDone": [{
      "id": "0",
      "todoItem": "Create empty row with current date (getDate function)",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    },
    {
      "id": "1",
      "todoItem": "Destructure task about edit cells: create state, create input, add function onChange etc.",
      "time": {
        "unit": "MINUTE",
        "amount": 35
      }
    },
    {
      "id": "2",
      "todoItem": "Synchronize model firebase and json (create dataList.json)",
      "time": {
        "unit": "MINUTE",
        "amount": 65
      }
    },
    {
      "id": "3",
      "todoItem": "Synchronize db with services (not finished)",
      "time": {
        "unit": "MINUTE",
        "amount": 70
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Complete synchronize db with services",
      "time": {
        "unit": "MINUTE",
        "amount": 110
      }
    },
    {
      "id": "1",
      "todoItem": "Complete edit cells possibility",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    }
  ],
    "currentProblems": ["Can't synchronize db and business models"],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "17",
    "date": "2023-09-01",
    "workDone": [{
      "id": "0",
      "todoItem": "Render table header according by new models",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Search info how to use uuid as ref to collections in real time db",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Render cells with type string[]",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Create separate classes for get each collection from firebase",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    },
    {
      "id": "1",
      "todoItem": "Return all data for use it in the table",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    },
    {
      "id": "1",
      "todoItem": "Render right nested data in cells",
      "time": {
        "unit": "MINUTE",
        "amount": 60
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": ["Need to find a books for career growth"],
    "isDayOff": false
  },
  {
    "id": "18",
    "date": "2023-09-02",
    "workDone": [{}],
    "planForTomorrow": [{}],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": true
  },
  {
    "id": "19",
    "date": "2023-09-03",
    "workDone": [{
      "id": "0",
      "todoItem": "Create separate service classes for get collections from realtime db: UserService and WayService (there are 2 methods for get all users and ways and get user and way by uuid)",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Create converters from firebase models to business models (ReportTest.ts) (not finished)",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Render users and ways info on main page",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Render one way with table: render header's titles",
      "time": {
        "unit": "MINUTE",
        "amount": 100
      }
    },
    {
      "id": "1",
      "todoItem": "Render table's body: cells with info",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "20",
    "date": "2023-09-04",
    "workDone": [{
      "id": "0",
      "todoItem": "Fix mistakes after review PR",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    },
    {
      "id": "1",
      "todoItem": "Create converters from firebase models to business models (ReportTest.ts) (not finished)",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Render one way with table: render header's titles",
      "time": {
        "unit": "MINUTE",
        "amount": 100
      }
    },
    {
      "id": "1",
      "todoItem": "Render table's body: cells with info",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["Need to make table as reusable component (it shouldn't save specific data)"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "21",
    "date": "2023-09-05",
    "workDone": [{}],
    "planForTomorrow": [{}],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": true
  },
  {
    "id": "22",
    "date": "2023-09-06",
    "workDone": [{
      "id": "0",
      "todoItem": "Create new branch from main and add render Users (fix mistake about firebase envs)",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "1",
      "todoItem": "Create components UsersBlock, UserCard, WaysBlock, WayCard",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    },
    {
      "id": "2",
      "todoItem": "Clean project (delete unused files and code)",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "3",
      "todoItem": "Add right models to columns.ts, fix typing mistakes in columns.ts",
      "time": {
        "unit": "MINUTE",
        "amount": 25
      }
    },
    {
      "id": "4",
      "todoItem": "Render table with DayReport (render header cells)",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    },
    {
      "id": "5",
      "todoItem": "Fix old mistakes from PR #15",
      "time": {
        "unit": "MINUTE",
        "amount": 20
      }
    },
    {
      "id": "6",
      "todoItem": "Check new and modified files before push and create PR",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Create converters layer for get business models of data from firebase collection data in service",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Render table with all cells",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "currentProblems": ["Typing columns in table.tsx are not compatible to typing of columns in columns.ts. It's because I didn't converted data from firebase to business models. I will do it tomorrow"],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "23",
    "date": "2023-09-07",
    "workDone": [{
      "id": "0",
      "todoItem": "Create converters from fb collections to business models (JobDone and DayReport)",
      "time": {
        "unit": "MINUTE",
        "amount": 200
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Create converters layer for get business models of data from firebase collection data in service",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Render table with all cells",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "currentProblems": ["Can't create working converters"],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "24",
    "date": "2023-09-08",
    "workDone": [{
      "id": "0",
      "todoItem": "Create converters from fb collections to business models (CurrentProblems, PlanForNextPeriod)",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    },
    {
      "id": "1",
      "todoItem": "Create async await functions instead of using callBack with method onValue for get datas from db (JobDoneConverter)",
      "time": {
        "unit": "MINUTE",
        "amount": 150
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Create converters layer for get business models of data from firebase collection data in service",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Render table with all cells",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "currentProblems": ["Can't return data instead of promise"],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "25",
    "date": "2023-09-09",
    "workDone": [{
      "id": "0",
      "todoItem": "Fix all mistakes in converters layer (return data instead of promise)",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    },
    {
      "id": "1",
      "todoItem": "Render table cells with right info from db",
      "time": {
        "unit": "MINUTE",
        "amount": 55
      }
    },
    {
      "id": "2",
      "todoItem": "Fix styles into cells (if first symbol is ✓ use green color)",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "3",
      "todoItem": "Clear code in Converter and Service layers (renaming, move out map functions, delete unneeded comments)",
      "time": {
        "unit": "MINUTE",
        "amount": 65
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Add README.md with info about project and conventions (rules for developers)",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    },
    {
      "id": "1",
      "todoItem": "Render lists in dayReport (render few reports)",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["Need to create a data in real time db with actual reports"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "26",
    "date": "2023-09-10",
    "workDone": [{
      "id": "0",
      "todoItem": "Update models in draw.io",
      "time": {
        "unit": "MINUTE",
        "amount": 50
      }
    },
    {
      "id": "1",
      "todoItem": "Fix mistake about users.map (it's because we can't to map objects with string keys - as a resolve need to use Object.values(users).map)",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "2",
      "todoItem": "Add description in README.md",
      "time": {
        "unit": "MINUTE",
        "amount": 35
      }
    },
    {
      "id": "3",
      "todoItem": "Create process.md file with development processes",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "4",
      "todoItem": "Add services (MonthReportService, MentorCommentService, GoalService, GoalMetricsService)",
      "time": {
        "unit": "MINUTE",
        "amount": 65
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Create converters for new services",
      "time": {
        "unit": "MINUTE",
        "amount": 80
      }
    },
    {
      "id": "1",
      "todoItem": "Render lists in dayReport (render few reports with with possibility to get any info from fb collections)",
      "time": {
        "unit": "MINUTE",
        "amount": 100
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["If in Goal use User model than it return mistake because of User can't be used before initialize"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "27",
    "date": "2023-09-11",
    "workDone": [{
      "id": "0",
      "todoItem": "Create converters (WayConverter, UserConverter, MonthReportConverter, MentorCommentConverter, GoalConverter, GoalMetricsConverter)",
      "time": {
        "unit": "MINUTE",
        "amount": 55
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Render lists in dayReport (render few reports with possibility to get any info from fb collections)",
      "time": {
        "unit": "MINUTE",
        "amount": 100
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["If in Goal use User model than it return mistake because of User can't be used before initialize. For resolve it need or use userUuid instead of User inside Goal or return User by using this"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "28",
    "date": "2023-09-12",
    "workDone": [{
      "id": "0",
      "todoItem": "Add projectSructure.md",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    },
    {
      "id": "1",
      "todoItem": "Add rules in ESlint (no-console and syntax of interfaces)",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Set up VSCode for import absolute path",
      "time": {
        "unit": "MINUTE",
        "amount": 20
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Add conventions in the project",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    },
    {
      "id": "1",
      "todoItem": "Render lists in dayReport (render few reports with possibility to get any info from fb collections)",
      "time": {
        "unit": "MINUTE",
        "amount": 100
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["If in Goal use User model than it return mistake because of User can't be used before initialize. For resolve it need or use userUuid instead of User inside Goal or return User by using this"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "29",
    "date": "2023-09-13",
    "workDone": [{
      "id": "0",
      "todoItem": "Add conventions to the project",
      "time": {
        "unit": "MINUTE",
        "amount": 50
      }
    },
    {
      "id": "1",
      "todoItem": "Update models and service layer for render lists of DayReports",
      "time": {
        "unit": "MINUTE",
        "amount": 70
      }
    },
    {
      "id": "2",
      "todoItem": "Check files and add TODO comments for the next tasks",
      "time": {
        "unit": "MINUTE",
        "amount": 55
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Add scripts to the project",
      "time": {
        "unit": "MINUTE",
        "amount": 200
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": ["Learned that Husky allows us to create scripts for check eslint and other rules before commit or push"],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "30",
    "date": "2023-09-14",
    "workDone": [{}],
    "planForTomorrow": [{}],
    "currentProblems": [""],
    "studentComment": ["Thought about new features at the project"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": true
  },
  {
    "id": "31",
    "date": "2023-09-15",
    "workDone": [{}],
    "planForTomorrow": [{}],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": true
  },
  {
    "id": "32",
    "date": "2023-09-16",
    "workDone": [{
      "id": "0",
      "todoItem": "Create script that read all files and finding console.log",
      "time": {
        "unit": "MINUTE",
        "amount": 50
      }
    },
    {
      "id": "1",
      "todoItem": "Move out scripts into script folder and set up call in from root of project",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "2",
      "todoItem": "Set up ESLint for sort imports (chose plugin and rules)",
      "time": {
        "unit": "MINUTE",
        "amount": 75
      }
    },
    {
      "id": "3",
      "todoItem": "Change color of text in terminal after call scripts (red - if mistakes)",
      "time": {
        "unit": "MINUTE",
        "amount": 35
      }
    },
    {
      "id": "4",
      "todoItem": "Add lint-check and type-check scripts in command line",
      "time": {
        "unit": "MINUTE",
        "amount": 55
      }
    },
    {
      "id": "5",
      "todoItem": "Add rule about first big letter for comments",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Set up Husky",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["Repeated node js basic methods: reading files,find string in the file, sync and async methods"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "33",
    "date": "2023-09-17",
    "workDone": [{
      "id": "0",
      "todoItem": "Clean project (delete unneeded files, code, comments, packages)",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "1",
      "todoItem": "Fix PR comments",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "currentProblems": ["Problem is that I created custom scripts for check-lint and etc but need to use exists script"],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "34",
    "date": "2023-09-18",
    "workDone": [{
      "id": "0",
      "todoItem": "Rename const (DateUtils.ts)",
      "time": {
        "unit": "MINUTE",
        "amount": 150
      }
    },
    {
      "id": "1",
      "todoItem": "Search for new developers (creating an ad, correspondence, calling)",
      "time": {
        "unit": "MINUTE",
        "amount": 30
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Set up Husky",
      "time": {
        "unit": "MINUTE",
        "amount": 180
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["Search of new developers is a very hard work. It's take too much time. But it's fun to create a big group"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "35",
    "date": "2023-09-19",
    "workDone": [{
      "id": "0",
      "todoItem": "Set up Husky",
      "time": {
        "unit": "MINUTE",
        "amount": 130
      }
    },
    {
      "id": "1",
      "todoItem": "Set up lint-staged",
      "time": {
        "unit": "MINUTE",
        "amount": 50
      }
    },
    {
      "id": "2",
      "todoItem": "Create commit-msg hook for check commit name",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Create editable cells (only client)",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    },
    {
      "id": "1",
      "todoItem": "Create editable cells with save info on server",
      "time": {
        "unit": "MINUTE",
        "amount": 90
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "36",
    "date": "2023-09-20",
    "workDone": [{
      "id": "0",
      "todoItem": "Create base collections on firestore (Users, Ways, DayReports, JobsDone, PLansForNextPeriod, CurrentProblems)",
      "time": {
        "unit": "MINUTE",
        "amount": 35
      }
    },
    {
      "id": "1",
      "todoItem": "CRUD methods for users",
      "time": {
        "unit": "MINUTE",
        "amount": 75
      }
    },
    {
      "id": "2",
      "todoItem": "Read method to get data in service layer (CurrentProblemService, DayReportService, JobDoneService, PlanForNextPeriodService, UserService, WaySevice)",
      "time": {
        "unit": "MINUTE",
        "amount": 70
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Create right collections on firestorewith references",
      "time": {
        "unit": "MINUTE",
        "amount": 120 
      }
    },
    {
      "id": "1",
      "todoItem": "Create converters that use id references for import other collections",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "37",
    "date": "2023-09-21",
    "workDone": [{
      "id": "0",
      "todoItem": "Resolve problem with getting data in converters (Now I get data from db in service layer and convert it in converters)",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    },
    {
      "id": "1",
      "todoItem": "Move to converters layer DocumentToDTO converters from service layer",
      "time": {
        "unit": "MINUTE",
        "amount": 100
      }
    },
    {
      "id": "2",
      "todoItem": "Rename functions (converters) and change methods to get data (delete callback, now it return data)",
      "time": {
        "unit": "MINUTE",
        "amount": 35
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Fix mistakes in PR",
      "time": {
        "unit": "MINUTE",
        "amount": 60 
      }
    },
    {
      "id": "1",
      "todoItem": "Add eslint rules about comments",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    }
  ],
    "currentProblems": ["Long time didn't understand how don't use getData functions in converter layer while we need to convert uuid to object model"],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "38",
    "date": "2023-09-22",
    "workDone": [{}],
    "planForTomorrow": [{}],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": true
  },
  {
    "id": "39",
    "date": "2023-09-23",
    "workDone": [{
      "id": "0",
      "todoItem": "Rename Firebase collections and fix imports",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "1",
      "todoItem": "Create generic querySnapshotToDTOConverter",
      "time": {
        "unit": "MINUTE",
        "amount": 25
      }
    },
    {
      "id": "2",
      "todoItem": "Create BusinessPreviewModels",
      "time": {
        "unit": "MINUTE",
        "amount": 10
      }
    },
    {
      "id": "3",
      "todoItem": "Create 1 converter function in each converter instead of 2",
      "time": {
        "unit": "MINUTE",
        "amount": 65
      }
    },
    {
      "id": "4",
      "todoItem": "Create PreviewToBusiness layer (dayReportConverter)",
      "time": {
        "unit": "MINUTE",
        "amount": 25
      }
    },
    {
      "id": "5",
      "todoItem": "Fix mistakes in project because of changing models, services and converters",
      "time": {
        "unit": "MINUTE",
        "amount": 25
      }
    },
    {
      "id": "6",
      "todoItem": "Create Data access layer (getDayReports)",
      "time": {
        "unit": "MINUTE",
        "amount": 45
      }
    },
    {
      "id": "7",
      "todoItem": "Create architecture in draw.io",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Update Preview models (think which property should be converted and which not",
      "time": {
        "unit": "MINUTE",
        "amount": 60 
      }
    },
    {
      "id": "1",
      "todoItem": "Create DAL for user and way",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    },
    {
      "id": "2",
      "todoItem": "Update models.draw.io",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": ["Repeat how to create generic functions"],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "40",
    "date": "2023-09-24",
    "workDone": [{
      "id": "0",
      "todoItem": "Create architecture of the project in draw.io",
      "time": {
        "unit": "MINUTE",
        "amount": 40
      }
    },
    {
      "id": "1",
      "todoItem": "Update Service layer (get DTO instead of Preview)",
      "time": {
        "unit": "MINUTE",
        "amount": 25
      }
    },
    {
      "id": "2",
      "todoItem": "Update Preview models (User, Way)",
      "time": {
        "unit": "MINUTE",
        "amount": 15
      }
    },
    {
      "id": "3",
      "todoItem": "Create Data access logic layer with converters and fix mistakes",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    }
  ],
    "planForTomorrow": [{
      "id": "0",
      "todoItem": "Add cell editing in table",
      "time": {
        "unit": "MINUTE",
        "amount": 120 
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": [""],
    "mentorComment": [""],
    "isDayOff": false
  },
  {
    "id": "41",
    "date": "2023-09-25",
    "workDone": [{
      "id": "0",
      "todoItem": "Fix mistakes from review PR",
      "time": {
        "unit": "MINUTE",
        "amount": 80
      }
    },
    {
      "id": "1",
      "todoItem": "Add tsDocs",
      "time": {
        "unit": "MINUTE",
        "amount": 120
      }
    }
  ],
    "currentProblems": [""],
    "studentComment": [""],
    "learnedForToday": ["Understood that constructor can take any value, not just reference its own class"],
    "mentorComment": [""],
    "isDayOff": false
  }
]
